#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TapCommon

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function TapCommon.TapButtonSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct TapButtonSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TapButtonSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on TapButtonSlot_SetHorizontalAlignment");
static_assert(sizeof(TapButtonSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on TapButtonSlot_SetHorizontalAlignment");
static_assert(offsetof(TapButtonSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'TapButtonSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function TapCommon.TapButtonSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct TapButtonSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TapButtonSlot_SetPadding) == 0x000004, "Wrong alignment on TapButtonSlot_SetPadding");
static_assert(sizeof(TapButtonSlot_SetPadding) == 0x000010, "Wrong size on TapButtonSlot_SetPadding");
static_assert(offsetof(TapButtonSlot_SetPadding, InPadding) == 0x000000, "Member 'TapButtonSlot_SetPadding::InPadding' has a wrong offset!");

// Function TapCommon.TapButtonSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct TapButtonSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TapButtonSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on TapButtonSlot_SetVerticalAlignment");
static_assert(sizeof(TapButtonSlot_SetVerticalAlignment) == 0x000001, "Wrong size on TapButtonSlot_SetVerticalAlignment");
static_assert(offsetof(TapButtonSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'TapButtonSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function TapCommon.TapCommonBPLibrary.CallHandler
// 0x0010 (0x0010 - 0x0000)
struct TapCommonBPLibrary_CallHandler final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TapCommonBPLibrary_CallHandler) == 0x000008, "Wrong alignment on TapCommonBPLibrary_CallHandler");
static_assert(sizeof(TapCommonBPLibrary_CallHandler) == 0x000010, "Wrong size on TapCommonBPLibrary_CallHandler");
static_assert(offsetof(TapCommonBPLibrary_CallHandler, Command) == 0x000000, "Member 'TapCommonBPLibrary_CallHandler::Command' has a wrong offset!");

// Function TapCommon.TapCommonBPLibrary.Register
// 0x0020 (0x0020 - 0x0000)
struct TapCommonBPLibrary_Register final
{
public:
	class FString                                 ServiceClz;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServiceImpl;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TapCommonBPLibrary_Register) == 0x000008, "Wrong alignment on TapCommonBPLibrary_Register");
static_assert(sizeof(TapCommonBPLibrary_Register) == 0x000020, "Wrong size on TapCommonBPLibrary_Register");
static_assert(offsetof(TapCommonBPLibrary_Register, ServiceClz) == 0x000000, "Member 'TapCommonBPLibrary_Register::ServiceClz' has a wrong offset!");
static_assert(offsetof(TapCommonBPLibrary_Register, ServiceImpl) == 0x000010, "Member 'TapCommonBPLibrary_Register::ServiceImpl' has a wrong offset!");

// Function TapCommon.TapCommonBPLibrary.RemoveEmptyKey
// 0x00A0 (0x00A0 - 0x0000)
struct TapCommonBPLibrary_RemoveEmptyKey final
{
public:
	TMap<class FString, class FString>            StringMap;                                         // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0050(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TapCommonBPLibrary_RemoveEmptyKey) == 0x000008, "Wrong alignment on TapCommonBPLibrary_RemoveEmptyKey");
static_assert(sizeof(TapCommonBPLibrary_RemoveEmptyKey) == 0x0000A0, "Wrong size on TapCommonBPLibrary_RemoveEmptyKey");
static_assert(offsetof(TapCommonBPLibrary_RemoveEmptyKey, StringMap) == 0x000000, "Member 'TapCommonBPLibrary_RemoveEmptyKey::StringMap' has a wrong offset!");
static_assert(offsetof(TapCommonBPLibrary_RemoveEmptyKey, ReturnValue) == 0x000050, "Member 'TapCommonBPLibrary_RemoveEmptyKey::ReturnValue' has a wrong offset!");

// Function TapCommon.TapCommonBPLibrary.RemoveEmptyString
// 0x0020 (0x0020 - 0x0000)
struct TapCommonBPLibrary_RemoveEmptyString final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TapCommonBPLibrary_RemoveEmptyString) == 0x000008, "Wrong alignment on TapCommonBPLibrary_RemoveEmptyString");
static_assert(sizeof(TapCommonBPLibrary_RemoveEmptyString) == 0x000020, "Wrong size on TapCommonBPLibrary_RemoveEmptyString");
static_assert(offsetof(TapCommonBPLibrary_RemoveEmptyString, StringArray) == 0x000000, "Member 'TapCommonBPLibrary_RemoveEmptyString::StringArray' has a wrong offset!");
static_assert(offsetof(TapCommonBPLibrary_RemoveEmptyString, ReturnValue) == 0x000010, "Member 'TapCommonBPLibrary_RemoveEmptyString::ReturnValue' has a wrong offset!");

// Function TapCommon.TUHUD.ShowToast
// 0x0018 (0x0018 - 0x0000)
struct TUHUD_ShowToast final
{
public:
	class FString                                 Toast;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInterval;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2294[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TUHUD_ShowToast) == 0x000008, "Wrong alignment on TUHUD_ShowToast");
static_assert(sizeof(TUHUD_ShowToast) == 0x000018, "Wrong size on TUHUD_ShowToast");
static_assert(offsetof(TUHUD_ShowToast, Toast) == 0x000000, "Member 'TUHUD_ShowToast::Toast' has a wrong offset!");
static_assert(offsetof(TUHUD_ShowToast, TimeInterval) == 0x000010, "Member 'TUHUD_ShowToast::TimeInterval' has a wrong offset!");

// Function TapCommon.TUHUD.ShowWaitAndToast
// 0x0010 (0x0010 - 0x0000)
struct TUHUD_ShowWaitAndToast final
{
public:
	class FString                                 Toast;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TUHUD_ShowWaitAndToast) == 0x000008, "Wrong alignment on TUHUD_ShowWaitAndToast");
static_assert(sizeof(TUHUD_ShowWaitAndToast) == 0x000010, "Wrong size on TUHUD_ShowWaitAndToast");
static_assert(offsetof(TUHUD_ShowWaitAndToast, Toast) == 0x000000, "Member 'TUHUD_ShowWaitAndToast::Toast' has a wrong offset!");

}

