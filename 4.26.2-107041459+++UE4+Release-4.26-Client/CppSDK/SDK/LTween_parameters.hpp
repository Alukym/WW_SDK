#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LTween

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "LTween_structs.hpp"


namespace SDK::Params
{

// Function LTween.LTweenActor.GetLTweenInstance
// 0x0010 (0x0010 - 0x0000)
struct LTweenActor_GetLTweenInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALTweenActor*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenActor_GetLTweenInstance) == 0x000008, "Wrong alignment on LTweenActor_GetLTweenInstance");
static_assert(sizeof(LTweenActor_GetLTweenInstance) == 0x000010, "Wrong size on LTweenActor_GetLTweenInstance");
static_assert(offsetof(LTweenActor_GetLTweenInstance, WorldContextObject) == 0x000000, "Member 'LTweenActor_GetLTweenInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenActor_GetLTweenInstance, ReturnValue) == 0x000008, "Member 'LTweenActor_GetLTweenInstance::ReturnValue' has a wrong offset!");

// Function LTween.LTweenActor.CustomTick
// 0x0004 (0x0004 - 0x0000)
struct LTweenActor_CustomTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenActor_CustomTick) == 0x000004, "Wrong alignment on LTweenActor_CustomTick");
static_assert(sizeof(LTweenActor_CustomTick) == 0x000004, "Wrong size on LTweenActor_CustomTick");
static_assert(offsetof(LTweenActor_CustomTick, DeltaTime) == 0x000000, "Member 'LTweenActor_CustomTick::DeltaTime' has a wrong offset!");

// Function LTween.LTweenActor.KillAllTweens
// 0x0001 (0x0001 - 0x0000)
struct LTweenActor_KillAllTweens final
{
public:
	bool                                          CallComplete;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenActor_KillAllTweens) == 0x000001, "Wrong alignment on LTweenActor_KillAllTweens");
static_assert(sizeof(LTweenActor_KillAllTweens) == 0x000001, "Wrong size on LTweenActor_KillAllTweens");
static_assert(offsetof(LTweenActor_KillAllTweens, CallComplete) == 0x000000, "Member 'LTweenActor_KillAllTweens::CallComplete' has a wrong offset!");

// Function LTween.LTweenBPLibrary.ArrayKillIfIsTweening
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_ArrayKillIfIsTweening final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULTweener*>                      InTweenerArray;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          CallComplete;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C2[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_ArrayKillIfIsTweening) == 0x000008, "Wrong alignment on LTweenBPLibrary_ArrayKillIfIsTweening");
static_assert(sizeof(LTweenBPLibrary_ArrayKillIfIsTweening) == 0x000020, "Wrong size on LTweenBPLibrary_ArrayKillIfIsTweening");
static_assert(offsetof(LTweenBPLibrary_ArrayKillIfIsTweening, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_ArrayKillIfIsTweening::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ArrayKillIfIsTweening, InTweenerArray) == 0x000008, "Member 'LTweenBPLibrary_ArrayKillIfIsTweening::InTweenerArray' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ArrayKillIfIsTweening, CallComplete) == 0x000018, "Member 'LTweenBPLibrary_ArrayKillIfIsTweening::CallComplete' has a wrong offset!");

// Function LTween.LTweenBPLibrary.ColorTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_ColorTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FColor& Value)>         Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 StartValue;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 EndValue;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C3[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_ColorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_ColorTo");
static_assert(sizeof(LTweenBPLibrary_ColorTo) == 0x000038, "Wrong size on LTweenBPLibrary_ColorTo");
static_assert(offsetof(LTweenBPLibrary_ColorTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_ColorTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, Setter) == 0x000008, "Member 'LTweenBPLibrary_ColorTo::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, StartValue) == 0x00001C, "Member 'LTweenBPLibrary_ColorTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, EndValue) == 0x000020, "Member 'LTweenBPLibrary_ColorTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, Duration) == 0x000024, "Member 'LTweenBPLibrary_ColorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, Delay) == 0x000028, "Member 'LTweenBPLibrary_ColorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, Ease) == 0x00002C, "Member 'LTweenBPLibrary_ColorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_ColorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.DelayCall
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_DelayCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             DelayComplete;                                     // 0x000C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_DelayCall) == 0x000008, "Wrong alignment on LTweenBPLibrary_DelayCall");
static_assert(sizeof(LTweenBPLibrary_DelayCall) == 0x000028, "Wrong size on LTweenBPLibrary_DelayCall");
static_assert(offsetof(LTweenBPLibrary_DelayCall, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_DelayCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayCall, DelayTime) == 0x000008, "Member 'LTweenBPLibrary_DelayCall::DelayTime' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayCall, DelayComplete) == 0x00000C, "Member 'LTweenBPLibrary_DelayCall::DelayComplete' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayCall, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_DelayCall::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.DelayFrameCall
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_DelayFrameCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             DelayComplete;                                     // 0x000C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_DelayFrameCall) == 0x000008, "Wrong alignment on LTweenBPLibrary_DelayFrameCall");
static_assert(sizeof(LTweenBPLibrary_DelayFrameCall) == 0x000028, "Wrong size on LTweenBPLibrary_DelayFrameCall");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_DelayFrameCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, FrameCount) == 0x000008, "Member 'LTweenBPLibrary_DelayFrameCall::FrameCount' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, DelayComplete) == 0x00000C, "Member 'LTweenBPLibrary_DelayFrameCall::DelayComplete' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_DelayFrameCall::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.FloatTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_FloatTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float Value)>                  Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C4[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_FloatTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_FloatTo");
static_assert(sizeof(LTweenBPLibrary_FloatTo) == 0x000038, "Wrong size on LTweenBPLibrary_FloatTo");
static_assert(offsetof(LTweenBPLibrary_FloatTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_FloatTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, Setter) == 0x000008, "Member 'LTweenBPLibrary_FloatTo::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, StartValue) == 0x00001C, "Member 'LTweenBPLibrary_FloatTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, EndValue) == 0x000020, "Member 'LTweenBPLibrary_FloatTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, Duration) == 0x000024, "Member 'LTweenBPLibrary_FloatTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, Delay) == 0x000028, "Member 'LTweenBPLibrary_FloatTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, Ease) == 0x00002C, "Member 'LTweenBPLibrary_FloatTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_FloatTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.IntTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_IntTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Value)>                  Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         StartValue;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndValue;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C5[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_IntTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_IntTo");
static_assert(sizeof(LTweenBPLibrary_IntTo) == 0x000038, "Wrong size on LTweenBPLibrary_IntTo");
static_assert(offsetof(LTweenBPLibrary_IntTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_IntTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, Setter) == 0x000008, "Member 'LTweenBPLibrary_IntTo::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, StartValue) == 0x00001C, "Member 'LTweenBPLibrary_IntTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, EndValue) == 0x000020, "Member 'LTweenBPLibrary_IntTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, Duration) == 0x000024, "Member 'LTweenBPLibrary_IntTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, Delay) == 0x000028, "Member 'LTweenBPLibrary_IntTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, Ease) == 0x00002C, "Member 'LTweenBPLibrary_IntTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_IntTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.IsTweening
// 0x0018 (0x0018 - 0x0000)
struct LTweenBPLibrary_IsTweening final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              InTweener;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C6[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_IsTweening) == 0x000008, "Wrong alignment on LTweenBPLibrary_IsTweening");
static_assert(sizeof(LTweenBPLibrary_IsTweening) == 0x000018, "Wrong size on LTweenBPLibrary_IsTweening");
static_assert(offsetof(LTweenBPLibrary_IsTweening, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_IsTweening::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IsTweening, InTweener) == 0x000008, "Member 'LTweenBPLibrary_IsTweening::InTweener' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IsTweening, ReturnValue) == 0x000010, "Member 'LTweenBPLibrary_IsTweening::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.KillIfIsTweening
// 0x0018 (0x0018 - 0x0000)
struct LTweenBPLibrary_KillIfIsTweening final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              InTweener;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallComplete;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_KillIfIsTweening) == 0x000008, "Wrong alignment on LTweenBPLibrary_KillIfIsTweening");
static_assert(sizeof(LTweenBPLibrary_KillIfIsTweening) == 0x000018, "Wrong size on LTweenBPLibrary_KillIfIsTweening");
static_assert(offsetof(LTweenBPLibrary_KillIfIsTweening, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_KillIfIsTweening::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_KillIfIsTweening, InTweener) == 0x000008, "Member 'LTweenBPLibrary_KillIfIsTweening::InTweener' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_KillIfIsTweening, CallComplete) == 0x000010, "Member 'LTweenBPLibrary_KillIfIsTweening::CallComplete' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LinearColorTo
// 0x0050 (0x0050 - 0x0000)
struct LTweenBPLibrary_LinearColorTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FLinearColor& Value)>   Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           StartValue;                                        // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EndValue;                                          // 0x002C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C8[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LinearColorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LinearColorTo");
static_assert(sizeof(LTweenBPLibrary_LinearColorTo) == 0x000050, "Wrong size on LTweenBPLibrary_LinearColorTo");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_LinearColorTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, Setter) == 0x000008, "Member 'LTweenBPLibrary_LinearColorTo::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, StartValue) == 0x00001C, "Member 'LTweenBPLibrary_LinearColorTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, EndValue) == 0x00002C, "Member 'LTweenBPLibrary_LinearColorTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, Duration) == 0x00003C, "Member 'LTweenBPLibrary_LinearColorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, Delay) == 0x000040, "Member 'LTweenBPLibrary_LinearColorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, Ease) == 0x000044, "Member 'LTweenBPLibrary_LinearColorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, ReturnValue) == 0x000048, "Member 'LTweenBPLibrary_LinearColorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_LocalPositionTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C9[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionTo");
static_assert(sizeof(LTweenBPLibrary_LocalPositionTo) == 0x000028, "Wrong size on LTweenBPLibrary_LocalPositionTo");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, Duration) == 0x000014, "Member 'LTweenBPLibrary_LocalPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, Delay) == 0x000018, "Member 'LTweenBPLibrary_LocalPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, Ease) == 0x00001C, "Member 'LTweenBPLibrary_LocalPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_LocalPositionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionTo_Sweep
// 0x00C0 (0x00C0 - 0x0000)
struct LTweenBPLibrary_LocalPositionTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0014(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CA[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CB[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalPositionTo_Sweep) == 0x0000C0, "Wrong size on LTweenBPLibrary_LocalPositionTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, SweepHitResult) == 0x000014, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Sweep) == 0x0000A8, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Teleport) == 0x0000A9, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Duration) == 0x0000AC, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Delay) == 0x0000B0, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Ease) == 0x0000B4, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, ReturnValue) == 0x0000B8, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionXTo
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_LocalPositionXTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CC[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionXTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionXTo");
static_assert(sizeof(LTweenBPLibrary_LocalPositionXTo) == 0x000020, "Wrong size on LTweenBPLibrary_LocalPositionXTo");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionXTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionXTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, Duration) == 0x00000C, "Member 'LTweenBPLibrary_LocalPositionXTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, Delay) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionXTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, Ease) == 0x000014, "Member 'LTweenBPLibrary_LocalPositionXTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, ReturnValue) == 0x000018, "Member 'LTweenBPLibrary_LocalPositionXTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionXTo_Sweep
// 0x00B8 (0x00B8 - 0x0000)
struct LTweenBPLibrary_LocalPositionXTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x000C(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CD[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CE[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionXTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionXTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalPositionXTo_Sweep) == 0x0000B8, "Wrong size on LTweenBPLibrary_LocalPositionXTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, SweepHitResult) == 0x00000C, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Sweep) == 0x0000A0, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Teleport) == 0x0000A1, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Duration) == 0x0000A4, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Delay) == 0x0000A8, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Ease) == 0x0000AC, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, ReturnValue) == 0x0000B0, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionYTo
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_LocalPositionYTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CF[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionYTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionYTo");
static_assert(sizeof(LTweenBPLibrary_LocalPositionYTo) == 0x000020, "Wrong size on LTweenBPLibrary_LocalPositionYTo");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionYTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionYTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, Duration) == 0x00000C, "Member 'LTweenBPLibrary_LocalPositionYTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, Delay) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionYTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, Ease) == 0x000014, "Member 'LTweenBPLibrary_LocalPositionYTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, ReturnValue) == 0x000018, "Member 'LTweenBPLibrary_LocalPositionYTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionYTo_Sweep
// 0x00B8 (0x00B8 - 0x0000)
struct LTweenBPLibrary_LocalPositionYTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x000C(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D0[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D1[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionYTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionYTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalPositionYTo_Sweep) == 0x0000B8, "Wrong size on LTweenBPLibrary_LocalPositionYTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, SweepHitResult) == 0x00000C, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Sweep) == 0x0000A0, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Teleport) == 0x0000A1, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Duration) == 0x0000A4, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Delay) == 0x0000A8, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Ease) == 0x0000AC, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, ReturnValue) == 0x0000B0, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionZTo
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_LocalPositionZTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D2[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionZTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionZTo");
static_assert(sizeof(LTweenBPLibrary_LocalPositionZTo) == 0x000020, "Wrong size on LTweenBPLibrary_LocalPositionZTo");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionZTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionZTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, Duration) == 0x00000C, "Member 'LTweenBPLibrary_LocalPositionZTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, Delay) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionZTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, Ease) == 0x000014, "Member 'LTweenBPLibrary_LocalPositionZTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, ReturnValue) == 0x000018, "Member 'LTweenBPLibrary_LocalPositionZTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionZTo_Sweep
// 0x00B8 (0x00B8 - 0x0000)
struct LTweenBPLibrary_LocalPositionZTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x000C(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D3[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D4[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionZTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionZTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalPositionZTo_Sweep) == 0x0000B8, "Wrong size on LTweenBPLibrary_LocalPositionZTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, SweepHitResult) == 0x00000C, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Sweep) == 0x0000A0, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Teleport) == 0x0000A1, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Duration) == 0x0000A4, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Delay) == 0x0000A8, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Ease) == 0x0000AC, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, ReturnValue) == 0x0000B0, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotateEulerAngleTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_LocalRotateEulerAngleTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EulerAngle;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D5[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotateEulerAngleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalRotateEulerAngleTo");
static_assert(sizeof(LTweenBPLibrary_LocalRotateEulerAngleTo) == 0x000028, "Wrong size on LTweenBPLibrary_LocalRotateEulerAngleTo");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, EulerAngle) == 0x000008, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::EulerAngle' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, Duration) == 0x000014, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, Delay) == 0x000018, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, Ease) == 0x00001C, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotateEulerAngleTo_Sweep
// 0x00C0 (0x00C0 - 0x0000)
struct LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EulerAngle;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0014(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D6[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D7[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep) == 0x0000C0, "Wrong size on LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, EulerAngle) == 0x000008, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::EulerAngle' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, SweepHitResult) == 0x000014, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Sweep) == 0x0000A8, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Teleport) == 0x0000A9, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Duration) == 0x0000AC, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Delay) == 0x0000B0, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Ease) == 0x0000B4, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, ReturnValue) == 0x0000B8, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotationQuaternionTo
// 0x0040 (0x0040 - 0x0000)
struct LTweenBPLibrary_LocalRotationQuaternionTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D8[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  EndValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D9[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DA[0x8];                                     // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_LocalRotationQuaternionTo) == 0x000010, "Wrong alignment on LTweenBPLibrary_LocalRotationQuaternionTo");
static_assert(sizeof(LTweenBPLibrary_LocalRotationQuaternionTo) == 0x000040, "Wrong size on LTweenBPLibrary_LocalRotationQuaternionTo");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, EndValue) == 0x000010, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotationQuaternionTo_Sweep
// 0x00D0 (0x00D0 - 0x0000)
struct LTweenBPLibrary_LocalRotationQuaternionTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DB[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  EndValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0020(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00B5(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DC[0x2];                                     // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00BC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DD[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00C8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep) == 0x000010, "Wrong alignment on LTweenBPLibrary_LocalRotationQuaternionTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep) == 0x0000D0, "Wrong size on LTweenBPLibrary_LocalRotationQuaternionTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, EndValue) == 0x000010, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, SweepHitResult) == 0x000020, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Sweep) == 0x0000B4, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Teleport) == 0x0000B5, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Duration) == 0x0000B8, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Delay) == 0x0000BC, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Ease) == 0x0000C0, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, ReturnValue) == 0x0000C8, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotatorTo
// 0x0030 (0x0030 - 0x0000)
struct LTweenBPLibrary_LocalRotatorTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShortestPath;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DE[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DF[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotatorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalRotatorTo");
static_assert(sizeof(LTweenBPLibrary_LocalRotatorTo) == 0x000030, "Wrong size on LTweenBPLibrary_LocalRotatorTo");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotatorTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalRotatorTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, ShortestPath) == 0x000014, "Member 'LTweenBPLibrary_LocalRotatorTo::ShortestPath' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, Duration) == 0x000018, "Member 'LTweenBPLibrary_LocalRotatorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, Delay) == 0x00001C, "Member 'LTweenBPLibrary_LocalRotatorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, Ease) == 0x000020, "Member 'LTweenBPLibrary_LocalRotatorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, ReturnValue) == 0x000028, "Member 'LTweenBPLibrary_LocalRotatorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotatorTo_Sweep
// 0x00C8 (0x00C8 - 0x0000)
struct LTweenBPLibrary_LocalRotatorTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShortestPath;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E0[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0018(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00AD(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E1[0x2];                                     // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E2[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotatorTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalRotatorTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalRotatorTo_Sweep) == 0x0000C8, "Wrong size on LTweenBPLibrary_LocalRotatorTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, ShortestPath) == 0x000014, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::ShortestPath' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, SweepHitResult) == 0x000018, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Sweep) == 0x0000AC, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Teleport) == 0x0000AD, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Duration) == 0x0000B0, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Delay) == 0x0000B4, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Ease) == 0x0000B8, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, ReturnValue) == 0x0000C0, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalScaleTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_LocalScaleTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E3[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalScaleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalScaleTo");
static_assert(sizeof(LTweenBPLibrary_LocalScaleTo) == 0x000028, "Wrong size on LTweenBPLibrary_LocalScaleTo");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalScaleTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_LocalScaleTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, Duration) == 0x000014, "Member 'LTweenBPLibrary_LocalScaleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, Delay) == 0x000018, "Member 'LTweenBPLibrary_LocalScaleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, Ease) == 0x00001C, "Member 'LTweenBPLibrary_LocalScaleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_LocalScaleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.MaterialScalarParameterTo
// 0x0030 (0x0030 - 0x0000)
struct LTweenBPLibrary_MaterialScalarParameterTo final
{
public:
	class UMaterialInstanceDynamic*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E4[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_MaterialScalarParameterTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_MaterialScalarParameterTo");
static_assert(sizeof(LTweenBPLibrary_MaterialScalarParameterTo) == 0x000030, "Wrong size on LTweenBPLibrary_MaterialScalarParameterTo");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, Target) == 0x000000, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, ParameterName) == 0x000008, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::ParameterName' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, EndValue) == 0x000014, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, Duration) == 0x000018, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, Delay) == 0x00001C, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, Ease) == 0x000020, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, ReturnValue) == 0x000028, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.MaterialVectorParameterTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_MaterialVectorParameterTo final
{
public:
	class UMaterialInstanceDynamic*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EndValue;                                          // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E5[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_MaterialVectorParameterTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_MaterialVectorParameterTo");
static_assert(sizeof(LTweenBPLibrary_MaterialVectorParameterTo) == 0x000038, "Wrong size on LTweenBPLibrary_MaterialVectorParameterTo");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, Target) == 0x000000, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, ParameterName) == 0x000008, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::ParameterName' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, EndValue) == 0x000014, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, Duration) == 0x000024, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, Delay) == 0x000028, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, Ease) == 0x00002C, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.MeshMaterialScalarParameterTo
// 0x0030 (0x0030 - 0x0000)
struct LTweenBPLibrary_MeshMaterialScalarParameterTo final
{
public:
	class UMeshComponent*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E6[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_MeshMaterialScalarParameterTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_MeshMaterialScalarParameterTo");
static_assert(sizeof(LTweenBPLibrary_MeshMaterialScalarParameterTo) == 0x000030, "Wrong size on LTweenBPLibrary_MeshMaterialScalarParameterTo");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, Target) == 0x000000, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, MaterialIndex) == 0x000008, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::MaterialIndex' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, ParameterName) == 0x00000C, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::ParameterName' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, EndValue) == 0x000018, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, Duration) == 0x00001C, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, Delay) == 0x000020, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, Ease) == 0x000024, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, ReturnValue) == 0x000028, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.MeshMaterialVectorParameterTo
// 0x0040 (0x0040 - 0x0000)
struct LTweenBPLibrary_MeshMaterialVectorParameterTo final
{
public:
	class UMeshComponent*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EndValue;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E7[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_MeshMaterialVectorParameterTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_MeshMaterialVectorParameterTo");
static_assert(sizeof(LTweenBPLibrary_MeshMaterialVectorParameterTo) == 0x000040, "Wrong size on LTweenBPLibrary_MeshMaterialVectorParameterTo");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, Target) == 0x000000, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, MaterialIndex) == 0x000008, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::MaterialIndex' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, ParameterName) == 0x00000C, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::ParameterName' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, EndValue) == 0x000018, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, Duration) == 0x000028, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, Delay) == 0x00002C, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, Ease) == 0x000030, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, ReturnValue) == 0x000038, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.QuaternionTo
// 0x0060 (0x0060 - 0x0000)
struct LTweenBPLibrary_QuaternionTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FQuat& Value)>          Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  StartValue;                                        // 0x0020(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  EndValue;                                          // 0x0030(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E9[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EA[0x8];                                     // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_QuaternionTo) == 0x000010, "Wrong alignment on LTweenBPLibrary_QuaternionTo");
static_assert(sizeof(LTweenBPLibrary_QuaternionTo) == 0x000060, "Wrong size on LTweenBPLibrary_QuaternionTo");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_QuaternionTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, Setter) == 0x000008, "Member 'LTweenBPLibrary_QuaternionTo::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, StartValue) == 0x000020, "Member 'LTweenBPLibrary_QuaternionTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, EndValue) == 0x000030, "Member 'LTweenBPLibrary_QuaternionTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, Duration) == 0x000040, "Member 'LTweenBPLibrary_QuaternionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, Delay) == 0x000044, "Member 'LTweenBPLibrary_QuaternionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, Ease) == 0x000048, "Member 'LTweenBPLibrary_QuaternionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, ReturnValue) == 0x000050, "Member 'LTweenBPLibrary_QuaternionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.RegisterUpdateEvent
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_RegisterUpdateEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float InProgress)>             Update;                                            // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EB[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLTweenDelegateHandleWrapper           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_RegisterUpdateEvent) == 0x000008, "Wrong alignment on LTweenBPLibrary_RegisterUpdateEvent");
static_assert(sizeof(LTweenBPLibrary_RegisterUpdateEvent) == 0x000028, "Wrong size on LTweenBPLibrary_RegisterUpdateEvent");
static_assert(offsetof(LTweenBPLibrary_RegisterUpdateEvent, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_RegisterUpdateEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RegisterUpdateEvent, Update) == 0x000008, "Member 'LTweenBPLibrary_RegisterUpdateEvent::Update' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RegisterUpdateEvent, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_RegisterUpdateEvent::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.RotatorTo
// 0x0048 (0x0048 - 0x0000)
struct LTweenBPLibrary_RotatorTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FRotator& Value)>       Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               StartValue;                                        // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               EndValue;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EC[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_RotatorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_RotatorTo");
static_assert(sizeof(LTweenBPLibrary_RotatorTo) == 0x000048, "Wrong size on LTweenBPLibrary_RotatorTo");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_RotatorTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, Setter) == 0x000008, "Member 'LTweenBPLibrary_RotatorTo::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, StartValue) == 0x00001C, "Member 'LTweenBPLibrary_RotatorTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, EndValue) == 0x000028, "Member 'LTweenBPLibrary_RotatorTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, Duration) == 0x000034, "Member 'LTweenBPLibrary_RotatorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, Delay) == 0x000038, "Member 'LTweenBPLibrary_RotatorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, Ease) == 0x00003C, "Member 'LTweenBPLibrary_RotatorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, ReturnValue) == 0x000040, "Member 'LTweenBPLibrary_RotatorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UnregisterUpdateEvent
// 0x0010 (0x0010 - 0x0000)
struct LTweenBPLibrary_UnregisterUpdateEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLTweenDelegateHandleWrapper           DelegateHandle;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UnregisterUpdateEvent) == 0x000008, "Wrong alignment on LTweenBPLibrary_UnregisterUpdateEvent");
static_assert(sizeof(LTweenBPLibrary_UnregisterUpdateEvent) == 0x000010, "Wrong size on LTweenBPLibrary_UnregisterUpdateEvent");
static_assert(offsetof(LTweenBPLibrary_UnregisterUpdateEvent, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UnregisterUpdateEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UnregisterUpdateEvent, DelegateHandle) == 0x000008, "Member 'LTweenBPLibrary_UnregisterUpdateEvent::DelegateHandle' has a wrong offset!");

// Function LTween.LTweenBPLibrary.Vector2To
// 0x0040 (0x0040 - 0x0000)
struct LTweenBPLibrary_Vector2To final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVector2D& Value)>      Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              StartValue;                                        // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndValue;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13ED[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_Vector2To) == 0x000008, "Wrong alignment on LTweenBPLibrary_Vector2To");
static_assert(sizeof(LTweenBPLibrary_Vector2To) == 0x000040, "Wrong size on LTweenBPLibrary_Vector2To");
static_assert(offsetof(LTweenBPLibrary_Vector2To, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_Vector2To::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, Setter) == 0x000008, "Member 'LTweenBPLibrary_Vector2To::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, StartValue) == 0x00001C, "Member 'LTweenBPLibrary_Vector2To::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, EndValue) == 0x000024, "Member 'LTweenBPLibrary_Vector2To::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, Duration) == 0x00002C, "Member 'LTweenBPLibrary_Vector2To::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, Delay) == 0x000030, "Member 'LTweenBPLibrary_Vector2To::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, Ease) == 0x000034, "Member 'LTweenBPLibrary_Vector2To::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, ReturnValue) == 0x000038, "Member 'LTweenBPLibrary_Vector2To::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.Vector3To
// 0x0048 (0x0048 - 0x0000)
struct LTweenBPLibrary_Vector3To final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVector& Value)>        Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StartValue;                                        // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndValue;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EE[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_Vector3To) == 0x000008, "Wrong alignment on LTweenBPLibrary_Vector3To");
static_assert(sizeof(LTweenBPLibrary_Vector3To) == 0x000048, "Wrong size on LTweenBPLibrary_Vector3To");
static_assert(offsetof(LTweenBPLibrary_Vector3To, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_Vector3To::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, Setter) == 0x000008, "Member 'LTweenBPLibrary_Vector3To::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, StartValue) == 0x00001C, "Member 'LTweenBPLibrary_Vector3To::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, EndValue) == 0x000028, "Member 'LTweenBPLibrary_Vector3To::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, Duration) == 0x000034, "Member 'LTweenBPLibrary_Vector3To::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, Delay) == 0x000038, "Member 'LTweenBPLibrary_Vector3To::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, Ease) == 0x00003C, "Member 'LTweenBPLibrary_Vector3To::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, ReturnValue) == 0x000040, "Member 'LTweenBPLibrary_Vector3To::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.Vector4To
// 0x0060 (0x0060 - 0x0000)
struct LTweenBPLibrary_Vector4To final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVector4& Value)>       Setter;                                            // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EF[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               StartValue;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               EndValue;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F0[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F1[0x8];                                     // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_Vector4To) == 0x000010, "Wrong alignment on LTweenBPLibrary_Vector4To");
static_assert(sizeof(LTweenBPLibrary_Vector4To) == 0x000060, "Wrong size on LTweenBPLibrary_Vector4To");
static_assert(offsetof(LTweenBPLibrary_Vector4To, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_Vector4To::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, Setter) == 0x000008, "Member 'LTweenBPLibrary_Vector4To::Setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, StartValue) == 0x000020, "Member 'LTweenBPLibrary_Vector4To::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, EndValue) == 0x000030, "Member 'LTweenBPLibrary_Vector4To::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, Duration) == 0x000040, "Member 'LTweenBPLibrary_Vector4To::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, Delay) == 0x000044, "Member 'LTweenBPLibrary_Vector4To::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, Ease) == 0x000048, "Member 'LTweenBPLibrary_Vector4To::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, ReturnValue) == 0x000050, "Member 'LTweenBPLibrary_Vector4To::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.VirtualCall
// 0x0058 (0x0058 - 0x0000)
struct LTweenBPLibrary_VirtualCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Start;                                             // 0x0010(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(float InProgress)>             Update;                                            // 0x0024(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Complete;                                          // 0x0038(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F2[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_VirtualCall) == 0x000008, "Wrong alignment on LTweenBPLibrary_VirtualCall");
static_assert(sizeof(LTweenBPLibrary_VirtualCall) == 0x000058, "Wrong size on LTweenBPLibrary_VirtualCall");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_VirtualCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Duration) == 0x000008, "Member 'LTweenBPLibrary_VirtualCall::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Delay) == 0x00000C, "Member 'LTweenBPLibrary_VirtualCall::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Start) == 0x000010, "Member 'LTweenBPLibrary_VirtualCall::Start' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Update) == 0x000024, "Member 'LTweenBPLibrary_VirtualCall::Update' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Complete) == 0x000038, "Member 'LTweenBPLibrary_VirtualCall::Complete' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, ReturnValue) == 0x000050, "Member 'LTweenBPLibrary_VirtualCall::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_WorldPositionTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F3[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionTo");
static_assert(sizeof(LTweenBPLibrary_WorldPositionTo) == 0x000028, "Wrong size on LTweenBPLibrary_WorldPositionTo");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, Duration) == 0x000014, "Member 'LTweenBPLibrary_WorldPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, Delay) == 0x000018, "Member 'LTweenBPLibrary_WorldPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, Ease) == 0x00001C, "Member 'LTweenBPLibrary_WorldPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_WorldPositionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionTo_Sweep
// 0x00C0 (0x00C0 - 0x0000)
struct LTweenBPLibrary_WorldPositionTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0014(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F4[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F5[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldPositionTo_Sweep) == 0x0000C0, "Wrong size on LTweenBPLibrary_WorldPositionTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, SweepHitResult) == 0x000014, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Sweep) == 0x0000A8, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Teleport) == 0x0000A9, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Duration) == 0x0000AC, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Delay) == 0x0000B0, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Ease) == 0x0000B4, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, ReturnValue) == 0x0000B8, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionXTo
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_WorldPositionXTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F6[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionXTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionXTo");
static_assert(sizeof(LTweenBPLibrary_WorldPositionXTo) == 0x000020, "Wrong size on LTweenBPLibrary_WorldPositionXTo");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionXTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionXTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, Duration) == 0x00000C, "Member 'LTweenBPLibrary_WorldPositionXTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, Delay) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionXTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, Ease) == 0x000014, "Member 'LTweenBPLibrary_WorldPositionXTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, ReturnValue) == 0x000018, "Member 'LTweenBPLibrary_WorldPositionXTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionXTo_Sweep
// 0x00B8 (0x00B8 - 0x0000)
struct LTweenBPLibrary_WorldPositionXTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x000C(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F7[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F8[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionXTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionXTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldPositionXTo_Sweep) == 0x0000B8, "Wrong size on LTweenBPLibrary_WorldPositionXTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, SweepHitResult) == 0x00000C, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Sweep) == 0x0000A0, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Teleport) == 0x0000A1, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Duration) == 0x0000A4, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Delay) == 0x0000A8, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Ease) == 0x0000AC, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, ReturnValue) == 0x0000B0, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionYTo
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_WorldPositionYTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F9[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionYTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionYTo");
static_assert(sizeof(LTweenBPLibrary_WorldPositionYTo) == 0x000020, "Wrong size on LTweenBPLibrary_WorldPositionYTo");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionYTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionYTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, Duration) == 0x00000C, "Member 'LTweenBPLibrary_WorldPositionYTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, Delay) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionYTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, Ease) == 0x000014, "Member 'LTweenBPLibrary_WorldPositionYTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, ReturnValue) == 0x000018, "Member 'LTweenBPLibrary_WorldPositionYTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionYTo_Sweep
// 0x00B8 (0x00B8 - 0x0000)
struct LTweenBPLibrary_WorldPositionYTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x000C(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FA[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FB[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionYTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionYTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldPositionYTo_Sweep) == 0x0000B8, "Wrong size on LTweenBPLibrary_WorldPositionYTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, SweepHitResult) == 0x00000C, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Sweep) == 0x0000A0, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Teleport) == 0x0000A1, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Duration) == 0x0000A4, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Delay) == 0x0000A8, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Ease) == 0x0000AC, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, ReturnValue) == 0x0000B0, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionZTo
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_WorldPositionZTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FC[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionZTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionZTo");
static_assert(sizeof(LTweenBPLibrary_WorldPositionZTo) == 0x000020, "Wrong size on LTweenBPLibrary_WorldPositionZTo");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionZTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionZTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, Duration) == 0x00000C, "Member 'LTweenBPLibrary_WorldPositionZTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, Delay) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionZTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, Ease) == 0x000014, "Member 'LTweenBPLibrary_WorldPositionZTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, ReturnValue) == 0x000018, "Member 'LTweenBPLibrary_WorldPositionZTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionZTo_Sweep
// 0x00B8 (0x00B8 - 0x0000)
struct LTweenBPLibrary_WorldPositionZTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x000C(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FD[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FE[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionZTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionZTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldPositionZTo_Sweep) == 0x0000B8, "Wrong size on LTweenBPLibrary_WorldPositionZTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, SweepHitResult) == 0x00000C, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Sweep) == 0x0000A0, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Teleport) == 0x0000A1, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Duration) == 0x0000A4, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Delay) == 0x0000A8, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Ease) == 0x0000AC, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, ReturnValue) == 0x0000B0, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotateEulerAngleTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_WorldRotateEulerAngleTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EulerAngle;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FF[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotateEulerAngleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldRotateEulerAngleTo");
static_assert(sizeof(LTweenBPLibrary_WorldRotateEulerAngleTo) == 0x000028, "Wrong size on LTweenBPLibrary_WorldRotateEulerAngleTo");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, EulerAngle) == 0x000008, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::EulerAngle' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, Duration) == 0x000014, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, Delay) == 0x000018, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, Ease) == 0x00001C, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotateEulerAngleTo_Sweep
// 0x00C0 (0x00C0 - 0x0000)
struct LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EulerAngle;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0014(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1400[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1401[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep) == 0x0000C0, "Wrong size on LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, EulerAngle) == 0x000008, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::EulerAngle' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, SweepHitResult) == 0x000014, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Sweep) == 0x0000A8, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Teleport) == 0x0000A9, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Duration) == 0x0000AC, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Delay) == 0x0000B0, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Ease) == 0x0000B4, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, ReturnValue) == 0x0000B8, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotationQuaternionTo
// 0x0040 (0x0040 - 0x0000)
struct LTweenBPLibrary_WorldRotationQuaternionTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1402[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  EndValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1403[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1404[0x8];                                     // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_WorldRotationQuaternionTo) == 0x000010, "Wrong alignment on LTweenBPLibrary_WorldRotationQuaternionTo");
static_assert(sizeof(LTweenBPLibrary_WorldRotationQuaternionTo) == 0x000040, "Wrong size on LTweenBPLibrary_WorldRotationQuaternionTo");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, EndValue) == 0x000010, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotationQuaternionTo_Sweep
// 0x00D0 (0x00D0 - 0x0000)
struct LTweenBPLibrary_WorldRotationQuaternionTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1405[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  EndValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0020(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00B5(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1406[0x2];                                     // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00BC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1407[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00C8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep) == 0x000010, "Wrong alignment on LTweenBPLibrary_WorldRotationQuaternionTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep) == 0x0000D0, "Wrong size on LTweenBPLibrary_WorldRotationQuaternionTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, EndValue) == 0x000010, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, SweepHitResult) == 0x000020, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Sweep) == 0x0000B4, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Teleport) == 0x0000B5, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Duration) == 0x0000B8, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Delay) == 0x0000BC, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Ease) == 0x0000C0, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, ReturnValue) == 0x0000C8, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotatorTo
// 0x0030 (0x0030 - 0x0000)
struct LTweenBPLibrary_WorldRotatorTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShortestPath;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1408[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1409[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotatorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldRotatorTo");
static_assert(sizeof(LTweenBPLibrary_WorldRotatorTo) == 0x000030, "Wrong size on LTweenBPLibrary_WorldRotatorTo");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotatorTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldRotatorTo::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, ShortestPath) == 0x000014, "Member 'LTweenBPLibrary_WorldRotatorTo::ShortestPath' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, Duration) == 0x000018, "Member 'LTweenBPLibrary_WorldRotatorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, Delay) == 0x00001C, "Member 'LTweenBPLibrary_WorldRotatorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, Ease) == 0x000020, "Member 'LTweenBPLibrary_WorldRotatorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, ReturnValue) == 0x000028, "Member 'LTweenBPLibrary_WorldRotatorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotatorTo_Sweep
// 0x00C8 (0x00C8 - 0x0000)
struct LTweenBPLibrary_WorldRotatorTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShortestPath;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140A[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0018(0x0094)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Sweep;                                             // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x00AD(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140B[0x2];                                     // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x00B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140C[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotatorTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldRotatorTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldRotatorTo_Sweep) == 0x0000C8, "Wrong size on LTweenBPLibrary_WorldRotatorTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, EndValue) == 0x000008, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::EndValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, ShortestPath) == 0x000014, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::ShortestPath' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, SweepHitResult) == 0x000018, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Sweep) == 0x0000AC, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Teleport) == 0x0000AD, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Duration) == 0x0000B0, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Delay) == 0x0000B4, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Ease) == 0x0000B8, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, ReturnValue) == 0x0000C0, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetLoopCount
// 0x0004 (0x0004 - 0x0000)
struct LTweener_GetLoopCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetLoopCount) == 0x000004, "Wrong alignment on LTweener_GetLoopCount");
static_assert(sizeof(LTweener_GetLoopCount) == 0x000004, "Wrong size on LTweener_GetLoopCount");
static_assert(offsetof(LTweener_GetLoopCount, ReturnValue) == 0x000000, "Member 'LTweener_GetLoopCount::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.Kill
// 0x0001 (0x0001 - 0x0000)
struct LTweener_Kill final
{
public:
	bool                                          CallComplete;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_Kill) == 0x000001, "Wrong alignment on LTweener_Kill");
static_assert(sizeof(LTweener_Kill) == 0x000001, "Wrong size on LTweener_Kill");
static_assert(offsetof(LTweener_Kill, CallComplete) == 0x000000, "Member 'LTweener_Kill::CallComplete' has a wrong offset!");

// Function LTween.LTweener.OnComplete
// 0x0020 (0x0020 - 0x0000)
struct LTweener_OnComplete final
{
public:
	TDelegate<void()>                             NewComplete;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_140F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnComplete) == 0x000008, "Wrong alignment on LTweener_OnComplete");
static_assert(sizeof(LTweener_OnComplete) == 0x000020, "Wrong size on LTweener_OnComplete");
static_assert(offsetof(LTweener_OnComplete, NewComplete) == 0x000000, "Member 'LTweener_OnComplete::NewComplete' has a wrong offset!");
static_assert(offsetof(LTweener_OnComplete, ReturnValue) == 0x000018, "Member 'LTweener_OnComplete::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.OnCycleComplete
// 0x0020 (0x0020 - 0x0000)
struct LTweener_OnCycleComplete final
{
public:
	TDelegate<void()>                             NewCycleComplete;                                  // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1410[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnCycleComplete) == 0x000008, "Wrong alignment on LTweener_OnCycleComplete");
static_assert(sizeof(LTweener_OnCycleComplete) == 0x000020, "Wrong size on LTweener_OnCycleComplete");
static_assert(offsetof(LTweener_OnCycleComplete, NewCycleComplete) == 0x000000, "Member 'LTweener_OnCycleComplete::NewCycleComplete' has a wrong offset!");
static_assert(offsetof(LTweener_OnCycleComplete, ReturnValue) == 0x000018, "Member 'LTweener_OnCycleComplete::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.OnStart
// 0x0020 (0x0020 - 0x0000)
struct LTweener_OnStart final
{
public:
	TDelegate<void()>                             NewStart;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1411[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnStart) == 0x000008, "Wrong alignment on LTweener_OnStart");
static_assert(sizeof(LTweener_OnStart) == 0x000020, "Wrong size on LTweener_OnStart");
static_assert(offsetof(LTweener_OnStart, NewStart) == 0x000000, "Member 'LTweener_OnStart::NewStart' has a wrong offset!");
static_assert(offsetof(LTweener_OnStart, ReturnValue) == 0x000018, "Member 'LTweener_OnStart::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.OnUpdate
// 0x0020 (0x0020 - 0x0000)
struct LTweener_OnUpdate final
{
public:
	TDelegate<void(float InProgress)>             NewUpdate;                                         // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1412[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnUpdate) == 0x000008, "Wrong alignment on LTweener_OnUpdate");
static_assert(sizeof(LTweener_OnUpdate) == 0x000020, "Wrong size on LTweener_OnUpdate");
static_assert(offsetof(LTweener_OnUpdate, NewUpdate) == 0x000000, "Member 'LTweener_OnUpdate::NewUpdate' has a wrong offset!");
static_assert(offsetof(LTweener_OnUpdate, ReturnValue) == 0x000018, "Member 'LTweener_OnUpdate::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetCurveFloat
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetCurveFloat final
{
public:
	class UCurveFloat*                            NewCurveFloat;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetCurveFloat) == 0x000008, "Wrong alignment on LTweener_SetCurveFloat");
static_assert(sizeof(LTweener_SetCurveFloat) == 0x000010, "Wrong size on LTweener_SetCurveFloat");
static_assert(offsetof(LTweener_SetCurveFloat, NewCurveFloat) == 0x000000, "Member 'LTweener_SetCurveFloat::NewCurveFloat' has a wrong offset!");
static_assert(offsetof(LTweener_SetCurveFloat, ReturnValue) == 0x000008, "Member 'LTweener_SetCurveFloat::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetDelay
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetDelay final
{
public:
	float                                         NewDelay;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1413[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetDelay) == 0x000008, "Wrong alignment on LTweener_SetDelay");
static_assert(sizeof(LTweener_SetDelay) == 0x000010, "Wrong size on LTweener_SetDelay");
static_assert(offsetof(LTweener_SetDelay, NewDelay) == 0x000000, "Member 'LTweener_SetDelay::NewDelay' has a wrong offset!");
static_assert(offsetof(LTweener_SetDelay, ReturnValue) == 0x000008, "Member 'LTweener_SetDelay::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetEase
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetEase final
{
public:
	ELTweenEase                                   Easetype;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1414[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetEase) == 0x000008, "Wrong alignment on LTweener_SetEase");
static_assert(sizeof(LTweener_SetEase) == 0x000010, "Wrong size on LTweener_SetEase");
static_assert(offsetof(LTweener_SetEase, Easetype) == 0x000000, "Member 'LTweener_SetEase::Easetype' has a wrong offset!");
static_assert(offsetof(LTweener_SetEase, ReturnValue) == 0x000008, "Member 'LTweener_SetEase::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetEaseCurve
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetEaseCurve final
{
public:
	class UCurveFloat*                            NewCurve;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetEaseCurve) == 0x000008, "Wrong alignment on LTweener_SetEaseCurve");
static_assert(sizeof(LTweener_SetEaseCurve) == 0x000010, "Wrong size on LTweener_SetEaseCurve");
static_assert(offsetof(LTweener_SetEaseCurve, NewCurve) == 0x000000, "Member 'LTweener_SetEaseCurve::NewCurve' has a wrong offset!");
static_assert(offsetof(LTweener_SetEaseCurve, ReturnValue) == 0x000008, "Member 'LTweener_SetEaseCurve::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetLoop
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetLoop final
{
public:
	ELTweenLoop                                   NewLoopType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1415[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewLoopCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetLoop) == 0x000008, "Wrong alignment on LTweener_SetLoop");
static_assert(sizeof(LTweener_SetLoop) == 0x000010, "Wrong size on LTweener_SetLoop");
static_assert(offsetof(LTweener_SetLoop, NewLoopType) == 0x000000, "Member 'LTweener_SetLoop::NewLoopType' has a wrong offset!");
static_assert(offsetof(LTweener_SetLoop, NewLoopCount) == 0x000004, "Member 'LTweener_SetLoop::NewLoopCount' has a wrong offset!");
static_assert(offsetof(LTweener_SetLoop, ReturnValue) == 0x000008, "Member 'LTweener_SetLoop::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetLoopType
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetLoopType final
{
public:
	ELTweenLoop                                   NewLoopType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1416[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetLoopType) == 0x000008, "Wrong alignment on LTweener_SetLoopType");
static_assert(sizeof(LTweener_SetLoopType) == 0x000010, "Wrong size on LTweener_SetLoopType");
static_assert(offsetof(LTweener_SetLoopType, NewLoopType) == 0x000000, "Member 'LTweener_SetLoopType::NewLoopType' has a wrong offset!");
static_assert(offsetof(LTweener_SetLoopType, ReturnValue) == 0x000008, "Member 'LTweener_SetLoopType::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetLoopCycleCount
// 0x0004 (0x0004 - 0x0000)
struct LTweener_GetLoopCycleCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetLoopCycleCount) == 0x000004, "Wrong alignment on LTweener_GetLoopCycleCount");
static_assert(sizeof(LTweener_GetLoopCycleCount) == 0x000004, "Wrong size on LTweener_GetLoopCycleCount");
static_assert(offsetof(LTweener_GetLoopCycleCount, ReturnValue) == 0x000000, "Member 'LTweener_GetLoopCycleCount::ReturnValue' has a wrong offset!");

}

