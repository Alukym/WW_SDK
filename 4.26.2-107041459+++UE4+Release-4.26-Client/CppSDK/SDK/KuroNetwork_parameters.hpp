#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroNetwork

#include "Basic.hpp"

#include "KuroNetwork_structs.hpp"
#include "JsEnv_structs.hpp"


namespace SDK::Params
{

// Function KuroNetwork.KuroHttp.CompressAndPostDataAsync
// 0x0090 (0x0090 - 0x0000)
struct KuroHttp_CompressAndPostDataAsync final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            HeaderParam;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ECompressMethod                               CompressMethod;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FA[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArrayBuffer                           Buffer;                                            // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool Successed)>               PostHandle;                                        // 0x0078(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTimeout;                                         // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttp_CompressAndPostDataAsync) == 0x000008, "Wrong alignment on KuroHttp_CompressAndPostDataAsync");
static_assert(sizeof(KuroHttp_CompressAndPostDataAsync) == 0x000090, "Wrong size on KuroHttp_CompressAndPostDataAsync");
static_assert(offsetof(KuroHttp_CompressAndPostDataAsync, URL) == 0x000000, "Member 'KuroHttp_CompressAndPostDataAsync::URL' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressAndPostDataAsync, HeaderParam) == 0x000010, "Member 'KuroHttp_CompressAndPostDataAsync::HeaderParam' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressAndPostDataAsync, CompressMethod) == 0x000060, "Member 'KuroHttp_CompressAndPostDataAsync::CompressMethod' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressAndPostDataAsync, Buffer) == 0x000068, "Member 'KuroHttp_CompressAndPostDataAsync::Buffer' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressAndPostDataAsync, PostHandle) == 0x000078, "Member 'KuroHttp_CompressAndPostDataAsync::PostHandle' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressAndPostDataAsync, InTimeout) == 0x00008C, "Member 'KuroHttp_CompressAndPostDataAsync::InTimeout' has a wrong offset!");

// Function KuroNetwork.KuroHttp.CompressDataAsync
// 0x0028 (0x0028 - 0x0000)
struct KuroHttp_CompressDataAsync final
{
public:
	struct FArrayBuffer                           InBuffer;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECompressMethod                               CompressMethod;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FB[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<uint8>& Data, int32 SizeNeededForDecompress)> OnCompressed;                                      // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttp_CompressDataAsync) == 0x000008, "Wrong alignment on KuroHttp_CompressDataAsync");
static_assert(sizeof(KuroHttp_CompressDataAsync) == 0x000028, "Wrong size on KuroHttp_CompressDataAsync");
static_assert(offsetof(KuroHttp_CompressDataAsync, InBuffer) == 0x000000, "Member 'KuroHttp_CompressDataAsync::InBuffer' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressDataAsync, CompressMethod) == 0x000010, "Member 'KuroHttp_CompressDataAsync::CompressMethod' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressDataAsync, OnCompressed) == 0x000014, "Member 'KuroHttp_CompressDataAsync::OnCompressed' has a wrong offset!");

// Function KuroNetwork.KuroHttp.CompressStringAsync
// 0x0028 (0x0028 - 0x0000)
struct KuroHttp_CompressStringAsync final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECompressMethod                               CompressMethod;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FC[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<uint8>& Data, int32 SizeNeededForDecompress)> OnCompressed;                                      // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttp_CompressStringAsync) == 0x000008, "Wrong alignment on KuroHttp_CompressStringAsync");
static_assert(sizeof(KuroHttp_CompressStringAsync) == 0x000028, "Wrong size on KuroHttp_CompressStringAsync");
static_assert(offsetof(KuroHttp_CompressStringAsync, InString) == 0x000000, "Member 'KuroHttp_CompressStringAsync::InString' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressStringAsync, CompressMethod) == 0x000010, "Member 'KuroHttp_CompressStringAsync::CompressMethod' has a wrong offset!");
static_assert(offsetof(KuroHttp_CompressStringAsync, OnCompressed) == 0x000014, "Member 'KuroHttp_CompressStringAsync::OnCompressed' has a wrong offset!");

// Function KuroNetwork.KuroHttp.Get
// 0x0078 (0x0078 - 0x0000)
struct KuroHttp_Get final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            HeaderParam;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success, int32 Code, const class FString& Data)> Handle;                                            // 0x0060(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTimeout;                                         // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttp_Get) == 0x000008, "Wrong alignment on KuroHttp_Get");
static_assert(sizeof(KuroHttp_Get) == 0x000078, "Wrong size on KuroHttp_Get");
static_assert(offsetof(KuroHttp_Get, URL) == 0x000000, "Member 'KuroHttp_Get::URL' has a wrong offset!");
static_assert(offsetof(KuroHttp_Get, HeaderParam) == 0x000010, "Member 'KuroHttp_Get::HeaderParam' has a wrong offset!");
static_assert(offsetof(KuroHttp_Get, Handle) == 0x000060, "Member 'KuroHttp_Get::Handle' has a wrong offset!");
static_assert(offsetof(KuroHttp_Get, InTimeout) == 0x000074, "Member 'KuroHttp_Get::InTimeout' has a wrong offset!");

// Function KuroNetwork.KuroHttp.GetDefaultHeader
// 0x0050 (0x0050 - 0x0000)
struct KuroHttp_GetDefaultHeader final
{
public:
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttp_GetDefaultHeader) == 0x000008, "Wrong alignment on KuroHttp_GetDefaultHeader");
static_assert(sizeof(KuroHttp_GetDefaultHeader) == 0x000050, "Wrong size on KuroHttp_GetDefaultHeader");
static_assert(offsetof(KuroHttp_GetDefaultHeader, ReturnValue) == 0x000000, "Member 'KuroHttp_GetDefaultHeader::ReturnValue' has a wrong offset!");

// Function KuroNetwork.KuroHttp.Post
// 0x0088 (0x0088 - 0x0000)
struct KuroHttp_Post final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            HeaderParam;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success, int32 Code, const class FString& Data)> Handle;                                            // 0x0070(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTimeout;                                         // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttp_Post) == 0x000008, "Wrong alignment on KuroHttp_Post");
static_assert(sizeof(KuroHttp_Post) == 0x000088, "Wrong size on KuroHttp_Post");
static_assert(offsetof(KuroHttp_Post, URL) == 0x000000, "Member 'KuroHttp_Post::URL' has a wrong offset!");
static_assert(offsetof(KuroHttp_Post, HeaderParam) == 0x000010, "Member 'KuroHttp_Post::HeaderParam' has a wrong offset!");
static_assert(offsetof(KuroHttp_Post, Content) == 0x000060, "Member 'KuroHttp_Post::Content' has a wrong offset!");
static_assert(offsetof(KuroHttp_Post, Handle) == 0x000070, "Member 'KuroHttp_Post::Handle' has a wrong offset!");
static_assert(offsetof(KuroHttp_Post, InTimeout) == 0x000084, "Member 'KuroHttp_Post::InTimeout' has a wrong offset!");

// Function KuroNetwork.KuroHttp.PostWithData
// 0x0088 (0x0088 - 0x0000)
struct KuroHttp_PostWithData final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            HeaderParam;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Content;                                           // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success, int32 Code, const class FString& Data)> Handle;                                            // 0x0070(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTimeout;                                         // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttp_PostWithData) == 0x000008, "Wrong alignment on KuroHttp_PostWithData");
static_assert(sizeof(KuroHttp_PostWithData) == 0x000088, "Wrong size on KuroHttp_PostWithData");
static_assert(offsetof(KuroHttp_PostWithData, URL) == 0x000000, "Member 'KuroHttp_PostWithData::URL' has a wrong offset!");
static_assert(offsetof(KuroHttp_PostWithData, HeaderParam) == 0x000010, "Member 'KuroHttp_PostWithData::HeaderParam' has a wrong offset!");
static_assert(offsetof(KuroHttp_PostWithData, Content) == 0x000060, "Member 'KuroHttp_PostWithData::Content' has a wrong offset!");
static_assert(offsetof(KuroHttp_PostWithData, Handle) == 0x000070, "Member 'KuroHttp_PostWithData::Handle' has a wrong offset!");
static_assert(offsetof(KuroHttp_PostWithData, InTimeout) == 0x000084, "Member 'KuroHttp_PostWithData::InTimeout' has a wrong offset!");

// Function KuroNetwork.KuroHttp.PostWithFile
// 0x0088 (0x0088 - 0x0000)
struct KuroHttp_PostWithFile final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            HeaderParam;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success, int32 Code, const class FString& Data)> Handle;                                            // 0x0070(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTimeout;                                         // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttp_PostWithFile) == 0x000008, "Wrong alignment on KuroHttp_PostWithFile");
static_assert(sizeof(KuroHttp_PostWithFile) == 0x000088, "Wrong size on KuroHttp_PostWithFile");
static_assert(offsetof(KuroHttp_PostWithFile, URL) == 0x000000, "Member 'KuroHttp_PostWithFile::URL' has a wrong offset!");
static_assert(offsetof(KuroHttp_PostWithFile, HeaderParam) == 0x000010, "Member 'KuroHttp_PostWithFile::HeaderParam' has a wrong offset!");
static_assert(offsetof(KuroHttp_PostWithFile, FilePath) == 0x000060, "Member 'KuroHttp_PostWithFile::FilePath' has a wrong offset!");
static_assert(offsetof(KuroHttp_PostWithFile, Handle) == 0x000070, "Member 'KuroHttp_PostWithFile::Handle' has a wrong offset!");
static_assert(offsetof(KuroHttp_PostWithFile, InTimeout) == 0x000084, "Member 'KuroHttp_PostWithFile::InTimeout' has a wrong offset!");

// Function KuroNetwork.KuroHttp.UnCompressDataToStringAsync
// 0x0030 (0x0030 - 0x0000)
struct KuroHttp_UnCompressDataToStringAsync final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ECompressMethod                               CompressMethod;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FD[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PresumedUnCompressedSize;                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& String)>  OnDecompressed;                                    // 0x0018(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FE[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroHttp_UnCompressDataToStringAsync) == 0x000008, "Wrong alignment on KuroHttp_UnCompressDataToStringAsync");
static_assert(sizeof(KuroHttp_UnCompressDataToStringAsync) == 0x000030, "Wrong size on KuroHttp_UnCompressDataToStringAsync");
static_assert(offsetof(KuroHttp_UnCompressDataToStringAsync, Data) == 0x000000, "Member 'KuroHttp_UnCompressDataToStringAsync::Data' has a wrong offset!");
static_assert(offsetof(KuroHttp_UnCompressDataToStringAsync, CompressMethod) == 0x000010, "Member 'KuroHttp_UnCompressDataToStringAsync::CompressMethod' has a wrong offset!");
static_assert(offsetof(KuroHttp_UnCompressDataToStringAsync, PresumedUnCompressedSize) == 0x000014, "Member 'KuroHttp_UnCompressDataToStringAsync::PresumedUnCompressedSize' has a wrong offset!");
static_assert(offsetof(KuroHttp_UnCompressDataToStringAsync, OnDecompressed) == 0x000018, "Member 'KuroHttp_UnCompressDataToStringAsync::OnDecompressed' has a wrong offset!");

// Function KuroNetwork.KuroHttpServerRequestProxy.GetHeader
// 0x0028 (0x0028 - 0x0000)
struct KuroHttpServerRequestProxy_GetHeader final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutHeader;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1800[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroHttpServerRequestProxy_GetHeader) == 0x000008, "Wrong alignment on KuroHttpServerRequestProxy_GetHeader");
static_assert(sizeof(KuroHttpServerRequestProxy_GetHeader) == 0x000028, "Wrong size on KuroHttpServerRequestProxy_GetHeader");
static_assert(offsetof(KuroHttpServerRequestProxy_GetHeader, Key) == 0x000000, "Member 'KuroHttpServerRequestProxy_GetHeader::Key' has a wrong offset!");
static_assert(offsetof(KuroHttpServerRequestProxy_GetHeader, OutHeader) == 0x000010, "Member 'KuroHttpServerRequestProxy_GetHeader::OutHeader' has a wrong offset!");
static_assert(offsetof(KuroHttpServerRequestProxy_GetHeader, ReturnValue) == 0x000020, "Member 'KuroHttpServerRequestProxy_GetHeader::ReturnValue' has a wrong offset!");

// Function KuroNetwork.KuroHttpServerRequestProxy.GetRequest
// 0x0010 (0x0010 - 0x0000)
struct KuroHttpServerRequestProxy_GetRequest final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttpServerRequestProxy_GetRequest) == 0x000008, "Wrong alignment on KuroHttpServerRequestProxy_GetRequest");
static_assert(sizeof(KuroHttpServerRequestProxy_GetRequest) == 0x000010, "Wrong size on KuroHttpServerRequestProxy_GetRequest");
static_assert(offsetof(KuroHttpServerRequestProxy_GetRequest, ReturnValue) == 0x000000, "Member 'KuroHttpServerRequestProxy_GetRequest::ReturnValue' has a wrong offset!");

// Function KuroNetwork.KuroHttpServerRequestProxy.Response
// 0x0018 (0x0018 - 0x0000)
struct KuroHttpServerRequestProxy_Response final
{
public:
	class FString                                 Json;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1801[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroHttpServerRequestProxy_Response) == 0x000008, "Wrong alignment on KuroHttpServerRequestProxy_Response");
static_assert(sizeof(KuroHttpServerRequestProxy_Response) == 0x000018, "Wrong size on KuroHttpServerRequestProxy_Response");
static_assert(offsetof(KuroHttpServerRequestProxy_Response, Json) == 0x000000, "Member 'KuroHttpServerRequestProxy_Response::Json' has a wrong offset!");
static_assert(offsetof(KuroHttpServerRequestProxy_Response, bSuccess) == 0x000010, "Member 'KuroHttpServerRequestProxy_Response::bSuccess' has a wrong offset!");

// Function KuroNetwork.KuroHttpServerRouterProxy.BindRoute
// 0x0010 (0x0010 - 0x0000)
struct KuroHttpServerRouterProxy_BindRoute final
{
public:
	class FString                                 ModuleName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttpServerRouterProxy_BindRoute) == 0x000008, "Wrong alignment on KuroHttpServerRouterProxy_BindRoute");
static_assert(sizeof(KuroHttpServerRouterProxy_BindRoute) == 0x000010, "Wrong size on KuroHttpServerRouterProxy_BindRoute");
static_assert(offsetof(KuroHttpServerRouterProxy_BindRoute, ModuleName) == 0x000000, "Member 'KuroHttpServerRouterProxy_BindRoute::ModuleName' has a wrong offset!");

// Function KuroNetwork.KuroHttpServerRouterProxy.CreateRouter
// 0x0004 (0x0004 - 0x0000)
struct KuroHttpServerRouterProxy_CreateRouter final
{
public:
	int32                                         Port;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroHttpServerRouterProxy_CreateRouter) == 0x000004, "Wrong alignment on KuroHttpServerRouterProxy_CreateRouter");
static_assert(sizeof(KuroHttpServerRouterProxy_CreateRouter) == 0x000004, "Wrong size on KuroHttpServerRouterProxy_CreateRouter");
static_assert(offsetof(KuroHttpServerRouterProxy_CreateRouter, Port) == 0x000000, "Member 'KuroHttpServerRouterProxy_CreateRouter::Port' has a wrong offset!");

// Function KuroNetwork.KuroKcpClient.SetEnType
// 0x0004 (0x0004 - 0x0000)
struct KuroKcpClient_SetEnType final
{
public:
	uint8                                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1805[0x1];                                     // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         MsgId;                                             // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroKcpClient_SetEnType) == 0x000002, "Wrong alignment on KuroKcpClient_SetEnType");
static_assert(sizeof(KuroKcpClient_SetEnType) == 0x000004, "Wrong size on KuroKcpClient_SetEnType");
static_assert(offsetof(KuroKcpClient_SetEnType, Type) == 0x000000, "Member 'KuroKcpClient_SetEnType::Type' has a wrong offset!");
static_assert(offsetof(KuroKcpClient_SetEnType, MsgId) == 0x000002, "Member 'KuroKcpClient_SetEnType::MsgId' has a wrong offset!");

// Function KuroNetwork.KuroKcpClient.SetK
// 0x0020 (0x0020 - 0x0000)
struct KuroKcpClient_SetK final
{
public:
	uint8                                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1806[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArrayBuffer                           KeyBuffer;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1807[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroKcpClient_SetK) == 0x000008, "Wrong alignment on KuroKcpClient_SetK");
static_assert(sizeof(KuroKcpClient_SetK) == 0x000020, "Wrong size on KuroKcpClient_SetK");
static_assert(offsetof(KuroKcpClient_SetK, Type) == 0x000000, "Member 'KuroKcpClient_SetK::Type' has a wrong offset!");
static_assert(offsetof(KuroKcpClient_SetK, KeyBuffer) == 0x000008, "Member 'KuroKcpClient_SetK::KeyBuffer' has a wrong offset!");
static_assert(offsetof(KuroKcpClient_SetK, ReturnValue) == 0x000018, "Member 'KuroKcpClient_SetK::ReturnValue' has a wrong offset!");

// Function KuroNetwork.KuroKcpClient.SetKcpMtu
// 0x0004 (0x0004 - 0x0000)
struct KuroKcpClient_SetKcpMtu final
{
public:
	int32                                         Mtu;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroKcpClient_SetKcpMtu) == 0x000004, "Wrong alignment on KuroKcpClient_SetKcpMtu");
static_assert(sizeof(KuroKcpClient_SetKcpMtu) == 0x000004, "Wrong size on KuroKcpClient_SetKcpMtu");
static_assert(offsetof(KuroKcpClient_SetKcpMtu, Mtu) == 0x000000, "Member 'KuroKcpClient_SetKcpMtu::Mtu' has a wrong offset!");

// Function KuroNetwork.KuroKcpClient.SetKcpNoDelay
// 0x0010 (0x0010 - 0x0000)
struct KuroKcpClient_SetKcpNoDelay final
{
public:
	int32                                         NoDelay;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interval;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Resend;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nc;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroKcpClient_SetKcpNoDelay) == 0x000004, "Wrong alignment on KuroKcpClient_SetKcpNoDelay");
static_assert(sizeof(KuroKcpClient_SetKcpNoDelay) == 0x000010, "Wrong size on KuroKcpClient_SetKcpNoDelay");
static_assert(offsetof(KuroKcpClient_SetKcpNoDelay, NoDelay) == 0x000000, "Member 'KuroKcpClient_SetKcpNoDelay::NoDelay' has a wrong offset!");
static_assert(offsetof(KuroKcpClient_SetKcpNoDelay, Interval) == 0x000004, "Member 'KuroKcpClient_SetKcpNoDelay::Interval' has a wrong offset!");
static_assert(offsetof(KuroKcpClient_SetKcpNoDelay, Resend) == 0x000008, "Member 'KuroKcpClient_SetKcpNoDelay::Resend' has a wrong offset!");
static_assert(offsetof(KuroKcpClient_SetKcpNoDelay, Nc) == 0x00000C, "Member 'KuroKcpClient_SetKcpNoDelay::Nc' has a wrong offset!");

// Function KuroNetwork.KuroKcpClient.SetKcpSegmentSize
// 0x0004 (0x0004 - 0x0000)
struct KuroKcpClient_SetKcpSegmentSize final
{
public:
	int32                                         SegmentSize;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroKcpClient_SetKcpSegmentSize) == 0x000004, "Wrong alignment on KuroKcpClient_SetKcpSegmentSize");
static_assert(sizeof(KuroKcpClient_SetKcpSegmentSize) == 0x000004, "Wrong size on KuroKcpClient_SetKcpSegmentSize");
static_assert(offsetof(KuroKcpClient_SetKcpSegmentSize, SegmentSize) == 0x000000, "Member 'KuroKcpClient_SetKcpSegmentSize::SegmentSize' has a wrong offset!");

// Function KuroNetwork.KuroKcpClient.SetKcpStream
// 0x0001 (0x0001 - 0x0000)
struct KuroKcpClient_SetKcpStream final
{
public:
	bool                                          bStream;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroKcpClient_SetKcpStream) == 0x000001, "Wrong alignment on KuroKcpClient_SetKcpStream");
static_assert(sizeof(KuroKcpClient_SetKcpStream) == 0x000001, "Wrong size on KuroKcpClient_SetKcpStream");
static_assert(offsetof(KuroKcpClient_SetKcpStream, bStream) == 0x000000, "Member 'KuroKcpClient_SetKcpStream::bStream' has a wrong offset!");

// Function KuroNetwork.KuroKcpClient.SetKcpWndSize
// 0x0008 (0x0008 - 0x0000)
struct KuroKcpClient_SetKcpWndSize final
{
public:
	int32                                         SndWnd;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RcvWnd;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroKcpClient_SetKcpWndSize) == 0x000004, "Wrong alignment on KuroKcpClient_SetKcpWndSize");
static_assert(sizeof(KuroKcpClient_SetKcpWndSize) == 0x000008, "Wrong size on KuroKcpClient_SetKcpWndSize");
static_assert(offsetof(KuroKcpClient_SetKcpWndSize, SndWnd) == 0x000000, "Member 'KuroKcpClient_SetKcpWndSize::SndWnd' has a wrong offset!");
static_assert(offsetof(KuroKcpClient_SetKcpWndSize, RcvWnd) == 0x000004, "Member 'KuroKcpClient_SetKcpWndSize::RcvWnd' has a wrong offset!");

// Function KuroNetwork.KuroKcpClient.TickOutside
// 0x0004 (0x0004 - 0x0000)
struct KuroKcpClient_TickOutside final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroKcpClient_TickOutside) == 0x000004, "Wrong alignment on KuroKcpClient_TickOutside");
static_assert(sizeof(KuroKcpClient_TickOutside) == 0x000004, "Wrong size on KuroKcpClient_TickOutside");
static_assert(offsetof(KuroKcpClient_TickOutside, DeltaSeconds) == 0x000000, "Member 'KuroKcpClient_TickOutside::DeltaSeconds' has a wrong offset!");

// Function KuroNetwork.KuroNetworkChange.GetNetworkType
// 0x0001 (0x0001 - 0x0000)
struct KuroNetworkChange_GetNetworkType final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroNetworkChange_GetNetworkType) == 0x000001, "Wrong alignment on KuroNetworkChange_GetNetworkType");
static_assert(sizeof(KuroNetworkChange_GetNetworkType) == 0x000001, "Wrong size on KuroNetworkChange_GetNetworkType");
static_assert(offsetof(KuroNetworkChange_GetNetworkType, ReturnValue) == 0x000000, "Member 'KuroNetworkChange_GetNetworkType::ReturnValue' has a wrong offset!");

// Function KuroNetwork.SendHttpRequest.HttpRequest
// 0x0030 (0x0030 - 0x0000)
struct SendHttpRequest_HttpRequest final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHttpMethod                                   Method;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PostBody;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USendHttpRequest*                       ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendHttpRequest_HttpRequest) == 0x000008, "Wrong alignment on SendHttpRequest_HttpRequest");
static_assert(sizeof(SendHttpRequest_HttpRequest) == 0x000030, "Wrong size on SendHttpRequest_HttpRequest");
static_assert(offsetof(SendHttpRequest_HttpRequest, URL) == 0x000000, "Member 'SendHttpRequest_HttpRequest::URL' has a wrong offset!");
static_assert(offsetof(SendHttpRequest_HttpRequest, Method) == 0x000010, "Member 'SendHttpRequest_HttpRequest::Method' has a wrong offset!");
static_assert(offsetof(SendHttpRequest_HttpRequest, PostBody) == 0x000018, "Member 'SendHttpRequest_HttpRequest::PostBody' has a wrong offset!");
static_assert(offsetof(SendHttpRequest_HttpRequest, ReturnValue) == 0x000028, "Member 'SendHttpRequest_HttpRequest::ReturnValue' has a wrong offset!");

// Function KuroNetwork.SendHttpRequest.HttpRequestEx
// 0x0040 (0x0040 - 0x0000)
struct SendHttpRequest_HttpRequestEx final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHttpMethod                                   Method;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PostBody;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeaderParam;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USendHttpRequest*                       ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendHttpRequest_HttpRequestEx) == 0x000008, "Wrong alignment on SendHttpRequest_HttpRequestEx");
static_assert(sizeof(SendHttpRequest_HttpRequestEx) == 0x000040, "Wrong size on SendHttpRequest_HttpRequestEx");
static_assert(offsetof(SendHttpRequest_HttpRequestEx, URL) == 0x000000, "Member 'SendHttpRequest_HttpRequestEx::URL' has a wrong offset!");
static_assert(offsetof(SendHttpRequest_HttpRequestEx, Method) == 0x000010, "Member 'SendHttpRequest_HttpRequestEx::Method' has a wrong offset!");
static_assert(offsetof(SendHttpRequest_HttpRequestEx, PostBody) == 0x000018, "Member 'SendHttpRequest_HttpRequestEx::PostBody' has a wrong offset!");
static_assert(offsetof(SendHttpRequest_HttpRequestEx, HeaderParam) == 0x000028, "Member 'SendHttpRequest_HttpRequestEx::HeaderParam' has a wrong offset!");
static_assert(offsetof(SendHttpRequest_HttpRequestEx, ReturnValue) == 0x000038, "Member 'SendHttpRequest_HttpRequestEx::ReturnValue' has a wrong offset!");

}

