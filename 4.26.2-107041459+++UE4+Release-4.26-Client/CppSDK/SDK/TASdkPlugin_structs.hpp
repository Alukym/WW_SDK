#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASdkPlugin

#include "Basic.hpp"


namespace SDK
{

// Enum TASdkPlugin.ESaveMode
// NumValues: 0x0004
enum class ESaveMode : uint8
{
	None_Save                                = 0,
	SaveGame                                 = 1,
	Sqlite                                   = 2,
	ESaveMode_MAX                            = 3,
};

// Enum TASdkPlugin.TAMode
// NumValues: 0x0004
enum class ETAMode : uint8
{
	NORMAL                                   = 0,
	DEBUG                                    = 1,
	DEBUG_ONLY                               = 2,
	TAMode_MAX                               = 3,
};

// ScriptStruct TASdkPlugin.SingleEvent
// 0x0010 (0x0010 - 0x0000)
struct FSingleEvent final
{
public:
	TArray<uint8>                                 Utf8StringCode;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSingleEvent) == 0x000008, "Wrong alignment on FSingleEvent");
static_assert(sizeof(FSingleEvent) == 0x000010, "Wrong size on FSingleEvent");
static_assert(offsetof(FSingleEvent, Utf8StringCode) == 0x000000, "Member 'FSingleEvent::Utf8StringCode' has a wrong offset!");

// ScriptStruct TASdkPlugin.CreateInstanceParam
// 0x0078 (0x0078 - 0x0000)
struct FCreateInstanceParam final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C03[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerUrl;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DistinctId;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LogDisplayName;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveDBPath;                                        // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumInBatch;                                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETAMode                                       Mode;                                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESaveMode                                     SaveMode;                                          // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C04[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlushTimeInterval;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseUtf8 : 1;                                      // 0x0074(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLogInitEnable : 1;                                // 0x0074(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bImmediateSave : 1;                                // 0x0074(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRuntimeInstance : 1;                              // 0x0074(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1C05[0x3];                                     // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreateInstanceParam) == 0x000008, "Wrong alignment on FCreateInstanceParam");
static_assert(sizeof(FCreateInstanceParam) == 0x000078, "Wrong size on FCreateInstanceParam");
static_assert(offsetof(FCreateInstanceParam, Index) == 0x000000, "Member 'FCreateInstanceParam::Index' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, ServerUrl) == 0x000008, "Member 'FCreateInstanceParam::ServerUrl' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, AppId) == 0x000018, "Member 'FCreateInstanceParam::AppId' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, DistinctId) == 0x000028, "Member 'FCreateInstanceParam::DistinctId' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, AccountId) == 0x000038, "Member 'FCreateInstanceParam::AccountId' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, LogDisplayName) == 0x000048, "Member 'FCreateInstanceParam::LogDisplayName' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, SaveDBPath) == 0x000058, "Member 'FCreateInstanceParam::SaveDBPath' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, MaxNumInBatch) == 0x000068, "Member 'FCreateInstanceParam::MaxNumInBatch' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, Mode) == 0x00006C, "Member 'FCreateInstanceParam::Mode' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, SaveMode) == 0x00006D, "Member 'FCreateInstanceParam::SaveMode' has a wrong offset!");
static_assert(offsetof(FCreateInstanceParam, FlushTimeInterval) == 0x000070, "Member 'FCreateInstanceParam::FlushTimeInterval' has a wrong offset!");

}

