#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroAudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KuroAudio_structs.hpp"


namespace SDK::Params
{

// Function KuroAudio.KuroAmbientSoundComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct KuroAmbientSoundComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAmbientSoundComponent_IsPlaying) == 0x000001, "Wrong alignment on KuroAmbientSoundComponent_IsPlaying");
static_assert(sizeof(KuroAmbientSoundComponent_IsPlaying) == 0x000001, "Wrong size on KuroAmbientSoundComponent_IsPlaying");
static_assert(offsetof(KuroAmbientSoundComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'KuroAmbientSoundComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function KuroAudio.KuroAmbientSoundComponent.StopSound
// 0x0004 (0x0004 - 0x0000)
struct KuroAmbientSoundComponent_StopSound final
{
public:
	int32                                         FadeDuration;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAmbientSoundComponent_StopSound) == 0x000004, "Wrong alignment on KuroAmbientSoundComponent_StopSound");
static_assert(sizeof(KuroAmbientSoundComponent_StopSound) == 0x000004, "Wrong size on KuroAmbientSoundComponent_StopSound");
static_assert(offsetof(KuroAmbientSoundComponent_StopSound, FadeDuration) == 0x000000, "Member 'KuroAmbientSoundComponent_StopSound::FadeDuration' has a wrong offset!");

// Function KuroAudio.KuroAudioDelegates.SetAudioPauseDelegate
// 0x0014 (0x0014 - 0x0000)
struct KuroAudioDelegates_SetAudioPauseDelegate final
{
public:
	TDelegate<void()>                             InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioDelegates_SetAudioPauseDelegate) == 0x000004, "Wrong alignment on KuroAudioDelegates_SetAudioPauseDelegate");
static_assert(sizeof(KuroAudioDelegates_SetAudioPauseDelegate) == 0x000014, "Wrong size on KuroAudioDelegates_SetAudioPauseDelegate");
static_assert(offsetof(KuroAudioDelegates_SetAudioPauseDelegate, InDelegate) == 0x000000, "Member 'KuroAudioDelegates_SetAudioPauseDelegate::InDelegate' has a wrong offset!");

// Function KuroAudio.KuroAudioDelegates.SetAudioResumeDelegate
// 0x0014 (0x0014 - 0x0000)
struct KuroAudioDelegates_SetAudioResumeDelegate final
{
public:
	TDelegate<void()>                             InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioDelegates_SetAudioResumeDelegate) == 0x000004, "Wrong alignment on KuroAudioDelegates_SetAudioResumeDelegate");
static_assert(sizeof(KuroAudioDelegates_SetAudioResumeDelegate) == 0x000014, "Wrong size on KuroAudioDelegates_SetAudioResumeDelegate");
static_assert(offsetof(KuroAudioDelegates_SetAudioResumeDelegate, InDelegate) == 0x000000, "Member 'KuroAudioDelegates_SetAudioResumeDelegate::InDelegate' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.ExecuteActionOnEvent
// 0x0020 (0x0020 - 0x0000)
struct KuroAudioStatics_ExecuteActionOnEvent final
{
public:
	const class UAkAudioEvent*                    AudioEvent;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioActionType                              ActionType;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Actor;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionDuration;                                // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFadeCurve                               TransitionFadeCurve;                               // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175F[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroAudioStatics_ExecuteActionOnEvent) == 0x000008, "Wrong alignment on KuroAudioStatics_ExecuteActionOnEvent");
static_assert(sizeof(KuroAudioStatics_ExecuteActionOnEvent) == 0x000020, "Wrong size on KuroAudioStatics_ExecuteActionOnEvent");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEvent, AudioEvent) == 0x000000, "Member 'KuroAudioStatics_ExecuteActionOnEvent::AudioEvent' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEvent, ActionType) == 0x000008, "Member 'KuroAudioStatics_ExecuteActionOnEvent::ActionType' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEvent, Actor) == 0x000010, "Member 'KuroAudioStatics_ExecuteActionOnEvent::Actor' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEvent, TransitionDuration) == 0x000018, "Member 'KuroAudioStatics_ExecuteActionOnEvent::TransitionDuration' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEvent, TransitionFadeCurve) == 0x00001C, "Member 'KuroAudioStatics_ExecuteActionOnEvent::TransitionFadeCurve' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.ExecuteActionOnEventName
// 0x0028 (0x0028 - 0x0000)
struct KuroAudioStatics_ExecuteActionOnEventName final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioActionType                              ActionType;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1760[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Actor;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionDuration;                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFadeCurve                               TransitionFadeCurve;                               // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1761[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroAudioStatics_ExecuteActionOnEventName) == 0x000008, "Wrong alignment on KuroAudioStatics_ExecuteActionOnEventName");
static_assert(sizeof(KuroAudioStatics_ExecuteActionOnEventName) == 0x000028, "Wrong size on KuroAudioStatics_ExecuteActionOnEventName");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEventName, EventName) == 0x000000, "Member 'KuroAudioStatics_ExecuteActionOnEventName::EventName' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEventName, ActionType) == 0x000010, "Member 'KuroAudioStatics_ExecuteActionOnEventName::ActionType' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEventName, Actor) == 0x000018, "Member 'KuroAudioStatics_ExecuteActionOnEventName::Actor' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEventName, TransitionDuration) == 0x000020, "Member 'KuroAudioStatics_ExecuteActionOnEventName::TransitionDuration' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnEventName, TransitionFadeCurve) == 0x000024, "Member 'KuroAudioStatics_ExecuteActionOnEventName::TransitionFadeCurve' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.ExecuteActionOnPlayingId
// 0x0010 (0x0010 - 0x0000)
struct KuroAudioStatics_ExecuteActionOnPlayingId final
{
public:
	int32                                         PlayingId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioActionType                              ActionType;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1762[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TransitionDuration;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFadeCurve                               TransitionFadeCurve;                               // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1763[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroAudioStatics_ExecuteActionOnPlayingId) == 0x000004, "Wrong alignment on KuroAudioStatics_ExecuteActionOnPlayingId");
static_assert(sizeof(KuroAudioStatics_ExecuteActionOnPlayingId) == 0x000010, "Wrong size on KuroAudioStatics_ExecuteActionOnPlayingId");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnPlayingId, PlayingId) == 0x000000, "Member 'KuroAudioStatics_ExecuteActionOnPlayingId::PlayingId' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnPlayingId, ActionType) == 0x000004, "Member 'KuroAudioStatics_ExecuteActionOnPlayingId::ActionType' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnPlayingId, TransitionDuration) == 0x000008, "Member 'KuroAudioStatics_ExecuteActionOnPlayingId::TransitionDuration' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_ExecuteActionOnPlayingId, TransitionFadeCurve) == 0x00000C, "Member 'KuroAudioStatics_ExecuteActionOnPlayingId::TransitionFadeCurve' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.GetAkComponent
// 0x0020 (0x0020 - 0x0000)
struct KuroAudioStatics_GetAkComponent final
{
public:
	class USceneComponent*                        Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreated;                                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1764[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioStatics_GetAkComponent) == 0x000008, "Wrong alignment on KuroAudioStatics_GetAkComponent");
static_assert(sizeof(KuroAudioStatics_GetAkComponent) == 0x000020, "Wrong size on KuroAudioStatics_GetAkComponent");
static_assert(offsetof(KuroAudioStatics_GetAkComponent, Parent) == 0x000000, "Member 'KuroAudioStatics_GetAkComponent::Parent' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_GetAkComponent, SocketName) == 0x000008, "Member 'KuroAudioStatics_GetAkComponent::SocketName' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_GetAkComponent, bCreated) == 0x000014, "Member 'KuroAudioStatics_GetAkComponent::bCreated' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_GetAkComponent, ReturnValue) == 0x000018, "Member 'KuroAudioStatics_GetAkComponent::ReturnValue' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.IsAndroidApiUsingOpenSL
// 0x0001 (0x0001 - 0x0000)
struct KuroAudioStatics_IsAndroidApiUsingOpenSL final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioStatics_IsAndroidApiUsingOpenSL) == 0x000001, "Wrong alignment on KuroAudioStatics_IsAndroidApiUsingOpenSL");
static_assert(sizeof(KuroAudioStatics_IsAndroidApiUsingOpenSL) == 0x000001, "Wrong size on KuroAudioStatics_IsAndroidApiUsingOpenSL");
static_assert(offsetof(KuroAudioStatics_IsAndroidApiUsingOpenSL, ReturnValue) == 0x000000, "Member 'KuroAudioStatics_IsAndroidApiUsingOpenSL::ReturnValue' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.IsDolbyAtmosGameSupported
// 0x0001 (0x0001 - 0x0000)
struct KuroAudioStatics_IsDolbyAtmosGameSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioStatics_IsDolbyAtmosGameSupported) == 0x000001, "Wrong alignment on KuroAudioStatics_IsDolbyAtmosGameSupported");
static_assert(sizeof(KuroAudioStatics_IsDolbyAtmosGameSupported) == 0x000001, "Wrong size on KuroAudioStatics_IsDolbyAtmosGameSupported");
static_assert(offsetof(KuroAudioStatics_IsDolbyAtmosGameSupported, ReturnValue) == 0x000000, "Member 'KuroAudioStatics_IsDolbyAtmosGameSupported::ReturnValue' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.PostNotifyEvent
// 0x0010 (0x0010 - 0x0000)
struct KuroAudioStatics_PostNotifyEvent final
{
public:
	const class UAkAudioEvent*                    NotifyEvent;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioStatics_PostNotifyEvent) == 0x000008, "Wrong alignment on KuroAudioStatics_PostNotifyEvent");
static_assert(sizeof(KuroAudioStatics_PostNotifyEvent) == 0x000010, "Wrong size on KuroAudioStatics_PostNotifyEvent");
static_assert(offsetof(KuroAudioStatics_PostNotifyEvent, NotifyEvent) == 0x000000, "Member 'KuroAudioStatics_PostNotifyEvent::NotifyEvent' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_PostNotifyEvent, Actor) == 0x000008, "Member 'KuroAudioStatics_PostNotifyEvent::Actor' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.SetIosAuditPackage
// 0x0001 (0x0001 - 0x0000)
struct KuroAudioStatics_SetIosAuditPackage final
{
public:
	bool                                          IsAuditPackage;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioStatics_SetIosAuditPackage) == 0x000001, "Wrong alignment on KuroAudioStatics_SetIosAuditPackage");
static_assert(sizeof(KuroAudioStatics_SetIosAuditPackage) == 0x000001, "Wrong size on KuroAudioStatics_SetIosAuditPackage");
static_assert(offsetof(KuroAudioStatics_SetIosAuditPackage, IsAuditPackage) == 0x000000, "Member 'KuroAudioStatics_SetIosAuditPackage::IsAuditPackage' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.SetRtpcValue
// 0x0028 (0x0028 - 0x0000)
struct KuroAudioStatics_SetRtpcValue final
{
public:
	class FString                                 RtpcName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1765[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Actor;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionDuration;                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFadeCurve                               TransitionFadeCurve;                               // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1766[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroAudioStatics_SetRtpcValue) == 0x000008, "Wrong alignment on KuroAudioStatics_SetRtpcValue");
static_assert(sizeof(KuroAudioStatics_SetRtpcValue) == 0x000028, "Wrong size on KuroAudioStatics_SetRtpcValue");
static_assert(offsetof(KuroAudioStatics_SetRtpcValue, RtpcName) == 0x000000, "Member 'KuroAudioStatics_SetRtpcValue::RtpcName' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_SetRtpcValue, Value) == 0x000010, "Member 'KuroAudioStatics_SetRtpcValue::Value' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_SetRtpcValue, Actor) == 0x000018, "Member 'KuroAudioStatics_SetRtpcValue::Actor' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_SetRtpcValue, TransitionDuration) == 0x000020, "Member 'KuroAudioStatics_SetRtpcValue::TransitionDuration' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_SetRtpcValue, TransitionFadeCurve) == 0x000024, "Member 'KuroAudioStatics_SetRtpcValue::TransitionFadeCurve' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.SetState
// 0x0020 (0x0020 - 0x0000)
struct KuroAudioStatics_SetState final
{
public:
	class FString                                 StateGroup;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioStatics_SetState) == 0x000008, "Wrong alignment on KuroAudioStatics_SetState");
static_assert(sizeof(KuroAudioStatics_SetState) == 0x000020, "Wrong size on KuroAudioStatics_SetState");
static_assert(offsetof(KuroAudioStatics_SetState, StateGroup) == 0x000000, "Member 'KuroAudioStatics_SetState::StateGroup' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_SetState, State) == 0x000010, "Member 'KuroAudioStatics_SetState::State' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.SetSwitch
// 0x0028 (0x0028 - 0x0000)
struct KuroAudioStatics_SetSwitch final
{
public:
	class FString                                 SwitchGroup;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioStatics_SetSwitch) == 0x000008, "Wrong alignment on KuroAudioStatics_SetSwitch");
static_assert(sizeof(KuroAudioStatics_SetSwitch) == 0x000028, "Wrong size on KuroAudioStatics_SetSwitch");
static_assert(offsetof(KuroAudioStatics_SetSwitch, SwitchGroup) == 0x000000, "Member 'KuroAudioStatics_SetSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_SetSwitch, SwitchState) == 0x000010, "Member 'KuroAudioStatics_SetSwitch::SwitchState' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_SetSwitch, Actor) == 0x000020, "Member 'KuroAudioStatics_SetSwitch::Actor' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.StopAll
// 0x0008 (0x0008 - 0x0000)
struct KuroAudioStatics_StopAll final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroAudioStatics_StopAll) == 0x000008, "Wrong alignment on KuroAudioStatics_StopAll");
static_assert(sizeof(KuroAudioStatics_StopAll) == 0x000008, "Wrong size on KuroAudioStatics_StopAll");
static_assert(offsetof(KuroAudioStatics_StopAll, Actor) == 0x000000, "Member 'KuroAudioStatics_StopAll::Actor' has a wrong offset!");

// Function KuroAudio.KuroAudioStatics.UpdateAudioEnvironment
// 0x0018 (0x0018 - 0x0000)
struct KuroAudioStatics_UpdateAudioEnvironment final
{
public:
	const class UWorld*                           World;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1767[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroAudioStatics_UpdateAudioEnvironment) == 0x000008, "Wrong alignment on KuroAudioStatics_UpdateAudioEnvironment");
static_assert(sizeof(KuroAudioStatics_UpdateAudioEnvironment) == 0x000018, "Wrong size on KuroAudioStatics_UpdateAudioEnvironment");
static_assert(offsetof(KuroAudioStatics_UpdateAudioEnvironment, World) == 0x000000, "Member 'KuroAudioStatics_UpdateAudioEnvironment::World' has a wrong offset!");
static_assert(offsetof(KuroAudioStatics_UpdateAudioEnvironment, Location) == 0x000008, "Member 'KuroAudioStatics_UpdateAudioEnvironment::Location' has a wrong offset!");

}

