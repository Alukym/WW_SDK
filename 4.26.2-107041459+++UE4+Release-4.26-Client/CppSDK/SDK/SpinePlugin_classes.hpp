#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpinePlugin

#include "Basic.hpp"

#include "SpinePlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "ProceduralMeshComponent_classes.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class SpinePlugin.SpineAtlasAsset
// 0x0038 (0x0068 - 0x0030)
class USpineAtlasAsset final : public UObject
{
public:
	TArray<class UTexture2D*>                     AtlasPages;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A5[0x8];                                     // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RawData;                                           // 0x0048(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AtlasFileName;                                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22A6[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAtlasAsset">();
	}
	static class USpineAtlasAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAtlasAsset>();
	}
};
static_assert(alignof(USpineAtlasAsset) == 0x000008, "Wrong alignment on USpineAtlasAsset");
static_assert(sizeof(USpineAtlasAsset) == 0x000068, "Wrong size on USpineAtlasAsset");
static_assert(offsetof(USpineAtlasAsset, AtlasPages) == 0x000030, "Member 'USpineAtlasAsset::AtlasPages' has a wrong offset!");
static_assert(offsetof(USpineAtlasAsset, RawData) == 0x000048, "Member 'USpineAtlasAsset::RawData' has a wrong offset!");
static_assert(offsetof(USpineAtlasAsset, AtlasFileName) == 0x000058, "Member 'USpineAtlasAsset::AtlasFileName' has a wrong offset!");

// Class SpinePlugin.SpineBoneDriverComponent
// 0x0020 (0x0240 - 0x0220)
class USpineBoneDriverComponent final : public USceneComponent
{
public:
	class AActor*                                 Target;                                            // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComponentTransform;                             // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePosition;                                       // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x0233(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A7[0xC];                                     // 0x0234(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeforeUpdateWorldTransform(class USpineSkeletonComponent* Skeleton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneDriverComponent">();
	}
	static class USpineBoneDriverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneDriverComponent>();
	}
};
static_assert(alignof(USpineBoneDriverComponent) == 0x000010, "Wrong alignment on USpineBoneDriverComponent");
static_assert(sizeof(USpineBoneDriverComponent) == 0x000240, "Wrong size on USpineBoneDriverComponent");
static_assert(offsetof(USpineBoneDriverComponent, Target) == 0x000218, "Member 'USpineBoneDriverComponent::Target' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, BoneName) == 0x000220, "Member 'USpineBoneDriverComponent::BoneName' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseComponentTransform) == 0x000230, "Member 'USpineBoneDriverComponent::UseComponentTransform' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UsePosition) == 0x000231, "Member 'USpineBoneDriverComponent::UsePosition' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseRotation) == 0x000232, "Member 'USpineBoneDriverComponent::UseRotation' has a wrong offset!");
static_assert(offsetof(USpineBoneDriverComponent, UseScale) == 0x000233, "Member 'USpineBoneDriverComponent::UseScale' has a wrong offset!");

// Class SpinePlugin.SpineBoneFollowerComponent
// 0x0020 (0x0240 - 0x0220)
class USpineBoneFollowerComponent final : public USceneComponent
{
public:
	class AActor*                                 Target;                                            // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComponentTransform;                             // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePosition;                                       // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x0233(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A8[0xC];                                     // 0x0234(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneFollowerComponent">();
	}
	static class USpineBoneFollowerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneFollowerComponent>();
	}
};
static_assert(alignof(USpineBoneFollowerComponent) == 0x000010, "Wrong alignment on USpineBoneFollowerComponent");
static_assert(sizeof(USpineBoneFollowerComponent) == 0x000240, "Wrong size on USpineBoneFollowerComponent");
static_assert(offsetof(USpineBoneFollowerComponent, Target) == 0x000218, "Member 'USpineBoneFollowerComponent::Target' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, BoneName) == 0x000220, "Member 'USpineBoneFollowerComponent::BoneName' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UseComponentTransform) == 0x000230, "Member 'USpineBoneFollowerComponent::UseComponentTransform' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UsePosition) == 0x000231, "Member 'USpineBoneFollowerComponent::UsePosition' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UseRotation) == 0x000232, "Member 'USpineBoneFollowerComponent::UseRotation' has a wrong offset!");
static_assert(offsetof(USpineBoneFollowerComponent, UseScale) == 0x000233, "Member 'USpineBoneFollowerComponent::UseScale' has a wrong offset!");

// Class SpinePlugin.TrackEntry
// 0x0068 (0x0098 - 0x0030)
class UTrackEntry final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             AnimationStart;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationInterrupt;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationEvent;                                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationComplete;                                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationEnd;                                      // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationDispose;                                  // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A9[0x8];                                     // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAlpha();
	float GetAnimationDuration();
	float GetAnimationEnd();
	float GetAnimationLast();
	class FString GetAnimationName();
	float GetAnimationStart();
	float GetAttachmentThreshold();
	float GetDelay();
	float GetDrawOrderThreshold();
	float GetEventThreshold();
	bool GetLoop();
	float GetMixDuration();
	float GetMixTime();
	float GetTimeScale();
	float GetTrackEnd();
	int32 GetTrackIndex();
	float GetTrackTime();
	bool IsValidAnimation();
	void SetAlpha(float Alpha);
	void SetAnimationEnd(float Param_AnimationEnd);
	void SetAnimationLast(float AnimationLast);
	void SetAnimationStart(float Param_AnimationStart);
	void SetAttachmentThreshold(float AttachmentThreshold);
	void SetDelay(float Delay);
	void SetDrawOrderThreshold(float DrawOrderThreshold);
	void SetEventThreshold(float EventThreshold);
	void SetLoop(bool Loop);
	void SetMixDuration(float MixDuration);
	void SetMixTime(float MixTime);
	void SetTimeScale(float TimeScale);
	void SetTrackEnd(float TrackEnd);
	void SetTrackTime(float TrackTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TrackEntry">();
	}
	static class UTrackEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTrackEntry>();
	}
};
static_assert(alignof(UTrackEntry) == 0x000008, "Wrong alignment on UTrackEntry");
static_assert(sizeof(UTrackEntry) == 0x000098, "Wrong size on UTrackEntry");
static_assert(offsetof(UTrackEntry, AnimationStart) == 0x000030, "Member 'UTrackEntry::AnimationStart' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationInterrupt) == 0x000040, "Member 'UTrackEntry::AnimationInterrupt' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationEvent) == 0x000050, "Member 'UTrackEntry::AnimationEvent' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationComplete) == 0x000060, "Member 'UTrackEntry::AnimationComplete' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationEnd) == 0x000070, "Member 'UTrackEntry::AnimationEnd' has a wrong offset!");
static_assert(offsetof(UTrackEntry, AnimationDispose) == 0x000080, "Member 'UTrackEntry::AnimationDispose' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonComponent
// 0x0058 (0x0118 - 0x00C0)
class USpineSkeletonComponent : public UActorComponent
{
public:
	class USpineAtlasAsset*                       Atlas;                                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                SkeletonData;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BeforeUpdateWorldTransform;                        // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AfterUpdateWorldTransform;                         // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AA[0x28];                                    // 0x00F0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAnimationDuration(const class FString& AnimationName);
	void GetAnimations(TArray<class FString>* Animations);
	void GetBones(TArray<class FString>* Bones);
	struct FTransform GetBoneWorldTransform(const class FString& BoneName);
	float GetScaleX();
	float GetScaleY();
	void GetSkins(TArray<class FString>* Skins);
	void GetSlots(TArray<class FString>* Slots);
	bool HasAnimation(const class FString& AnimationName);
	bool HasBone(const class FString& BoneName);
	bool HasSkin(const class FString& SkinName);
	bool HasSlot(const class FString& SlotName);
	bool SetAttachment(const class FString& SlotName, const class FString& AttachmentName);
	void SetBonesToSetupPose();
	void SetBoneWorldPosition(const class FString& BoneName, const struct FVector& Position);
	void SetScaleX(float ScaleX);
	void SetScaleY(float ScaleY);
	bool SetSkin(const class FString& SkinName);
	bool SetSkins(TArray<class FString>& SkinNames);
	void SetSlotColor(const class FString& SlotName, const struct FColor& Color);
	void SetSlotsToSetupPose();
	void SetToSetupPose();
	void UpdateWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonComponent">();
	}
	static class USpineSkeletonComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonComponent>();
	}
};
static_assert(alignof(USpineSkeletonComponent) == 0x000008, "Wrong alignment on USpineSkeletonComponent");
static_assert(sizeof(USpineSkeletonComponent) == 0x000118, "Wrong size on USpineSkeletonComponent");
static_assert(offsetof(USpineSkeletonComponent, Atlas) == 0x0000C0, "Member 'USpineSkeletonComponent::Atlas' has a wrong offset!");
static_assert(offsetof(USpineSkeletonComponent, SkeletonData) == 0x0000C8, "Member 'USpineSkeletonComponent::SkeletonData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonComponent, BeforeUpdateWorldTransform) == 0x0000D0, "Member 'USpineSkeletonComponent::BeforeUpdateWorldTransform' has a wrong offset!");
static_assert(offsetof(USpineSkeletonComponent, AfterUpdateWorldTransform) == 0x0000E0, "Member 'USpineSkeletonComponent::AfterUpdateWorldTransform' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonAnimationComponent
// 0x0100 (0x0218 - 0x0118)
class USpineSkeletonAnimationComponent final : public USpineSkeletonComponent
{
public:
	FMulticastInlineDelegateProperty_             AnimationStart;                                    // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationInterrupt;                                // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationEvent;                                    // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationComplete;                                 // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationEnd;                                      // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationDispose;                                  // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PreviewAnimation;                                  // 0x0178(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewSkin;                                       // 0x0188(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B5[0x8];                                     // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTrackEntry*>                      TrackEntries;                                      // 0x01A0(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoPlaying;                                      // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22B6[0x27];                                    // 0x01F1(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTrackEntry* AddAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop, float Delay);
	class UTrackEntry* AddEmptyAnimation(int32 TrackIndex, float MixDuration, float Delay);
	void ClearTrack(int32 TrackIndex);
	void ClearTracks();
	class UTrackEntry* GetCurrent(int32 TrackIndex);
	float GetTimeScale();
	class UTrackEntry* SetAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop);
	void SetAutoPlay(bool bInAutoPlays);
	class UTrackEntry* SetEmptyAnimation(int32 TrackIndex, float MixDuration);
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);
	void SetTimeScale(float TimeScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonAnimationComponent">();
	}
	static class USpineSkeletonAnimationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonAnimationComponent>();
	}
};
static_assert(alignof(USpineSkeletonAnimationComponent) == 0x000008, "Wrong alignment on USpineSkeletonAnimationComponent");
static_assert(sizeof(USpineSkeletonAnimationComponent) == 0x000218, "Wrong size on USpineSkeletonAnimationComponent");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationStart) == 0x000118, "Member 'USpineSkeletonAnimationComponent::AnimationStart' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationInterrupt) == 0x000128, "Member 'USpineSkeletonAnimationComponent::AnimationInterrupt' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationEvent) == 0x000138, "Member 'USpineSkeletonAnimationComponent::AnimationEvent' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationComplete) == 0x000148, "Member 'USpineSkeletonAnimationComponent::AnimationComplete' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationEnd) == 0x000158, "Member 'USpineSkeletonAnimationComponent::AnimationEnd' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, AnimationDispose) == 0x000168, "Member 'USpineSkeletonAnimationComponent::AnimationDispose' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, PreviewAnimation) == 0x000178, "Member 'USpineSkeletonAnimationComponent::PreviewAnimation' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, PreviewSkin) == 0x000188, "Member 'USpineSkeletonAnimationComponent::PreviewSkin' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, TrackEntries) == 0x0001A0, "Member 'USpineSkeletonAnimationComponent::TrackEntries' has a wrong offset!");
static_assert(offsetof(USpineSkeletonAnimationComponent, bAutoPlaying) == 0x0001F0, "Member 'USpineSkeletonAnimationComponent::bAutoPlaying' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonDataAsset
// 0x00D8 (0x0108 - 0x0030)
class USpineSkeletonDataAsset final : public UObject
{
public:
	float                                         DefaultMix;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BE[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpineAnimationStateMixData>    MixData;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Bones;                                             // 0x0048(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Slots;                                             // 0x0058(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Skins;                                             // 0x0068(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Animations;                                        // 0x0078(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Events;                                            // 0x0088(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RawData;                                           // 0x0098(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   SkeletonDataFileName;                              // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22BF[0x54];                                    // 0x00B4(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonDataAsset">();
	}
	static class USpineSkeletonDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonDataAsset>();
	}
};
static_assert(alignof(USpineSkeletonDataAsset) == 0x000008, "Wrong alignment on USpineSkeletonDataAsset");
static_assert(sizeof(USpineSkeletonDataAsset) == 0x000108, "Wrong size on USpineSkeletonDataAsset");
static_assert(offsetof(USpineSkeletonDataAsset, DefaultMix) == 0x000030, "Member 'USpineSkeletonDataAsset::DefaultMix' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, MixData) == 0x000038, "Member 'USpineSkeletonDataAsset::MixData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Bones) == 0x000048, "Member 'USpineSkeletonDataAsset::Bones' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Slots) == 0x000058, "Member 'USpineSkeletonDataAsset::Slots' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Skins) == 0x000068, "Member 'USpineSkeletonDataAsset::Skins' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Animations) == 0x000078, "Member 'USpineSkeletonDataAsset::Animations' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, Events) == 0x000088, "Member 'USpineSkeletonDataAsset::Events' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, RawData) == 0x000098, "Member 'USpineSkeletonDataAsset::RawData' has a wrong offset!");
static_assert(offsetof(USpineSkeletonDataAsset, SkeletonDataFileName) == 0x0000A8, "Member 'USpineSkeletonDataAsset::SkeletonDataFileName' has a wrong offset!");

// Class SpinePlugin.SpineSkeletonRendererComponent
// 0x02D0 (0x0840 - 0x0570)
class USpineSkeletonRendererComponent final : public UProceduralMeshComponent
{
public:
	class UMaterialInterface*                     NormalBlendMaterial;                               // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AdditiveBlendMaterial;                             // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MultiplyBlendMaterial;                             // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ScreenBlendMaterial;                               // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       AtlasNormalBlendMaterials;                         // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       AtlasAdditiveBlendMaterials;                       // 0x05A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       AtlasMultiplyBlendMaterials;                       // 0x05B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       AtlasScreenBlendMaterials;                         // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DepthOffset;                                       // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x05D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateCollision;                                  // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C0[0x1F7];                                   // 0x05F1(0x01F7)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x07E8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 Indices;                                           // 0x07F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        Normals;                                           // 0x0808(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector2D>                      Uvs;                                               // 0x0818(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FColor>                         Colors;                                            // 0x0828(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_22C1[0x8];                                     // 0x0838(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonRendererComponent">();
	}
	static class USpineSkeletonRendererComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonRendererComponent>();
	}
};
static_assert(alignof(USpineSkeletonRendererComponent) == 0x000010, "Wrong alignment on USpineSkeletonRendererComponent");
static_assert(sizeof(USpineSkeletonRendererComponent) == 0x000840, "Wrong size on USpineSkeletonRendererComponent");
static_assert(offsetof(USpineSkeletonRendererComponent, NormalBlendMaterial) == 0x000570, "Member 'USpineSkeletonRendererComponent::NormalBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, AdditiveBlendMaterial) == 0x000578, "Member 'USpineSkeletonRendererComponent::AdditiveBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, MultiplyBlendMaterial) == 0x000580, "Member 'USpineSkeletonRendererComponent::MultiplyBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, ScreenBlendMaterial) == 0x000588, "Member 'USpineSkeletonRendererComponent::ScreenBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, AtlasNormalBlendMaterials) == 0x000590, "Member 'USpineSkeletonRendererComponent::AtlasNormalBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, AtlasAdditiveBlendMaterials) == 0x0005A0, "Member 'USpineSkeletonRendererComponent::AtlasAdditiveBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, AtlasMultiplyBlendMaterials) == 0x0005B0, "Member 'USpineSkeletonRendererComponent::AtlasMultiplyBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, AtlasScreenBlendMaterials) == 0x0005C0, "Member 'USpineSkeletonRendererComponent::AtlasScreenBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, DepthOffset) == 0x0005D0, "Member 'USpineSkeletonRendererComponent::DepthOffset' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, TextureParameterName) == 0x0005D4, "Member 'USpineSkeletonRendererComponent::TextureParameterName' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Color) == 0x0005E0, "Member 'USpineSkeletonRendererComponent::Color' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, bCreateCollision) == 0x0005F0, "Member 'USpineSkeletonRendererComponent::bCreateCollision' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Vertices) == 0x0007E8, "Member 'USpineSkeletonRendererComponent::Vertices' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Indices) == 0x0007F8, "Member 'USpineSkeletonRendererComponent::Indices' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Normals) == 0x000808, "Member 'USpineSkeletonRendererComponent::Normals' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Uvs) == 0x000818, "Member 'USpineSkeletonRendererComponent::Uvs' has a wrong offset!");
static_assert(offsetof(USpineSkeletonRendererComponent, Colors) == 0x000828, "Member 'USpineSkeletonRendererComponent::Colors' has a wrong offset!");

// Class SpinePlugin.SpineWidget
// 0x0578 (0x06A0 - 0x0128)
class USpineWidget final : public UWidget
{
public:
	class FString                                 InitialSkin;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineAtlasAsset*                       Atlas;                                             // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                SkeletonData;                                      // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     NormalBlendMaterial;                               // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AdditiveBlendMaterial;                             // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MultiplyBlendMaterial;                             // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ScreenBlendMaterial;                               // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x0168(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOffset;                                       // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0188(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BeforeUpdateWorldTransform;                        // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AfterUpdateWorldTransform;                         // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationStart;                                    // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationInterrupt;                                // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationEvent;                                    // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationComplete;                                 // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationEnd;                                      // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AnimationDispose;                                  // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C2[0x40];                                    // 0x0298(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       AtlasNormalBlendMaterials;                         // 0x02D8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_22C3[0x50];                                    // 0x02E8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       AtlasAdditiveBlendMaterials;                       // 0x0338(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_22C4[0x50];                                    // 0x0348(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       AtlasMultiplyBlendMaterials;                       // 0x0398(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_22C5[0x50];                                    // 0x03A8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       AtlasScreenBlendMaterials;                         // 0x03F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_22C6[0x240];                                   // 0x0408(0x0240)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTrackEntry*>                      TrackEntries;                                      // 0x0648(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoPlaying;                                      // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22C7[0x7];                                     // 0x0699(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTrackEntry* AddAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop, float Delay);
	class UTrackEntry* AddEmptyAnimation(int32 TrackIndex, float MixDuration, float Delay);
	void ClearTrack(int32 TrackIndex);
	void ClearTracks();
	float GetAnimationDuration(const class FString& AnimationName);
	void GetAnimations(TArray<class FString>* Animations);
	void GetBones(TArray<class FString>* Bones);
	struct FTransform GetBoneTransform(const class FString& BoneName);
	class UTrackEntry* GetCurrent(int32 TrackIndex);
	float GetScaleX();
	float GetScaleY();
	void GetSkins(TArray<class FString>* Skins);
	void GetSlots(TArray<class FString>* Slots);
	float GetTimeScale();
	bool HasAnimation(const class FString& AnimationName);
	bool HasBone(const class FString& BoneName);
	bool HasSkin(const class FString& SkinName);
	bool HasSlot(const class FString& SlotName);
	class UTrackEntry* SetAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop);
	bool SetAttachment(const class FString& SlotName, const class FString& AttachmentName);
	void SetAutoPlay(bool bInAutoPlays);
	void SetBonesToSetupPose();
	class UTrackEntry* SetEmptyAnimation(int32 TrackIndex, float MixDuration);
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);
	void SetScaleX(float ScaleX);
	void SetScaleY(float ScaleY);
	bool SetSkin(const class FString& SkinName);
	bool SetSkins(TArray<class FString>& SkinNames);
	void SetSlotsToSetupPose();
	void SetTimeScale(float TimeScale);
	void SetToSetupPose();
	void Tick(float DeltaTime, bool CallDelegates);
	void UpdateWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineWidget">();
	}
	static class USpineWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineWidget>();
	}
};
static_assert(alignof(USpineWidget) == 0x000008, "Wrong alignment on USpineWidget");
static_assert(sizeof(USpineWidget) == 0x0006A0, "Wrong size on USpineWidget");
static_assert(offsetof(USpineWidget, InitialSkin) == 0x000128, "Member 'USpineWidget::InitialSkin' has a wrong offset!");
static_assert(offsetof(USpineWidget, Atlas) == 0x000138, "Member 'USpineWidget::Atlas' has a wrong offset!");
static_assert(offsetof(USpineWidget, SkeletonData) == 0x000140, "Member 'USpineWidget::SkeletonData' has a wrong offset!");
static_assert(offsetof(USpineWidget, NormalBlendMaterial) == 0x000148, "Member 'USpineWidget::NormalBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, AdditiveBlendMaterial) == 0x000150, "Member 'USpineWidget::AdditiveBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, MultiplyBlendMaterial) == 0x000158, "Member 'USpineWidget::MultiplyBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, ScreenBlendMaterial) == 0x000160, "Member 'USpineWidget::ScreenBlendMaterial' has a wrong offset!");
static_assert(offsetof(USpineWidget, TextureParameterName) == 0x000168, "Member 'USpineWidget::TextureParameterName' has a wrong offset!");
static_assert(offsetof(USpineWidget, DepthOffset) == 0x000174, "Member 'USpineWidget::DepthOffset' has a wrong offset!");
static_assert(offsetof(USpineWidget, Color) == 0x000178, "Member 'USpineWidget::Color' has a wrong offset!");
static_assert(offsetof(USpineWidget, Brush) == 0x000188, "Member 'USpineWidget::Brush' has a wrong offset!");
static_assert(offsetof(USpineWidget, BeforeUpdateWorldTransform) == 0x000218, "Member 'USpineWidget::BeforeUpdateWorldTransform' has a wrong offset!");
static_assert(offsetof(USpineWidget, AfterUpdateWorldTransform) == 0x000228, "Member 'USpineWidget::AfterUpdateWorldTransform' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationStart) == 0x000238, "Member 'USpineWidget::AnimationStart' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationInterrupt) == 0x000248, "Member 'USpineWidget::AnimationInterrupt' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationEvent) == 0x000258, "Member 'USpineWidget::AnimationEvent' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationComplete) == 0x000268, "Member 'USpineWidget::AnimationComplete' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationEnd) == 0x000278, "Member 'USpineWidget::AnimationEnd' has a wrong offset!");
static_assert(offsetof(USpineWidget, AnimationDispose) == 0x000288, "Member 'USpineWidget::AnimationDispose' has a wrong offset!");
static_assert(offsetof(USpineWidget, AtlasNormalBlendMaterials) == 0x0002D8, "Member 'USpineWidget::AtlasNormalBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, AtlasAdditiveBlendMaterials) == 0x000338, "Member 'USpineWidget::AtlasAdditiveBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, AtlasMultiplyBlendMaterials) == 0x000398, "Member 'USpineWidget::AtlasMultiplyBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, AtlasScreenBlendMaterials) == 0x0003F8, "Member 'USpineWidget::AtlasScreenBlendMaterials' has a wrong offset!");
static_assert(offsetof(USpineWidget, TrackEntries) == 0x000648, "Member 'USpineWidget::TrackEntries' has a wrong offset!");
static_assert(offsetof(USpineWidget, bAutoPlaying) == 0x000698, "Member 'USpineWidget::bAutoPlaying' has a wrong offset!");

}

