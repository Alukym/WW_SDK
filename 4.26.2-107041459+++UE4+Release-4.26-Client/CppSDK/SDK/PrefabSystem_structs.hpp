#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrefabSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct PrefabSystem.ObjectSerializeData
// 0x000C (0x000C - 0x0000)
struct FObjectSerializeData
{
public:
	int32                                         FileID;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ObjectFlags;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectSerializeData) == 0x000004, "Wrong alignment on FObjectSerializeData");
static_assert(sizeof(FObjectSerializeData) == 0x00000C, "Wrong size on FObjectSerializeData");
static_assert(offsetof(FObjectSerializeData, FileID) == 0x000000, "Member 'FObjectSerializeData::FileID' has a wrong offset!");
static_assert(offsetof(FObjectSerializeData, ObjectFlags) == 0x000004, "Member 'FObjectSerializeData::ObjectFlags' has a wrong offset!");
static_assert(offsetof(FObjectSerializeData, ClassIndex) == 0x000008, "Member 'FObjectSerializeData::ClassIndex' has a wrong offset!");

// ScriptStruct PrefabSystem.ActorSerializeData
// 0x003C (0x0048 - 0x000C)
struct FActorSerializeData final : public FObjectSerializeData
{
public:
	int32                                         ParentActorFileID;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RootComponentFileID;                               // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1427[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ActorPropertyData;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         RootClassIndex;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1428[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 RootComponentPropertyData;                         // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         HierarchyIndex;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0044(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1429[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorSerializeData) == 0x000008, "Wrong alignment on FActorSerializeData");
static_assert(sizeof(FActorSerializeData) == 0x000048, "Wrong size on FActorSerializeData");
static_assert(offsetof(FActorSerializeData, ParentActorFileID) == 0x00000C, "Member 'FActorSerializeData::ParentActorFileID' has a wrong offset!");
static_assert(offsetof(FActorSerializeData, RootComponentFileID) == 0x000010, "Member 'FActorSerializeData::RootComponentFileID' has a wrong offset!");
static_assert(offsetof(FActorSerializeData, ActorPropertyData) == 0x000018, "Member 'FActorSerializeData::ActorPropertyData' has a wrong offset!");
static_assert(offsetof(FActorSerializeData, RootClassIndex) == 0x000028, "Member 'FActorSerializeData::RootClassIndex' has a wrong offset!");
static_assert(offsetof(FActorSerializeData, RootComponentPropertyData) == 0x000030, "Member 'FActorSerializeData::RootComponentPropertyData' has a wrong offset!");
static_assert(offsetof(FActorSerializeData, HierarchyIndex) == 0x000040, "Member 'FActorSerializeData::HierarchyIndex' has a wrong offset!");
static_assert(offsetof(FActorSerializeData, IsActive) == 0x000044, "Member 'FActorSerializeData::IsActive' has a wrong offset!");

// ScriptStruct PrefabSystem.ComponentSerializeData
// 0x002C (0x0038 - 0x000C)
struct FComponentSerializeData final : public FObjectSerializeData
{
public:
	int32                                         OuterFileID;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentComponentFileID;                             // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HierarchyIndex;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0018(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142A[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 PropertyData;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComponentSerializeData) == 0x000008, "Wrong alignment on FComponentSerializeData");
static_assert(sizeof(FComponentSerializeData) == 0x000038, "Wrong size on FComponentSerializeData");
static_assert(offsetof(FComponentSerializeData, OuterFileID) == 0x00000C, "Member 'FComponentSerializeData::OuterFileID' has a wrong offset!");
static_assert(offsetof(FComponentSerializeData, ParentComponentFileID) == 0x000010, "Member 'FComponentSerializeData::ParentComponentFileID' has a wrong offset!");
static_assert(offsetof(FComponentSerializeData, HierarchyIndex) == 0x000014, "Member 'FComponentSerializeData::HierarchyIndex' has a wrong offset!");
static_assert(offsetof(FComponentSerializeData, Name) == 0x000018, "Member 'FComponentSerializeData::Name' has a wrong offset!");
static_assert(offsetof(FComponentSerializeData, PropertyData) == 0x000028, "Member 'FComponentSerializeData::PropertyData' has a wrong offset!");

// ScriptStruct PrefabSystem.NestedPrefabInstanceChain
// 0x0018 (0x0018 - 0x0000)
struct FNestedPrefabInstanceChain final
{
public:
	int32                                         FileID;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FileIDChain;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNestedPrefabInstanceChain) == 0x000008, "Wrong alignment on FNestedPrefabInstanceChain");
static_assert(sizeof(FNestedPrefabInstanceChain) == 0x000018, "Wrong size on FNestedPrefabInstanceChain");
static_assert(offsetof(FNestedPrefabInstanceChain, FileID) == 0x000000, "Member 'FNestedPrefabInstanceChain::FileID' has a wrong offset!");
static_assert(offsetof(FNestedPrefabInstanceChain, FileIDChain) == 0x000008, "Member 'FNestedPrefabInstanceChain::FileIDChain' has a wrong offset!");

// ScriptStruct PrefabSystem.NestedPrefabInstanceData
// 0x0048 (0x0048 - 0x0000)
struct FNestedPrefabInstanceData final
{
public:
	int32                                         PrefabInstanceFileID;                              // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SourcePrefabGuid;                                  // 0x0004(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentFileID;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HierarchyIndex;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142C[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        SourcePrefabPath;                                  // 0x0020(0x0020)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourcePrefabAsset;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNestedPrefabInstanceData) == 0x000008, "Wrong alignment on FNestedPrefabInstanceData");
static_assert(sizeof(FNestedPrefabInstanceData) == 0x000048, "Wrong size on FNestedPrefabInstanceData");
static_assert(offsetof(FNestedPrefabInstanceData, PrefabInstanceFileID) == 0x000000, "Member 'FNestedPrefabInstanceData::PrefabInstanceFileID' has a wrong offset!");
static_assert(offsetof(FNestedPrefabInstanceData, SourcePrefabGuid) == 0x000004, "Member 'FNestedPrefabInstanceData::SourcePrefabGuid' has a wrong offset!");
static_assert(offsetof(FNestedPrefabInstanceData, ParentFileID) == 0x000014, "Member 'FNestedPrefabInstanceData::ParentFileID' has a wrong offset!");
static_assert(offsetof(FNestedPrefabInstanceData, HierarchyIndex) == 0x000018, "Member 'FNestedPrefabInstanceData::HierarchyIndex' has a wrong offset!");
static_assert(offsetof(FNestedPrefabInstanceData, SourcePrefabPath) == 0x000020, "Member 'FNestedPrefabInstanceData::SourcePrefabPath' has a wrong offset!");
static_assert(offsetof(FNestedPrefabInstanceData, SourcePrefabAsset) == 0x000040, "Member 'FNestedPrefabInstanceData::SourcePrefabAsset' has a wrong offset!");

// ScriptStruct PrefabSystem.PropertyModificationData
// 0x0028 (0x0028 - 0x0000)
struct FPropertyModificationData final
{
public:
	int32                                         TargetFileID;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PropertyFNames;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PropertyData;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropertyModificationData) == 0x000008, "Wrong alignment on FPropertyModificationData");
static_assert(sizeof(FPropertyModificationData) == 0x000028, "Wrong size on FPropertyModificationData");
static_assert(offsetof(FPropertyModificationData, TargetFileID) == 0x000000, "Member 'FPropertyModificationData::TargetFileID' has a wrong offset!");
static_assert(offsetof(FPropertyModificationData, PropertyFNames) == 0x000008, "Member 'FPropertyModificationData::PropertyFNames' has a wrong offset!");
static_assert(offsetof(FPropertyModificationData, PropertyData) == 0x000018, "Member 'FPropertyModificationData::PropertyData' has a wrong offset!");

// ScriptStruct PrefabSystem.VirtualObjectSerializeData
// 0x000C (0x000C - 0x0000)
struct FVirtualObjectSerializeData final
{
public:
	int32                                         FileID;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrefabInstanceChainFileID;                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourcePrefabObjectFileID;                          // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualObjectSerializeData) == 0x000004, "Wrong alignment on FVirtualObjectSerializeData");
static_assert(sizeof(FVirtualObjectSerializeData) == 0x00000C, "Wrong size on FVirtualObjectSerializeData");
static_assert(offsetof(FVirtualObjectSerializeData, FileID) == 0x000000, "Member 'FVirtualObjectSerializeData::FileID' has a wrong offset!");
static_assert(offsetof(FVirtualObjectSerializeData, PrefabInstanceChainFileID) == 0x000004, "Member 'FVirtualObjectSerializeData::PrefabInstanceChainFileID' has a wrong offset!");
static_assert(offsetof(FVirtualObjectSerializeData, SourcePrefabObjectFileID) == 0x000008, "Member 'FVirtualObjectSerializeData::SourcePrefabObjectFileID' has a wrong offset!");

}

