#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LGUI

#include "Basic.hpp"

#include "LGUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "LTween_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "KuroDynamicAtlas_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function LGUI.LGUIBehaviour.InstantiateActor
// 0x0018 (0x0018 - 0x0000)
struct LGUIBehaviour_InstantiateActor final
{
public:
	class AActor*                                 OriginObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_InstantiateActor) == 0x000008, "Wrong alignment on LGUIBehaviour_InstantiateActor");
static_assert(sizeof(LGUIBehaviour_InstantiateActor) == 0x000018, "Wrong size on LGUIBehaviour_InstantiateActor");
static_assert(offsetof(LGUIBehaviour_InstantiateActor, OriginObject) == 0x000000, "Member 'LGUIBehaviour_InstantiateActor::OriginObject' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiateActor, Parent) == 0x000008, "Member 'LGUIBehaviour_InstantiateActor::Parent' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiateActor, ReturnValue) == 0x000010, "Member 'LGUIBehaviour_InstantiateActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBehaviour.InstantiatePrefab
// 0x0018 (0x0018 - 0x0000)
struct LGUIBehaviour_InstantiatePrefab final
{
public:
	class ULGUIPrefab*                            OriginObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_InstantiatePrefab) == 0x000008, "Wrong alignment on LGUIBehaviour_InstantiatePrefab");
static_assert(sizeof(LGUIBehaviour_InstantiatePrefab) == 0x000018, "Wrong size on LGUIBehaviour_InstantiatePrefab");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefab, OriginObject) == 0x000000, "Member 'LGUIBehaviour_InstantiatePrefab::OriginObject' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefab, Parent) == 0x000008, "Member 'LGUIBehaviour_InstantiatePrefab::Parent' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefab, ReturnValue) == 0x000010, "Member 'LGUIBehaviour_InstantiatePrefab::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBehaviour.InstantiatePrefabWithTransform
// 0x0040 (0x0040 - 0x0000)
struct LGUIBehaviour_InstantiatePrefabWithTransform final
{
public:
	class ULGUIPrefab*                            OriginObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A2[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_InstantiatePrefabWithTransform) == 0x000008, "Wrong alignment on LGUIBehaviour_InstantiatePrefabWithTransform");
static_assert(sizeof(LGUIBehaviour_InstantiatePrefabWithTransform) == 0x000040, "Wrong size on LGUIBehaviour_InstantiatePrefabWithTransform");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefabWithTransform, OriginObject) == 0x000000, "Member 'LGUIBehaviour_InstantiatePrefabWithTransform::OriginObject' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefabWithTransform, Parent) == 0x000008, "Member 'LGUIBehaviour_InstantiatePrefabWithTransform::Parent' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefabWithTransform, Location) == 0x000010, "Member 'LGUIBehaviour_InstantiatePrefabWithTransform::Location' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefabWithTransform, Rotation) == 0x00001C, "Member 'LGUIBehaviour_InstantiatePrefabWithTransform::Rotation' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefabWithTransform, Scale) == 0x000028, "Member 'LGUIBehaviour_InstantiatePrefabWithTransform::Scale' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_InstantiatePrefabWithTransform, ReturnValue) == 0x000038, "Member 'LGUIBehaviour_InstantiatePrefabWithTransform::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBehaviour.LateUpdateBP
// 0x0004 (0x0004 - 0x0000)
struct LGUIBehaviour_LateUpdateBP final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_LateUpdateBP) == 0x000004, "Wrong alignment on LGUIBehaviour_LateUpdateBP");
static_assert(sizeof(LGUIBehaviour_LateUpdateBP) == 0x000004, "Wrong size on LGUIBehaviour_LateUpdateBP");
static_assert(offsetof(LGUIBehaviour_LateUpdateBP, DeltaTime) == 0x000000, "Member 'LGUIBehaviour_LateUpdateBP::DeltaTime' has a wrong offset!");

// Function LGUI.LGUIBehaviour.OnUIActiveInHierarchyBP
// 0x0001 (0x0001 - 0x0000)
struct LGUIBehaviour_OnUIActiveInHierarchyBP final
{
public:
	bool                                          ActiveOrInactive;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_OnUIActiveInHierarchyBP) == 0x000001, "Wrong alignment on LGUIBehaviour_OnUIActiveInHierarchyBP");
static_assert(sizeof(LGUIBehaviour_OnUIActiveInHierarchyBP) == 0x000001, "Wrong size on LGUIBehaviour_OnUIActiveInHierarchyBP");
static_assert(offsetof(LGUIBehaviour_OnUIActiveInHierarchyBP, ActiveOrInactive) == 0x000000, "Member 'LGUIBehaviour_OnUIActiveInHierarchyBP::ActiveOrInactive' has a wrong offset!");

// Function LGUI.LGUIBehaviour.OnUIChildAcitveInHierarchyBP
// 0x0010 (0x0010 - 0x0000)
struct LGUIBehaviour_OnUIChildAcitveInHierarchyBP final
{
public:
	class UUIItem*                                Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AtiveOrInactive;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBehaviour_OnUIChildAcitveInHierarchyBP) == 0x000008, "Wrong alignment on LGUIBehaviour_OnUIChildAcitveInHierarchyBP");
static_assert(sizeof(LGUIBehaviour_OnUIChildAcitveInHierarchyBP) == 0x000010, "Wrong size on LGUIBehaviour_OnUIChildAcitveInHierarchyBP");
static_assert(offsetof(LGUIBehaviour_OnUIChildAcitveInHierarchyBP, Child) == 0x000000, "Member 'LGUIBehaviour_OnUIChildAcitveInHierarchyBP::Child' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_OnUIChildAcitveInHierarchyBP, AtiveOrInactive) == 0x000008, "Member 'LGUIBehaviour_OnUIChildAcitveInHierarchyBP::AtiveOrInactive' has a wrong offset!");

// Function LGUI.LGUIBehaviour.OnUIChildAttachmentChangedBP
// 0x0010 (0x0010 - 0x0000)
struct LGUIBehaviour_OnUIChildAttachmentChangedBP final
{
public:
	class UUIItem*                                Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachOrDetach;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBehaviour_OnUIChildAttachmentChangedBP) == 0x000008, "Wrong alignment on LGUIBehaviour_OnUIChildAttachmentChangedBP");
static_assert(sizeof(LGUIBehaviour_OnUIChildAttachmentChangedBP) == 0x000010, "Wrong size on LGUIBehaviour_OnUIChildAttachmentChangedBP");
static_assert(offsetof(LGUIBehaviour_OnUIChildAttachmentChangedBP, Child) == 0x000000, "Member 'LGUIBehaviour_OnUIChildAttachmentChangedBP::Child' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_OnUIChildAttachmentChangedBP, AttachOrDetach) == 0x000008, "Member 'LGUIBehaviour_OnUIChildAttachmentChangedBP::AttachOrDetach' has a wrong offset!");

// Function LGUI.LGUIBehaviour.OnUIChildHierarchyIndexChangedBP
// 0x0008 (0x0008 - 0x0000)
struct LGUIBehaviour_OnUIChildHierarchyIndexChangedBP final
{
public:
	class UUIItem*                                Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_OnUIChildHierarchyIndexChangedBP) == 0x000008, "Wrong alignment on LGUIBehaviour_OnUIChildHierarchyIndexChangedBP");
static_assert(sizeof(LGUIBehaviour_OnUIChildHierarchyIndexChangedBP) == 0x000008, "Wrong size on LGUIBehaviour_OnUIChildHierarchyIndexChangedBP");
static_assert(offsetof(LGUIBehaviour_OnUIChildHierarchyIndexChangedBP, Child) == 0x000000, "Member 'LGUIBehaviour_OnUIChildHierarchyIndexChangedBP::Child' has a wrong offset!");

// Function LGUI.LGUIBehaviour.OnUIDimensionsChangedBP
// 0x0002 (0x0002 - 0x0000)
struct LGUIBehaviour_OnUIDimensionsChangedBP final
{
public:
	bool                                          PositionChanged;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SizeChanged;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_OnUIDimensionsChangedBP) == 0x000001, "Wrong alignment on LGUIBehaviour_OnUIDimensionsChangedBP");
static_assert(sizeof(LGUIBehaviour_OnUIDimensionsChangedBP) == 0x000002, "Wrong size on LGUIBehaviour_OnUIDimensionsChangedBP");
static_assert(offsetof(LGUIBehaviour_OnUIDimensionsChangedBP, PositionChanged) == 0x000000, "Member 'LGUIBehaviour_OnUIDimensionsChangedBP::PositionChanged' has a wrong offset!");
static_assert(offsetof(LGUIBehaviour_OnUIDimensionsChangedBP, SizeChanged) == 0x000001, "Member 'LGUIBehaviour_OnUIDimensionsChangedBP::SizeChanged' has a wrong offset!");

// Function LGUI.LGUIBehaviour.OnUIInteractionStateChangedBP
// 0x0001 (0x0001 - 0x0000)
struct LGUIBehaviour_OnUIInteractionStateChangedBP final
{
public:
	bool                                          InteractableOrNot;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_OnUIInteractionStateChangedBP) == 0x000001, "Wrong alignment on LGUIBehaviour_OnUIInteractionStateChangedBP");
static_assert(sizeof(LGUIBehaviour_OnUIInteractionStateChangedBP) == 0x000001, "Wrong size on LGUIBehaviour_OnUIInteractionStateChangedBP");
static_assert(offsetof(LGUIBehaviour_OnUIInteractionStateChangedBP, InteractableOrNot) == 0x000000, "Member 'LGUIBehaviour_OnUIInteractionStateChangedBP::InteractableOrNot' has a wrong offset!");

// Function LGUI.LGUIBehaviour.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct LGUIBehaviour_SetEnable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_SetEnable) == 0x000001, "Wrong alignment on LGUIBehaviour_SetEnable");
static_assert(sizeof(LGUIBehaviour_SetEnable) == 0x000001, "Wrong size on LGUIBehaviour_SetEnable");
static_assert(offsetof(LGUIBehaviour_SetEnable, Value) == 0x000000, "Member 'LGUIBehaviour_SetEnable::Value' has a wrong offset!");

// Function LGUI.LGUIBehaviour.UpdateBP
// 0x0004 (0x0004 - 0x0000)
struct LGUIBehaviour_UpdateBP final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_UpdateBP) == 0x000004, "Wrong alignment on LGUIBehaviour_UpdateBP");
static_assert(sizeof(LGUIBehaviour_UpdateBP) == 0x000004, "Wrong size on LGUIBehaviour_UpdateBP");
static_assert(offsetof(LGUIBehaviour_UpdateBP, DeltaTime) == 0x000000, "Member 'LGUIBehaviour_UpdateBP::DeltaTime' has a wrong offset!");

// Function LGUI.LGUIBehaviour.CheckRootUIComponent
// 0x0001 (0x0001 - 0x0000)
struct LGUIBehaviour_CheckRootUIComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_CheckRootUIComponent) == 0x000001, "Wrong alignment on LGUIBehaviour_CheckRootUIComponent");
static_assert(sizeof(LGUIBehaviour_CheckRootUIComponent) == 0x000001, "Wrong size on LGUIBehaviour_CheckRootUIComponent");
static_assert(offsetof(LGUIBehaviour_CheckRootUIComponent, ReturnValue) == 0x000000, "Member 'LGUIBehaviour_CheckRootUIComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBehaviour.GetEnable
// 0x0001 (0x0001 - 0x0000)
struct LGUIBehaviour_GetEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_GetEnable) == 0x000001, "Wrong alignment on LGUIBehaviour_GetEnable");
static_assert(sizeof(LGUIBehaviour_GetEnable) == 0x000001, "Wrong size on LGUIBehaviour_GetEnable");
static_assert(offsetof(LGUIBehaviour_GetEnable, ReturnValue) == 0x000000, "Member 'LGUIBehaviour_GetEnable::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBehaviour.GetIsActiveAndEnable
// 0x0001 (0x0001 - 0x0000)
struct LGUIBehaviour_GetIsActiveAndEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_GetIsActiveAndEnable) == 0x000001, "Wrong alignment on LGUIBehaviour_GetIsActiveAndEnable");
static_assert(sizeof(LGUIBehaviour_GetIsActiveAndEnable) == 0x000001, "Wrong size on LGUIBehaviour_GetIsActiveAndEnable");
static_assert(offsetof(LGUIBehaviour_GetIsActiveAndEnable, ReturnValue) == 0x000000, "Member 'LGUIBehaviour_GetIsActiveAndEnable::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBehaviour.GetRootComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUIBehaviour_GetRootComponent final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_GetRootComponent) == 0x000008, "Wrong alignment on LGUIBehaviour_GetRootComponent");
static_assert(sizeof(LGUIBehaviour_GetRootComponent) == 0x000008, "Wrong size on LGUIBehaviour_GetRootComponent");
static_assert(offsetof(LGUIBehaviour_GetRootComponent, ReturnValue) == 0x000000, "Member 'LGUIBehaviour_GetRootComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBehaviour.GetRootSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUIBehaviour_GetRootSceneComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBehaviour_GetRootSceneComponent) == 0x000008, "Wrong alignment on LGUIBehaviour_GetRootSceneComponent");
static_assert(sizeof(LGUIBehaviour_GetRootSceneComponent) == 0x000008, "Wrong size on LGUIBehaviour_GetRootSceneComponent");
static_assert(offsetof(LGUIBehaviour_GetRootSceneComponent, ReturnValue) == 0x000000, "Member 'LGUIBehaviour_GetRootSceneComponent::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.CollectTweener
// 0x0008 (0x0008 - 0x0000)
struct UISelectableTransitionComponent_CollectTweener final
{
public:
	class ULTweener*                              InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_CollectTweener) == 0x000008, "Wrong alignment on UISelectableTransitionComponent_CollectTweener");
static_assert(sizeof(UISelectableTransitionComponent_CollectTweener) == 0x000008, "Wrong size on UISelectableTransitionComponent_CollectTweener");
static_assert(offsetof(UISelectableTransitionComponent_CollectTweener, InItem) == 0x000000, "Member 'UISelectableTransitionComponent_CollectTweener::InItem' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.CollectTweeners
// 0x0050 (0x0050 - 0x0000)
struct UISelectableTransitionComponent_CollectTweeners final
{
public:
	TSet<class ULTweener*>                        InItems;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_CollectTweeners) == 0x000008, "Wrong alignment on UISelectableTransitionComponent_CollectTweeners");
static_assert(sizeof(UISelectableTransitionComponent_CollectTweeners) == 0x000050, "Wrong size on UISelectableTransitionComponent_CollectTweeners");
static_assert(offsetof(UISelectableTransitionComponent_CollectTweeners, InItems) == 0x000000, "Member 'UISelectableTransitionComponent_CollectTweeners::InItems' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.OnDisabledBP
// 0x0001 (0x0001 - 0x0000)
struct UISelectableTransitionComponent_OnDisabledBP final
{
public:
	bool                                          InImmediateSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_OnDisabledBP) == 0x000001, "Wrong alignment on UISelectableTransitionComponent_OnDisabledBP");
static_assert(sizeof(UISelectableTransitionComponent_OnDisabledBP) == 0x000001, "Wrong size on UISelectableTransitionComponent_OnDisabledBP");
static_assert(offsetof(UISelectableTransitionComponent_OnDisabledBP, InImmediateSet) == 0x000000, "Member 'UISelectableTransitionComponent_OnDisabledBP::InImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.OnHighlightedBP
// 0x0001 (0x0001 - 0x0000)
struct UISelectableTransitionComponent_OnHighlightedBP final
{
public:
	bool                                          InImmediateSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_OnHighlightedBP) == 0x000001, "Wrong alignment on UISelectableTransitionComponent_OnHighlightedBP");
static_assert(sizeof(UISelectableTransitionComponent_OnHighlightedBP) == 0x000001, "Wrong size on UISelectableTransitionComponent_OnHighlightedBP");
static_assert(offsetof(UISelectableTransitionComponent_OnHighlightedBP, InImmediateSet) == 0x000000, "Member 'UISelectableTransitionComponent_OnHighlightedBP::InImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.OnNormalBP
// 0x0001 (0x0001 - 0x0000)
struct UISelectableTransitionComponent_OnNormalBP final
{
public:
	bool                                          InImmediateSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_OnNormalBP) == 0x000001, "Wrong alignment on UISelectableTransitionComponent_OnNormalBP");
static_assert(sizeof(UISelectableTransitionComponent_OnNormalBP) == 0x000001, "Wrong size on UISelectableTransitionComponent_OnNormalBP");
static_assert(offsetof(UISelectableTransitionComponent_OnNormalBP, InImmediateSet) == 0x000000, "Member 'UISelectableTransitionComponent_OnNormalBP::InImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.OnPressedBP
// 0x0001 (0x0001 - 0x0000)
struct UISelectableTransitionComponent_OnPressedBP final
{
public:
	bool                                          InImmediateSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_OnPressedBP) == 0x000001, "Wrong alignment on UISelectableTransitionComponent_OnPressedBP");
static_assert(sizeof(UISelectableTransitionComponent_OnPressedBP) == 0x000001, "Wrong size on UISelectableTransitionComponent_OnPressedBP");
static_assert(offsetof(UISelectableTransitionComponent_OnPressedBP, InImmediateSet) == 0x000000, "Member 'UISelectableTransitionComponent_OnPressedBP::InImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.OnStartCustomTransitionBP
// 0x0010 (0x0010 - 0x0000)
struct UISelectableTransitionComponent_OnStartCustomTransitionBP final
{
public:
	class FName                                   InTransitionName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InImmediateSet;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A5[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISelectableTransitionComponent_OnStartCustomTransitionBP) == 0x000004, "Wrong alignment on UISelectableTransitionComponent_OnStartCustomTransitionBP");
static_assert(sizeof(UISelectableTransitionComponent_OnStartCustomTransitionBP) == 0x000010, "Wrong size on UISelectableTransitionComponent_OnStartCustomTransitionBP");
static_assert(offsetof(UISelectableTransitionComponent_OnStartCustomTransitionBP, InTransitionName) == 0x000000, "Member 'UISelectableTransitionComponent_OnStartCustomTransitionBP::InTransitionName' has a wrong offset!");
static_assert(offsetof(UISelectableTransitionComponent_OnStartCustomTransitionBP, InImmediateSet) == 0x00000C, "Member 'UISelectableTransitionComponent_OnStartCustomTransitionBP::InImmediateSet' has a wrong offset!");

// Function LGUI.LGUIBaseRayEmitter.GetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRayEmitter_GetClickThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRayEmitter_GetClickThreshold) == 0x000004, "Wrong alignment on LGUIBaseRayEmitter_GetClickThreshold");
static_assert(sizeof(LGUIBaseRayEmitter_GetClickThreshold) == 0x000004, "Wrong size on LGUIBaseRayEmitter_GetClickThreshold");
static_assert(offsetof(LGUIBaseRayEmitter_GetClickThreshold, ReturnValue) == 0x000000, "Member 'LGUIBaseRayEmitter_GetClickThreshold::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRayEmitter.GetInitialValue
// 0x000C (0x000C - 0x0000)
struct LGUIBaseRayEmitter_GetInitialValue final
{
public:
	float                                         OutClickThreshold;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutHoldToDrag;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AA[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutHoldToDragTime;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRayEmitter_GetInitialValue) == 0x000004, "Wrong alignment on LGUIBaseRayEmitter_GetInitialValue");
static_assert(sizeof(LGUIBaseRayEmitter_GetInitialValue) == 0x00000C, "Wrong size on LGUIBaseRayEmitter_GetInitialValue");
static_assert(offsetof(LGUIBaseRayEmitter_GetInitialValue, OutClickThreshold) == 0x000000, "Member 'LGUIBaseRayEmitter_GetInitialValue::OutClickThreshold' has a wrong offset!");
static_assert(offsetof(LGUIBaseRayEmitter_GetInitialValue, OutHoldToDrag) == 0x000004, "Member 'LGUIBaseRayEmitter_GetInitialValue::OutHoldToDrag' has a wrong offset!");
static_assert(offsetof(LGUIBaseRayEmitter_GetInitialValue, OutHoldToDragTime) == 0x000008, "Member 'LGUIBaseRayEmitter_GetInitialValue::OutHoldToDragTime' has a wrong offset!");

// Function LGUI.LGUIBaseRayEmitter.SetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRayEmitter_SetClickThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRayEmitter_SetClickThreshold) == 0x000004, "Wrong alignment on LGUIBaseRayEmitter_SetClickThreshold");
static_assert(sizeof(LGUIBaseRayEmitter_SetClickThreshold) == 0x000004, "Wrong size on LGUIBaseRayEmitter_SetClickThreshold");
static_assert(offsetof(LGUIBaseRayEmitter_SetClickThreshold, Value) == 0x000000, "Member 'LGUIBaseRayEmitter_SetClickThreshold::Value' has a wrong offset!");

// Function LGUI.LGUIBaseRayEmitter.SetInitialValue
// 0x000C (0x000C - 0x0000)
struct LGUIBaseRayEmitter_SetInitialValue final
{
public:
	float                                         InClickThreshold;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InHoldToDrag;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AB[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InHoldToDragTime;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRayEmitter_SetInitialValue) == 0x000004, "Wrong alignment on LGUIBaseRayEmitter_SetInitialValue");
static_assert(sizeof(LGUIBaseRayEmitter_SetInitialValue) == 0x00000C, "Wrong size on LGUIBaseRayEmitter_SetInitialValue");
static_assert(offsetof(LGUIBaseRayEmitter_SetInitialValue, InClickThreshold) == 0x000000, "Member 'LGUIBaseRayEmitter_SetInitialValue::InClickThreshold' has a wrong offset!");
static_assert(offsetof(LGUIBaseRayEmitter_SetInitialValue, InHoldToDrag) == 0x000004, "Member 'LGUIBaseRayEmitter_SetInitialValue::InHoldToDrag' has a wrong offset!");
static_assert(offsetof(LGUIBaseRayEmitter_SetInitialValue, InHoldToDragTime) == 0x000008, "Member 'LGUIBaseRayEmitter_SetInitialValue::InHoldToDragTime' has a wrong offset!");

// Function LGUI.UIBaseActor.GetLoadStateOfSequenceByKey
// 0x0018 (0x0018 - 0x0000)
struct UIBaseActor_GetLoadStateOfSequenceByKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceLoadState                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AF[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIBaseActor_GetLoadStateOfSequenceByKey) == 0x000008, "Wrong alignment on UIBaseActor_GetLoadStateOfSequenceByKey");
static_assert(sizeof(UIBaseActor_GetLoadStateOfSequenceByKey) == 0x000018, "Wrong size on UIBaseActor_GetLoadStateOfSequenceByKey");
static_assert(offsetof(UIBaseActor_GetLoadStateOfSequenceByKey, Key) == 0x000000, "Member 'UIBaseActor_GetLoadStateOfSequenceByKey::Key' has a wrong offset!");
static_assert(offsetof(UIBaseActor_GetLoadStateOfSequenceByKey, ReturnValue) == 0x000010, "Member 'UIBaseActor_GetLoadStateOfSequenceByKey::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseActor.GetSeqInfoByKey
// 0x0048 (0x0048 - 0x0000)
struct UIBaseActor_GetSeqInfoByKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceInfo                          ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_GetSeqInfoByKey) == 0x000008, "Wrong alignment on UIBaseActor_GetSeqInfoByKey");
static_assert(sizeof(UIBaseActor_GetSeqInfoByKey) == 0x000048, "Wrong size on UIBaseActor_GetSeqInfoByKey");
static_assert(offsetof(UIBaseActor_GetSeqInfoByKey, Key) == 0x000000, "Member 'UIBaseActor_GetSeqInfoByKey::Key' has a wrong offset!");
static_assert(offsetof(UIBaseActor_GetSeqInfoByKey, ReturnValue) == 0x000010, "Member 'UIBaseActor_GetSeqInfoByKey::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseActor.GetSequencePlayContextOfKey
// 0x0018 (0x0018 - 0x0000)
struct UIBaseActor_GetSequencePlayContextOfKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USequencePlayContext*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_GetSequencePlayContextOfKey) == 0x000008, "Wrong alignment on UIBaseActor_GetSequencePlayContextOfKey");
static_assert(sizeof(UIBaseActor_GetSequencePlayContextOfKey) == 0x000018, "Wrong size on UIBaseActor_GetSequencePlayContextOfKey");
static_assert(offsetof(UIBaseActor_GetSequencePlayContextOfKey, Key) == 0x000000, "Member 'UIBaseActor_GetSequencePlayContextOfKey::Key' has a wrong offset!");
static_assert(offsetof(UIBaseActor_GetSequencePlayContextOfKey, ReturnValue) == 0x000010, "Member 'UIBaseActor_GetSequencePlayContextOfKey::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseActor.GetSequencePlayerByKey
// 0x0018 (0x0018 - 0x0000)
struct UIBaseActor_GetSequencePlayerByKey final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_GetSequencePlayerByKey) == 0x000008, "Wrong alignment on UIBaseActor_GetSequencePlayerByKey");
static_assert(sizeof(UIBaseActor_GetSequencePlayerByKey) == 0x000018, "Wrong size on UIBaseActor_GetSequencePlayerByKey");
static_assert(offsetof(UIBaseActor_GetSequencePlayerByKey, Param_Name) == 0x000000, "Member 'UIBaseActor_GetSequencePlayerByKey::Param_Name' has a wrong offset!");
static_assert(offsetof(UIBaseActor_GetSequencePlayerByKey, ReturnValue) == 0x000010, "Member 'UIBaseActor_GetSequencePlayerByKey::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseActor.LoadSequenceAssetAsyncByKey
// 0x0028 (0x0028 - 0x0000)
struct UIBaseActor_LoadSequenceAssetAsyncByKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class ULevelSequence* Sequence)> OnLoaded;                                          // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B0[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIBaseActor_LoadSequenceAssetAsyncByKey) == 0x000008, "Wrong alignment on UIBaseActor_LoadSequenceAssetAsyncByKey");
static_assert(sizeof(UIBaseActor_LoadSequenceAssetAsyncByKey) == 0x000028, "Wrong size on UIBaseActor_LoadSequenceAssetAsyncByKey");
static_assert(offsetof(UIBaseActor_LoadSequenceAssetAsyncByKey, Key) == 0x000000, "Member 'UIBaseActor_LoadSequenceAssetAsyncByKey::Key' has a wrong offset!");
static_assert(offsetof(UIBaseActor_LoadSequenceAssetAsyncByKey, OnLoaded) == 0x000010, "Member 'UIBaseActor_LoadSequenceAssetAsyncByKey::OnLoaded' has a wrong offset!");

// Function LGUI.UIBaseActor.PauseSequenceByKey
// 0x0010 (0x0010 - 0x0000)
struct UIBaseActor_PauseSequenceByKey final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_PauseSequenceByKey) == 0x000008, "Wrong alignment on UIBaseActor_PauseSequenceByKey");
static_assert(sizeof(UIBaseActor_PauseSequenceByKey) == 0x000010, "Wrong size on UIBaseActor_PauseSequenceByKey");
static_assert(offsetof(UIBaseActor_PauseSequenceByKey, Param_Name) == 0x000000, "Member 'UIBaseActor_PauseSequenceByKey::Param_Name' has a wrong offset!");

// Function LGUI.UIBaseActor.PlayLevelSequenceByKey
// 0x0010 (0x0010 - 0x0000)
struct UIBaseActor_PlayLevelSequenceByKey final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_PlayLevelSequenceByKey) == 0x000008, "Wrong alignment on UIBaseActor_PlayLevelSequenceByKey");
static_assert(sizeof(UIBaseActor_PlayLevelSequenceByKey) == 0x000010, "Wrong size on UIBaseActor_PlayLevelSequenceByKey");
static_assert(offsetof(UIBaseActor_PlayLevelSequenceByKey, Param_Name) == 0x000000, "Member 'UIBaseActor_PlayLevelSequenceByKey::Param_Name' has a wrong offset!");

// Function LGUI.UIBaseActor.ReplaySequenceByKey
// 0x0010 (0x0010 - 0x0000)
struct UIBaseActor_ReplaySequenceByKey final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_ReplaySequenceByKey) == 0x000008, "Wrong alignment on UIBaseActor_ReplaySequenceByKey");
static_assert(sizeof(UIBaseActor_ReplaySequenceByKey) == 0x000010, "Wrong size on UIBaseActor_ReplaySequenceByKey");
static_assert(offsetof(UIBaseActor_ReplaySequenceByKey, Param_Name) == 0x000000, "Member 'UIBaseActor_ReplaySequenceByKey::Param_Name' has a wrong offset!");

// Function LGUI.UIBaseActor.ResumeSequenceByKey
// 0x0010 (0x0010 - 0x0000)
struct UIBaseActor_ResumeSequenceByKey final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_ResumeSequenceByKey) == 0x000008, "Wrong alignment on UIBaseActor_ResumeSequenceByKey");
static_assert(sizeof(UIBaseActor_ResumeSequenceByKey) == 0x000010, "Wrong size on UIBaseActor_ResumeSequenceByKey");
static_assert(offsetof(UIBaseActor_ResumeSequenceByKey, Param_Name) == 0x000000, "Member 'UIBaseActor_ResumeSequenceByKey::Param_Name' has a wrong offset!");

// Function LGUI.UIBaseActor.SequenceJumpToEnd
// 0x0020 (0x0020 - 0x0000)
struct UIBaseActor_SequenceJumpToEnd final
{
public:
	struct FSoftObjectPath                        SoftPath;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_SequenceJumpToEnd) == 0x000008, "Wrong alignment on UIBaseActor_SequenceJumpToEnd");
static_assert(sizeof(UIBaseActor_SequenceJumpToEnd) == 0x000020, "Wrong size on UIBaseActor_SequenceJumpToEnd");
static_assert(offsetof(UIBaseActor_SequenceJumpToEnd, SoftPath) == 0x000000, "Member 'UIBaseActor_SequenceJumpToEnd::SoftPath' has a wrong offset!");

// Function LGUI.UIBaseActor.SequenceJumpToSecondByKey
// 0x0018 (0x0018 - 0x0000)
struct UIBaseActor_SequenceJumpToSecondByKey final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameTime                             Time;                                              // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_SequenceJumpToSecondByKey) == 0x000008, "Wrong alignment on UIBaseActor_SequenceJumpToSecondByKey");
static_assert(sizeof(UIBaseActor_SequenceJumpToSecondByKey) == 0x000018, "Wrong size on UIBaseActor_SequenceJumpToSecondByKey");
static_assert(offsetof(UIBaseActor_SequenceJumpToSecondByKey, Param_Name) == 0x000000, "Member 'UIBaseActor_SequenceJumpToSecondByKey::Param_Name' has a wrong offset!");
static_assert(offsetof(UIBaseActor_SequenceJumpToSecondByKey, Time) == 0x000010, "Member 'UIBaseActor_SequenceJumpToSecondByKey::Time' has a wrong offset!");

// Function LGUI.UIBaseActor.SequencePlayReverseByKey
// 0x0010 (0x0010 - 0x0000)
struct UIBaseActor_SequencePlayReverseByKey final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_SequencePlayReverseByKey) == 0x000008, "Wrong alignment on UIBaseActor_SequencePlayReverseByKey");
static_assert(sizeof(UIBaseActor_SequencePlayReverseByKey) == 0x000010, "Wrong size on UIBaseActor_SequencePlayReverseByKey");
static_assert(offsetof(UIBaseActor_SequencePlayReverseByKey, Param_Name) == 0x000000, "Member 'UIBaseActor_SequencePlayReverseByKey::Param_Name' has a wrong offset!");

// Function LGUI.UIBaseActor.StopSequenceByKey
// 0x0010 (0x0010 - 0x0000)
struct UIBaseActor_StopSequenceByKey final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_StopSequenceByKey) == 0x000008, "Wrong alignment on UIBaseActor_StopSequenceByKey");
static_assert(sizeof(UIBaseActor_StopSequenceByKey) == 0x000010, "Wrong size on UIBaseActor_StopSequenceByKey");
static_assert(offsetof(UIBaseActor_StopSequenceByKey, Param_Name) == 0x000000, "Member 'UIBaseActor_StopSequenceByKey::Param_Name' has a wrong offset!");

// Function LGUI.UIBaseActor.ExecuteSequencePlayEvent
// 0x0020 (0x0020 - 0x0000)
struct UIBaseActor_ExecuteSequencePlayEvent final
{
public:
	class FString                                 SequenceName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_ExecuteSequencePlayEvent) == 0x000008, "Wrong alignment on UIBaseActor_ExecuteSequencePlayEvent");
static_assert(sizeof(UIBaseActor_ExecuteSequencePlayEvent) == 0x000020, "Wrong size on UIBaseActor_ExecuteSequencePlayEvent");
static_assert(offsetof(UIBaseActor_ExecuteSequencePlayEvent, SequenceName) == 0x000000, "Member 'UIBaseActor_ExecuteSequencePlayEvent::SequenceName' has a wrong offset!");
static_assert(offsetof(UIBaseActor_ExecuteSequencePlayEvent, EventName) == 0x000010, "Member 'UIBaseActor_ExecuteSequencePlayEvent::EventName' has a wrong offset!");

// Function LGUI.UIBaseActor.GetUIItem
// 0x0008 (0x0008 - 0x0000)
struct UIBaseActor_GetUIItem final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_GetUIItem) == 0x000008, "Wrong alignment on UIBaseActor_GetUIItem");
static_assert(sizeof(UIBaseActor_GetUIItem) == 0x000008, "Wrong size on UIBaseActor_GetUIItem");
static_assert(offsetof(UIBaseActor_GetUIItem, ReturnValue) == 0x000000, "Member 'UIBaseActor_GetUIItem::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabV2.LoadPrefab
// 0x0020 (0x0020 - 0x0000)
struct LGUIPrefabV2_LoadPrefab final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUseRuntimeData;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetRelativeTransformToIdentity;                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B4[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabV2_LoadPrefab) == 0x000008, "Wrong alignment on LGUIPrefabV2_LoadPrefab");
static_assert(sizeof(LGUIPrefabV2_LoadPrefab) == 0x000020, "Wrong size on LGUIPrefabV2_LoadPrefab");
static_assert(offsetof(LGUIPrefabV2_LoadPrefab, WorldContextObject) == 0x000000, "Member 'LGUIPrefabV2_LoadPrefab::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefab, InParent) == 0x000008, "Member 'LGUIPrefabV2_LoadPrefab::InParent' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefab, bForceUseRuntimeData) == 0x000010, "Member 'LGUIPrefabV2_LoadPrefab::bForceUseRuntimeData' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefab, SetRelativeTransformToIdentity) == 0x000011, "Member 'LGUIPrefabV2_LoadPrefab::SetRelativeTransformToIdentity' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefab, ReturnValue) == 0x000018, "Member 'LGUIPrefabV2_LoadPrefab::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabV2.LoadPrefabWithTransform
// 0x0040 (0x0040 - 0x0000)
struct LGUIPrefabV2_LoadPrefabWithTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUseRuntimeData;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B5[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabV2_LoadPrefabWithTransform) == 0x000008, "Wrong alignment on LGUIPrefabV2_LoadPrefabWithTransform");
static_assert(sizeof(LGUIPrefabV2_LoadPrefabWithTransform) == 0x000040, "Wrong size on LGUIPrefabV2_LoadPrefabWithTransform");
static_assert(offsetof(LGUIPrefabV2_LoadPrefabWithTransform, WorldContextObject) == 0x000000, "Member 'LGUIPrefabV2_LoadPrefabWithTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefabWithTransform, InParent) == 0x000008, "Member 'LGUIPrefabV2_LoadPrefabWithTransform::InParent' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefabWithTransform, bForceUseRuntimeData) == 0x000010, "Member 'LGUIPrefabV2_LoadPrefabWithTransform::bForceUseRuntimeData' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefabWithTransform, Location) == 0x000014, "Member 'LGUIPrefabV2_LoadPrefabWithTransform::Location' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefabWithTransform, Rotation) == 0x000020, "Member 'LGUIPrefabV2_LoadPrefabWithTransform::Rotation' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefabWithTransform, Scale) == 0x00002C, "Member 'LGUIPrefabV2_LoadPrefabWithTransform::Scale' has a wrong offset!");
static_assert(offsetof(LGUIPrefabV2_LoadPrefabWithTransform, ReturnValue) == 0x000038, "Member 'LGUIPrefabV2_LoadPrefabWithTransform::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.GetNowHitComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUI_PointerInputModule_GetNowHitComponent final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_GetNowHitComponent) == 0x000008, "Wrong alignment on LGUI_PointerInputModule_GetNowHitComponent");
static_assert(sizeof(LGUI_PointerInputModule_GetNowHitComponent) == 0x000008, "Wrong size on LGUI_PointerInputModule_GetNowHitComponent");
static_assert(offsetof(LGUI_PointerInputModule_GetNowHitComponent, ReturnValue) == 0x000000, "Member 'LGUI_PointerInputModule_GetNowHitComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.GetPointerEventData
// 0x0010 (0x0010 - 0x0000)
struct LGUI_PointerInputModule_GetPointerEventData final
{
public:
	int32                                         PointerId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateIfNotExist;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B8[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULGUIPointerEventData*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_GetPointerEventData) == 0x000008, "Wrong alignment on LGUI_PointerInputModule_GetPointerEventData");
static_assert(sizeof(LGUI_PointerInputModule_GetPointerEventData) == 0x000010, "Wrong size on LGUI_PointerInputModule_GetPointerEventData");
static_assert(offsetof(LGUI_PointerInputModule_GetPointerEventData, PointerId) == 0x000000, "Member 'LGUI_PointerInputModule_GetPointerEventData::PointerId' has a wrong offset!");
static_assert(offsetof(LGUI_PointerInputModule_GetPointerEventData, CreateIfNotExist) == 0x000004, "Member 'LGUI_PointerInputModule_GetPointerEventData::CreateIfNotExist' has a wrong offset!");
static_assert(offsetof(LGUI_PointerInputModule_GetPointerEventData, ReturnValue) == 0x000008, "Member 'LGUI_PointerInputModule_GetPointerEventData::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.InputNavigation
// 0x0002 (0x0002 - 0x0000)
struct LGUI_PointerInputModule_InputNavigation final
{
public:
	ELGUINavigationDirection                      Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PressOrRelease;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_InputNavigation) == 0x000001, "Wrong alignment on LGUI_PointerInputModule_InputNavigation");
static_assert(sizeof(LGUI_PointerInputModule_InputNavigation) == 0x000002, "Wrong size on LGUI_PointerInputModule_InputNavigation");
static_assert(offsetof(LGUI_PointerInputModule_InputNavigation, Direction) == 0x000000, "Member 'LGUI_PointerInputModule_InputNavigation::Direction' has a wrong offset!");
static_assert(offsetof(LGUI_PointerInputModule_InputNavigation, PressOrRelease) == 0x000001, "Member 'LGUI_PointerInputModule_InputNavigation::PressOrRelease' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.InputTriggerForNavigation
// 0x0001 (0x0001 - 0x0000)
struct LGUI_PointerInputModule_InputTriggerForNavigation final
{
public:
	bool                                          TriggerPress;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_InputTriggerForNavigation) == 0x000001, "Wrong alignment on LGUI_PointerInputModule_InputTriggerForNavigation");
static_assert(sizeof(LGUI_PointerInputModule_InputTriggerForNavigation) == 0x000001, "Wrong size on LGUI_PointerInputModule_InputTriggerForNavigation");
static_assert(offsetof(LGUI_PointerInputModule_InputTriggerForNavigation, TriggerPress) == 0x000000, "Member 'LGUI_PointerInputModule_InputTriggerForNavigation::TriggerPress' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.IsPointerEventDataLineTrace
// 0x0010 (0x0010 - 0x0000)
struct LGUI_PointerInputModule_IsPointerEventDataLineTrace final
{
public:
	class ULGUIPointerEventData*                  InPointerEventData;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUI_PointerInputModule_IsPointerEventDataLineTrace) == 0x000008, "Wrong alignment on LGUI_PointerInputModule_IsPointerEventDataLineTrace");
static_assert(sizeof(LGUI_PointerInputModule_IsPointerEventDataLineTrace) == 0x000010, "Wrong size on LGUI_PointerInputModule_IsPointerEventDataLineTrace");
static_assert(offsetof(LGUI_PointerInputModule_IsPointerEventDataLineTrace, InPointerEventData) == 0x000000, "Member 'LGUI_PointerInputModule_IsPointerEventDataLineTrace::InPointerEventData' has a wrong offset!");
static_assert(offsetof(LGUI_PointerInputModule_IsPointerEventDataLineTrace, ReturnValue) == 0x000008, "Member 'LGUI_PointerInputModule_IsPointerEventDataLineTrace::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.RegisterInputChangeEvent
// 0x0020 (0x0020 - 0x0000)
struct LGUI_PointerInputModule_RegisterInputChangeEvent final
{
public:
	TDelegate<void(ELGUIPointerInputType Type)>   PointerInputChange;                                // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10BA[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_RegisterInputChangeEvent) == 0x000008, "Wrong alignment on LGUI_PointerInputModule_RegisterInputChangeEvent");
static_assert(sizeof(LGUI_PointerInputModule_RegisterInputChangeEvent) == 0x000020, "Wrong size on LGUI_PointerInputModule_RegisterInputChangeEvent");
static_assert(offsetof(LGUI_PointerInputModule_RegisterInputChangeEvent, PointerInputChange) == 0x000000, "Member 'LGUI_PointerInputModule_RegisterInputChangeEvent::PointerInputChange' has a wrong offset!");
static_assert(offsetof(LGUI_PointerInputModule_RegisterInputChangeEvent, ReturnValue) == 0x000018, "Member 'LGUI_PointerInputModule_RegisterInputChangeEvent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.UnregisterInputChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct LGUI_PointerInputModule_UnregisterInputChangeEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             DelegateHandle;                                    // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_UnregisterInputChangeEvent) == 0x000008, "Wrong alignment on LGUI_PointerInputModule_UnregisterInputChangeEvent");
static_assert(sizeof(LGUI_PointerInputModule_UnregisterInputChangeEvent) == 0x000008, "Wrong size on LGUI_PointerInputModule_UnregisterInputChangeEvent");
static_assert(offsetof(LGUI_PointerInputModule_UnregisterInputChangeEvent, DelegateHandle) == 0x000000, "Member 'LGUI_PointerInputModule_UnregisterInputChangeEvent::DelegateHandle' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.UpdateNavigation
// 0x0008 (0x0008 - 0x0000)
struct LGUI_PointerInputModule_UpdateNavigation final
{
public:
	class USceneComponent*                        NewSelectable;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_UpdateNavigation) == 0x000008, "Wrong alignment on LGUI_PointerInputModule_UpdateNavigation");
static_assert(sizeof(LGUI_PointerInputModule_UpdateNavigation) == 0x000008, "Wrong size on LGUI_PointerInputModule_UpdateNavigation");
static_assert(offsetof(LGUI_PointerInputModule_UpdateNavigation, NewSelectable) == 0x000000, "Member 'LGUI_PointerInputModule_UpdateNavigation::NewSelectable' has a wrong offset!");

// Function LGUI.LGUI_SceneCapture2DMouseRayEmitter.DeprojectViewPointToWorldForSceneCapture2D
// 0x0028 (0x0028 - 0x0000)
struct LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D final
{
public:
	class USceneCaptureComponent2D*               InSceneCapture2D;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InViewPoint01;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutRayOrigin;                                      // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutRayDirection;                                   // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D) == 0x000008, "Wrong alignment on LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D");
static_assert(sizeof(LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D) == 0x000028, "Wrong size on LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D, InSceneCapture2D) == 0x000000, "Member 'LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D::InSceneCapture2D' has a wrong offset!");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D, InViewPoint01) == 0x000008, "Member 'LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D::InViewPoint01' has a wrong offset!");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D, OutRayOrigin) == 0x000010, "Member 'LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D::OutRayOrigin' has a wrong offset!");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D, OutRayDirection) == 0x00001C, "Member 'LGUI_SceneCapture2DMouseRayEmitter_DeprojectViewPointToWorldForSceneCapture2D::OutRayDirection' has a wrong offset!");

// Function LGUI.LGUI_SceneCapture2DMouseRayEmitter.ProjectWorldToViewPointForSceneCapture2D
// 0x0020 (0x0020 - 0x0000)
struct LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D final
{
public:
	class USceneCaptureComponent2D*               InSceneCapture2D;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InWorldPosition;                                   // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutViewPoint;                                      // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10BC[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D) == 0x000008, "Wrong alignment on LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D");
static_assert(sizeof(LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D) == 0x000020, "Wrong size on LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D, InSceneCapture2D) == 0x000000, "Member 'LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D::InSceneCapture2D' has a wrong offset!");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D, InWorldPosition) == 0x000008, "Member 'LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D::InWorldPosition' has a wrong offset!");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D, OutViewPoint) == 0x000014, "Member 'LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D::OutViewPoint' has a wrong offset!");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D, ReturnValue) == 0x00001C, "Member 'LGUI_SceneCapture2DMouseRayEmitter_ProjectWorldToViewPointForSceneCapture2D::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_SceneCapture2DMouseRayEmitter.GetSceneCapture2DComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUI_SceneCapture2DMouseRayEmitter_GetSceneCapture2DComponent final
{
public:
	class USceneCaptureComponent2D*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_SceneCapture2DMouseRayEmitter_GetSceneCapture2DComponent) == 0x000008, "Wrong alignment on LGUI_SceneCapture2DMouseRayEmitter_GetSceneCapture2DComponent");
static_assert(sizeof(LGUI_SceneCapture2DMouseRayEmitter_GetSceneCapture2DComponent) == 0x000008, "Wrong size on LGUI_SceneCapture2DMouseRayEmitter_GetSceneCapture2DComponent");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_GetSceneCapture2DComponent, ReturnValue) == 0x000000, "Member 'LGUI_SceneCapture2DMouseRayEmitter_GetSceneCapture2DComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_SceneCapture2DMouseRayEmitter.SetSceneCapture2DComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUI_SceneCapture2DMouseRayEmitter_SetSceneCapture2DComponent final
{
public:
	class USceneCaptureComponent2D*               InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_SceneCapture2DMouseRayEmitter_SetSceneCapture2DComponent) == 0x000008, "Wrong alignment on LGUI_SceneCapture2DMouseRayEmitter_SetSceneCapture2DComponent");
static_assert(sizeof(LGUI_SceneCapture2DMouseRayEmitter_SetSceneCapture2DComponent) == 0x000008, "Wrong size on LGUI_SceneCapture2DMouseRayEmitter_SetSceneCapture2DComponent");
static_assert(offsetof(LGUI_SceneCapture2DMouseRayEmitter_SetSceneCapture2DComponent, InComp) == 0x000000, "Member 'LGUI_SceneCapture2DMouseRayEmitter_SetSceneCapture2DComponent::InComp' has a wrong offset!");

// Function LGUI.LGUI_SceneComponentRayEmitter.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct LGUI_SceneComponentRayEmitter_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_SceneComponentRayEmitter_GetTargetActor) == 0x000008, "Wrong alignment on LGUI_SceneComponentRayEmitter_GetTargetActor");
static_assert(sizeof(LGUI_SceneComponentRayEmitter_GetTargetActor) == 0x000008, "Wrong size on LGUI_SceneComponentRayEmitter_GetTargetActor");
static_assert(offsetof(LGUI_SceneComponentRayEmitter_GetTargetActor, ReturnValue) == 0x000000, "Member 'LGUI_SceneComponentRayEmitter_GetTargetActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_SceneComponentRayEmitter.GetTargetSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUI_SceneComponentRayEmitter_GetTargetSceneComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_SceneComponentRayEmitter_GetTargetSceneComponent) == 0x000008, "Wrong alignment on LGUI_SceneComponentRayEmitter_GetTargetSceneComponent");
static_assert(sizeof(LGUI_SceneComponentRayEmitter_GetTargetSceneComponent) == 0x000008, "Wrong size on LGUI_SceneComponentRayEmitter_GetTargetSceneComponent");
static_assert(offsetof(LGUI_SceneComponentRayEmitter_GetTargetSceneComponent, ReturnValue) == 0x000000, "Member 'LGUI_SceneComponentRayEmitter_GetTargetSceneComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_SceneComponentRayEmitter.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct LGUI_SceneComponentRayEmitter_SetTargetActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_SceneComponentRayEmitter_SetTargetActor) == 0x000008, "Wrong alignment on LGUI_SceneComponentRayEmitter_SetTargetActor");
static_assert(sizeof(LGUI_SceneComponentRayEmitter_SetTargetActor) == 0x000008, "Wrong size on LGUI_SceneComponentRayEmitter_SetTargetActor");
static_assert(offsetof(LGUI_SceneComponentRayEmitter_SetTargetActor, InActor) == 0x000000, "Member 'LGUI_SceneComponentRayEmitter_SetTargetActor::InActor' has a wrong offset!");

// Function LGUI.LGUI_SceneComponentRayEmitter.SetTargetSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUI_SceneComponentRayEmitter_SetTargetSceneComponent final
{
public:
	class USceneComponent*                        InSceneComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_SceneComponentRayEmitter_SetTargetSceneComponent) == 0x000008, "Wrong alignment on LGUI_SceneComponentRayEmitter_SetTargetSceneComponent");
static_assert(sizeof(LGUI_SceneComponentRayEmitter_SetTargetSceneComponent) == 0x000008, "Wrong size on LGUI_SceneComponentRayEmitter_SetTargetSceneComponent");
static_assert(offsetof(LGUI_SceneComponentRayEmitter_SetTargetSceneComponent, InSceneComp) == 0x000000, "Member 'LGUI_SceneComponentRayEmitter_SetTargetSceneComponent::InSceneComp' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.InputOverrideMousePosition
// 0x0008 (0x0008 - 0x0000)
struct LGUI_StandaloneInputModule_InputOverrideMousePosition final
{
public:
	struct FVector2D                              InMousePosition;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_StandaloneInputModule_InputOverrideMousePosition) == 0x000004, "Wrong alignment on LGUI_StandaloneInputModule_InputOverrideMousePosition");
static_assert(sizeof(LGUI_StandaloneInputModule_InputOverrideMousePosition) == 0x000008, "Wrong size on LGUI_StandaloneInputModule_InputOverrideMousePosition");
static_assert(offsetof(LGUI_StandaloneInputModule_InputOverrideMousePosition, InMousePosition) == 0x000000, "Member 'LGUI_StandaloneInputModule_InputOverrideMousePosition::InMousePosition' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.InputScroll
// 0x0004 (0x0004 - 0x0000)
struct LGUI_StandaloneInputModule_InputScroll final
{
public:
	float                                         InAxisValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_StandaloneInputModule_InputScroll) == 0x000004, "Wrong alignment on LGUI_StandaloneInputModule_InputScroll");
static_assert(sizeof(LGUI_StandaloneInputModule_InputScroll) == 0x000004, "Wrong size on LGUI_StandaloneInputModule_InputScroll");
static_assert(offsetof(LGUI_StandaloneInputModule_InputScroll, InAxisValue) == 0x000000, "Member 'LGUI_StandaloneInputModule_InputScroll::InAxisValue' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.InputTrigger
// 0x0002 (0x0002 - 0x0000)
struct LGUI_StandaloneInputModule_InputTrigger final
{
public:
	bool                                          InTriggerPress;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseButtonType                              InMouseButtonType;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_StandaloneInputModule_InputTrigger) == 0x000001, "Wrong alignment on LGUI_StandaloneInputModule_InputTrigger");
static_assert(sizeof(LGUI_StandaloneInputModule_InputTrigger) == 0x000002, "Wrong size on LGUI_StandaloneInputModule_InputTrigger");
static_assert(offsetof(LGUI_StandaloneInputModule_InputTrigger, InTriggerPress) == 0x000000, "Member 'LGUI_StandaloneInputModule_InputTrigger::InTriggerPress' has a wrong offset!");
static_assert(offsetof(LGUI_StandaloneInputModule_InputTrigger, InMouseButtonType) == 0x000001, "Member 'LGUI_StandaloneInputModule_InputTrigger::InMouseButtonType' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.SetIsForceChange
// 0x0001 (0x0001 - 0x0000)
struct LGUI_StandaloneInputModule_SetIsForceChange final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_StandaloneInputModule_SetIsForceChange) == 0x000001, "Wrong alignment on LGUI_StandaloneInputModule_SetIsForceChange");
static_assert(sizeof(LGUI_StandaloneInputModule_SetIsForceChange) == 0x000001, "Wrong size on LGUI_StandaloneInputModule_SetIsForceChange");
static_assert(offsetof(LGUI_StandaloneInputModule_SetIsForceChange, Value) == 0x000000, "Member 'LGUI_StandaloneInputModule_SetIsForceChange::Value' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.SetIsUseMouse
// 0x0001 (0x0001 - 0x0000)
struct LGUI_StandaloneInputModule_SetIsUseMouse final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_StandaloneInputModule_SetIsUseMouse) == 0x000001, "Wrong alignment on LGUI_StandaloneInputModule_SetIsUseMouse");
static_assert(sizeof(LGUI_StandaloneInputModule_SetIsUseMouse) == 0x000001, "Wrong size on LGUI_StandaloneInputModule_SetIsUseMouse");
static_assert(offsetof(LGUI_StandaloneInputModule_SetIsUseMouse, Value) == 0x000000, "Member 'LGUI_StandaloneInputModule_SetIsUseMouse::Value' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.SimulationLineTrace
// 0x0018 (0x0018 - 0x0000)
struct LGUI_StandaloneInputModule_SimulationLineTrace final
{
public:
	class UUIItem*                                UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ClickPivot;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C0[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUI_StandaloneInputModule_SimulationLineTrace) == 0x000008, "Wrong alignment on LGUI_StandaloneInputModule_SimulationLineTrace");
static_assert(sizeof(LGUI_StandaloneInputModule_SimulationLineTrace) == 0x000018, "Wrong size on LGUI_StandaloneInputModule_SimulationLineTrace");
static_assert(offsetof(LGUI_StandaloneInputModule_SimulationLineTrace, UIItem) == 0x000000, "Member 'LGUI_StandaloneInputModule_SimulationLineTrace::UIItem' has a wrong offset!");
static_assert(offsetof(LGUI_StandaloneInputModule_SimulationLineTrace, ClickPivot) == 0x000008, "Member 'LGUI_StandaloneInputModule_SimulationLineTrace::ClickPivot' has a wrong offset!");
static_assert(offsetof(LGUI_StandaloneInputModule_SimulationLineTrace, ReturnValue) == 0x000010, "Member 'LGUI_StandaloneInputModule_SimulationLineTrace::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.SimulationPointerDownUp
// 0x0018 (0x0018 - 0x0000)
struct LGUI_StandaloneInputModule_SimulationPointerDownUp final
{
public:
	class UUIItem*                                UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPressed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C1[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ClickPivot;                                        // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C2[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUI_StandaloneInputModule_SimulationPointerDownUp) == 0x000008, "Wrong alignment on LGUI_StandaloneInputModule_SimulationPointerDownUp");
static_assert(sizeof(LGUI_StandaloneInputModule_SimulationPointerDownUp) == 0x000018, "Wrong size on LGUI_StandaloneInputModule_SimulationPointerDownUp");
static_assert(offsetof(LGUI_StandaloneInputModule_SimulationPointerDownUp, UIItem) == 0x000000, "Member 'LGUI_StandaloneInputModule_SimulationPointerDownUp::UIItem' has a wrong offset!");
static_assert(offsetof(LGUI_StandaloneInputModule_SimulationPointerDownUp, IsPressed) == 0x000008, "Member 'LGUI_StandaloneInputModule_SimulationPointerDownUp::IsPressed' has a wrong offset!");
static_assert(offsetof(LGUI_StandaloneInputModule_SimulationPointerDownUp, ClickPivot) == 0x00000C, "Member 'LGUI_StandaloneInputModule_SimulationPointerDownUp::ClickPivot' has a wrong offset!");
static_assert(offsetof(LGUI_StandaloneInputModule_SimulationPointerDownUp, ReturnValue) == 0x000014, "Member 'LGUI_StandaloneInputModule_SimulationPointerDownUp::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_TouchInputModule.InputScroll
// 0x0004 (0x0004 - 0x0000)
struct LGUI_TouchInputModule_InputScroll final
{
public:
	float                                         InAxisValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_TouchInputModule_InputScroll) == 0x000004, "Wrong alignment on LGUI_TouchInputModule_InputScroll");
static_assert(sizeof(LGUI_TouchInputModule_InputScroll) == 0x000004, "Wrong size on LGUI_TouchInputModule_InputScroll");
static_assert(offsetof(LGUI_TouchInputModule_InputScroll, InAxisValue) == 0x000000, "Member 'LGUI_TouchInputModule_InputScroll::InAxisValue' has a wrong offset!");

// Function LGUI.LGUI_TouchInputModule.InputTouchMoved
// 0x0010 (0x0010 - 0x0000)
struct LGUI_TouchInputModule_InputTouchMoved final
{
public:
	int32                                         InTouchID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InTouchPointPosition;                              // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_TouchInputModule_InputTouchMoved) == 0x000004, "Wrong alignment on LGUI_TouchInputModule_InputTouchMoved");
static_assert(sizeof(LGUI_TouchInputModule_InputTouchMoved) == 0x000010, "Wrong size on LGUI_TouchInputModule_InputTouchMoved");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchMoved, InTouchID) == 0x000000, "Member 'LGUI_TouchInputModule_InputTouchMoved::InTouchID' has a wrong offset!");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchMoved, InTouchPointPosition) == 0x000004, "Member 'LGUI_TouchInputModule_InputTouchMoved::InTouchPointPosition' has a wrong offset!");

// Function LGUI.LGUI_TouchInputModule.InputTouchTrigger
// 0x0014 (0x0014 - 0x0000)
struct LGUI_TouchInputModule_InputTouchTrigger final
{
public:
	bool                                          InTouchPress;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InTouchID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InTouchPointPosition;                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_TouchInputModule_InputTouchTrigger) == 0x000004, "Wrong alignment on LGUI_TouchInputModule_InputTouchTrigger");
static_assert(sizeof(LGUI_TouchInputModule_InputTouchTrigger) == 0x000014, "Wrong size on LGUI_TouchInputModule_InputTouchTrigger");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchTrigger, InTouchPress) == 0x000000, "Member 'LGUI_TouchInputModule_InputTouchTrigger::InTouchPress' has a wrong offset!");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchTrigger, InTouchID) == 0x000004, "Member 'LGUI_TouchInputModule_InputTouchTrigger::InTouchID' has a wrong offset!");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchTrigger, InTouchPointPosition) == 0x000008, "Member 'LGUI_TouchInputModule_InputTouchTrigger::InTouchPointPosition' has a wrong offset!");

// Function LGUI.LGUIAtlasManager.DisposeAtlasByPackingTag
// 0x000C (0x000C - 0x0000)
struct LGUIAtlasManager_DisposeAtlasByPackingTag final
{
public:
	class FName                                   InPackingTag;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIAtlasManager_DisposeAtlasByPackingTag) == 0x000004, "Wrong alignment on LGUIAtlasManager_DisposeAtlasByPackingTag");
static_assert(sizeof(LGUIAtlasManager_DisposeAtlasByPackingTag) == 0x00000C, "Wrong size on LGUIAtlasManager_DisposeAtlasByPackingTag");
static_assert(offsetof(LGUIAtlasManager_DisposeAtlasByPackingTag, InPackingTag) == 0x000000, "Member 'LGUIAtlasManager_DisposeAtlasByPackingTag::InPackingTag' has a wrong offset!");

// Function LGUI.LGUIBaseEventData.ToString
// 0x0010 (0x0010 - 0x0000)
struct LGUIBaseEventData_ToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseEventData_ToString) == 0x000008, "Wrong alignment on LGUIBaseEventData_ToString");
static_assert(sizeof(LGUIBaseEventData_ToString) == 0x000010, "Wrong size on LGUIBaseEventData_ToString");
static_assert(offsetof(LGUIBaseEventData_ToString, ReturnValue) == 0x000000, "Member 'LGUIBaseEventData_ToString::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AlphaFrom
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AlphaFrom final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CB[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AlphaFrom) == 0x000008, "Wrong alignment on LGUIBPLibrary_AlphaFrom");
static_assert(sizeof(LGUIBPLibrary_AlphaFrom) == 0x000020, "Wrong size on LGUIBPLibrary_AlphaFrom");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, Target) == 0x000000, "Member 'LGUIBPLibrary_AlphaFrom::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, StartValue) == 0x000008, "Member 'LGUIBPLibrary_AlphaFrom::StartValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AlphaFrom::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, Delay) == 0x000010, "Member 'LGUIBPLibrary_AlphaFrom::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, Ease) == 0x000014, "Member 'LGUIBPLibrary_AlphaFrom::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AlphaFrom::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AlphaTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AlphaTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CC[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AlphaTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AlphaTo");
static_assert(sizeof(LGUIBPLibrary_AlphaTo) == 0x000020, "Wrong size on LGUIBPLibrary_AlphaTo");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AlphaTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_AlphaTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorOffsetTo
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_AnchorOffsetTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CD[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorOffsetTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorOffsetTo");
static_assert(sizeof(LGUIBPLibrary_AnchorOffsetTo) == 0x000028, "Wrong size on LGUIBPLibrary_AnchorOffsetTo");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorOffsetTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorOffsetTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, Duration) == 0x000010, "Member 'LGUIBPLibrary_AnchorOffsetTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, Delay) == 0x000014, "Member 'LGUIBPLibrary_AnchorOffsetTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, Ease) == 0x000018, "Member 'LGUIBPLibrary_AnchorOffsetTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, ReturnValue) == 0x000020, "Member 'LGUIBPLibrary_AnchorOffsetTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorOffsetXTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AnchorOffsetXTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CE[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorOffsetXTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorOffsetXTo");
static_assert(sizeof(LGUIBPLibrary_AnchorOffsetXTo) == 0x000020, "Wrong size on LGUIBPLibrary_AnchorOffsetXTo");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorOffsetXTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorOffsetXTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AnchorOffsetXTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AnchorOffsetXTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AnchorOffsetXTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AnchorOffsetXTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorOffsetYTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AnchorOffsetYTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CF[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorOffsetYTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorOffsetYTo");
static_assert(sizeof(LGUIBPLibrary_AnchorOffsetYTo) == 0x000020, "Wrong size on LGUIBPLibrary_AnchorOffsetYTo");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorOffsetYTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorOffsetYTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AnchorOffsetYTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AnchorOffsetYTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AnchorOffsetYTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AnchorOffsetYTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.BatchDuplicateActors
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_BatchDuplicateActors final
{
public:
	class AActor*                                 Src;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Parent;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_BatchDuplicateActors) == 0x000008, "Wrong alignment on LGUIBPLibrary_BatchDuplicateActors");
static_assert(sizeof(LGUIBPLibrary_BatchDuplicateActors) == 0x000028, "Wrong size on LGUIBPLibrary_BatchDuplicateActors");
static_assert(offsetof(LGUIBPLibrary_BatchDuplicateActors, Src) == 0x000000, "Member 'LGUIBPLibrary_BatchDuplicateActors::Src' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_BatchDuplicateActors, Num) == 0x000008, "Member 'LGUIBPLibrary_BatchDuplicateActors::Num' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_BatchDuplicateActors, Parent) == 0x000010, "Member 'LGUIBPLibrary_BatchDuplicateActors::Parent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_BatchDuplicateActors, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_BatchDuplicateActors::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.ClipBoardCopy
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_ClipBoardCopy final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_ClipBoardCopy) == 0x000008, "Wrong alignment on LGUIBPLibrary_ClipBoardCopy");
static_assert(sizeof(LGUIBPLibrary_ClipBoardCopy) == 0x000010, "Wrong size on LGUIBPLibrary_ClipBoardCopy");
static_assert(offsetof(LGUIBPLibrary_ClipBoardCopy, Str) == 0x000000, "Member 'LGUIBPLibrary_ClipBoardCopy::Str' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.ClipBoardPaste
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_ClipBoardPaste final
{
public:
	class FString                                 Target;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_ClipBoardPaste) == 0x000008, "Wrong alignment on LGUIBPLibrary_ClipBoardPaste");
static_assert(sizeof(LGUIBPLibrary_ClipBoardPaste) == 0x000010, "Wrong size on LGUIBPLibrary_ClipBoardPaste");
static_assert(offsetof(LGUIBPLibrary_ClipBoardPaste, Target) == 0x000000, "Member 'LGUIBPLibrary_ClipBoardPaste::Target' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.ColorFrom
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_ColorFrom final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D1[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_ColorFrom) == 0x000008, "Wrong alignment on LGUIBPLibrary_ColorFrom");
static_assert(sizeof(LGUIBPLibrary_ColorFrom) == 0x000020, "Wrong size on LGUIBPLibrary_ColorFrom");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, Target) == 0x000000, "Member 'LGUIBPLibrary_ColorFrom::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, StartValue) == 0x000008, "Member 'LGUIBPLibrary_ColorFrom::StartValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, Duration) == 0x00000C, "Member 'LGUIBPLibrary_ColorFrom::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, Delay) == 0x000010, "Member 'LGUIBPLibrary_ColorFrom::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, Ease) == 0x000014, "Member 'LGUIBPLibrary_ColorFrom::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_ColorFrom::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.ColorTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_ColorTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D2[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_ColorTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_ColorTo");
static_assert(sizeof(LGUIBPLibrary_ColorTo) == 0x000020, "Wrong size on LGUIBPLibrary_ColorTo");
static_assert(offsetof(LGUIBPLibrary_ColorTo, Target) == 0x000000, "Member 'LGUIBPLibrary_ColorTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_ColorTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_ColorTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_ColorTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_ColorTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_ColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.CopySequenceBindingFromParent
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_CopySequenceBindingFromParent final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LevelSequencePath;                                 // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_CopySequenceBindingFromParent) == 0x000008, "Wrong alignment on LGUIBPLibrary_CopySequenceBindingFromParent");
static_assert(sizeof(LGUIBPLibrary_CopySequenceBindingFromParent) == 0x000028, "Wrong size on LGUIBPLibrary_CopySequenceBindingFromParent");
static_assert(offsetof(LGUIBPLibrary_CopySequenceBindingFromParent, Target) == 0x000000, "Member 'LGUIBPLibrary_CopySequenceBindingFromParent::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_CopySequenceBindingFromParent, LevelSequencePath) == 0x000008, "Member 'LGUIBPLibrary_CopySequenceBindingFromParent::LevelSequencePath' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.CreateTransientTexture2D
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_CreateTransientTexture2D final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D3[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_CreateTransientTexture2D) == 0x000008, "Wrong alignment on LGUIBPLibrary_CreateTransientTexture2D");
static_assert(sizeof(LGUIBPLibrary_CreateTransientTexture2D) == 0x000020, "Wrong size on LGUIBPLibrary_CreateTransientTexture2D");
static_assert(offsetof(LGUIBPLibrary_CreateTransientTexture2D, Width) == 0x000000, "Member 'LGUIBPLibrary_CreateTransientTexture2D::Width' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_CreateTransientTexture2D, Height) == 0x000004, "Member 'LGUIBPLibrary_CreateTransientTexture2D::Height' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_CreateTransientTexture2D, InName) == 0x000008, "Member 'LGUIBPLibrary_CreateTransientTexture2D::InName' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_CreateTransientTexture2D, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_CreateTransientTexture2D::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.DeleteActor
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_DeleteActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WithHierarchy;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_DeleteActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_DeleteActor");
static_assert(sizeof(LGUIBPLibrary_DeleteActor) == 0x000010, "Wrong size on LGUIBPLibrary_DeleteActor");
static_assert(offsetof(LGUIBPLibrary_DeleteActor, Target) == 0x000000, "Member 'LGUIBPLibrary_DeleteActor::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DeleteActor, WithHierarchy) == 0x000008, "Member 'LGUIBPLibrary_DeleteActor::WithHierarchy' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.DeleteFile
// 0x0018 (0x0018 - 0x0000)
struct LGUIBPLibrary_DeleteFile final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_DeleteFile) == 0x000008, "Wrong alignment on LGUIBPLibrary_DeleteFile");
static_assert(sizeof(LGUIBPLibrary_DeleteFile) == 0x000018, "Wrong size on LGUIBPLibrary_DeleteFile");
static_assert(offsetof(LGUIBPLibrary_DeleteFile, Path) == 0x000000, "Member 'LGUIBPLibrary_DeleteFile::Path' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DeleteFile, ReturnValue) == 0x000010, "Member 'LGUIBPLibrary_DeleteFile::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.DestroyActorWithHierarchy
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_DestroyActorWithHierarchy final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WithHierarchy;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_DestroyActorWithHierarchy) == 0x000008, "Wrong alignment on LGUIBPLibrary_DestroyActorWithHierarchy");
static_assert(sizeof(LGUIBPLibrary_DestroyActorWithHierarchy) == 0x000010, "Wrong size on LGUIBPLibrary_DestroyActorWithHierarchy");
static_assert(offsetof(LGUIBPLibrary_DestroyActorWithHierarchy, Target) == 0x000000, "Member 'LGUIBPLibrary_DestroyActorWithHierarchy::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DestroyActorWithHierarchy, WithHierarchy) == 0x000008, "Member 'LGUIBPLibrary_DestroyActorWithHierarchy::WithHierarchy' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.DuplicateActor
// 0x0018 (0x0018 - 0x0000)
struct LGUIBPLibrary_DuplicateActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_DuplicateActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_DuplicateActor");
static_assert(sizeof(LGUIBPLibrary_DuplicateActor) == 0x000018, "Wrong size on LGUIBPLibrary_DuplicateActor");
static_assert(offsetof(LGUIBPLibrary_DuplicateActor, Target) == 0x000000, "Member 'LGUIBPLibrary_DuplicateActor::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DuplicateActor, Parent) == 0x000008, "Member 'LGUIBPLibrary_DuplicateActor::Parent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DuplicateActor, ReturnValue) == 0x000010, "Member 'LGUIBPLibrary_DuplicateActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetAllAttachChildrenOfActor
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_GetAllAttachChildrenOfActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeAllChildren;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D7[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetAllAttachChildrenOfActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetAllAttachChildrenOfActor");
static_assert(sizeof(LGUIBPLibrary_GetAllAttachChildrenOfActor) == 0x000020, "Wrong size on LGUIBPLibrary_GetAllAttachChildrenOfActor");
static_assert(offsetof(LGUIBPLibrary_GetAllAttachChildrenOfActor, Actor) == 0x000000, "Member 'LGUIBPLibrary_GetAllAttachChildrenOfActor::Actor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetAllAttachChildrenOfActor, bIncludeAllChildren) == 0x000008, "Member 'LGUIBPLibrary_GetAllAttachChildrenOfActor::bIncludeAllChildren' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetAllAttachChildrenOfActor, ReturnValue) == 0x000010, "Member 'LGUIBPLibrary_GetAllAttachChildrenOfActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetComponentInChildren
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_GetComponentInChildren final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSelf;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetComponentInChildren) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetComponentInChildren");
static_assert(sizeof(LGUIBPLibrary_GetComponentInChildren) == 0x000020, "Wrong size on LGUIBPLibrary_GetComponentInChildren");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, InActor) == 0x000000, "Member 'LGUIBPLibrary_GetComponentInChildren::InActor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, ComponentClass) == 0x000008, "Member 'LGUIBPLibrary_GetComponentInChildren::ComponentClass' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, IncludeSelf) == 0x000010, "Member 'LGUIBPLibrary_GetComponentInChildren::IncludeSelf' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_GetComponentInChildren::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetComponentInParent
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_GetComponentInParent final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSelf;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D9[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetComponentInParent) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetComponentInParent");
static_assert(sizeof(LGUIBPLibrary_GetComponentInParent) == 0x000020, "Wrong size on LGUIBPLibrary_GetComponentInParent");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, InActor) == 0x000000, "Member 'LGUIBPLibrary_GetComponentInParent::InActor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, ComponentClass) == 0x000008, "Member 'LGUIBPLibrary_GetComponentInParent::ComponentClass' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, IncludeSelf) == 0x000010, "Member 'LGUIBPLibrary_GetComponentInParent::IncludeSelf' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_GetComponentInParent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetComponentsInChildren
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_GetComponentsInChildren final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSelf;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DA[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetComponentsInChildren) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetComponentsInChildren");
static_assert(sizeof(LGUIBPLibrary_GetComponentsInChildren) == 0x000028, "Wrong size on LGUIBPLibrary_GetComponentsInChildren");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, InActor) == 0x000000, "Member 'LGUIBPLibrary_GetComponentsInChildren::InActor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, ComponentClass) == 0x000008, "Member 'LGUIBPLibrary_GetComponentsInChildren::ComponentClass' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, IncludeSelf) == 0x000010, "Member 'LGUIBPLibrary_GetComponentsInChildren::IncludeSelf' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_GetComponentsInChildren::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetComponentsInChildrenWithHirerarchyIndex
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex final
{
public:
	class AUIBaseActor*                           InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSelf;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DB[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex");
static_assert(sizeof(LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex) == 0x000028, "Wrong size on LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex, InActor) == 0x000000, "Member 'LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex::InActor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex, ComponentClass) == 0x000008, "Member 'LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex::ComponentClass' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex, IncludeSelf) == 0x000010, "Member 'LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex::IncludeSelf' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_GetComponentsInChildrenWithHirerarchyIndex::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetFullPathOfActor
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_GetFullPathOfActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PathString;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DC[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_GetFullPathOfActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetFullPathOfActor");
static_assert(sizeof(LGUIBPLibrary_GetFullPathOfActor) == 0x000028, "Wrong size on LGUIBPLibrary_GetFullPathOfActor");
static_assert(offsetof(LGUIBPLibrary_GetFullPathOfActor, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_GetFullPathOfActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetFullPathOfActor, Actor) == 0x000008, "Member 'LGUIBPLibrary_GetFullPathOfActor::Actor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetFullPathOfActor, PathString) == 0x000010, "Member 'LGUIBPLibrary_GetFullPathOfActor::PathString' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetFullPathOfActor, ReturnValue) == 0x000020, "Member 'LGUIBPLibrary_GetFullPathOfActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetPrefabRoot
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_GetPrefabRoot final
{
public:
	class UUIItem*                                InUiItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetPrefabRoot) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetPrefabRoot");
static_assert(sizeof(LGUIBPLibrary_GetPrefabRoot) == 0x000010, "Wrong size on LGUIBPLibrary_GetPrefabRoot");
static_assert(offsetof(LGUIBPLibrary_GetPrefabRoot, InUiItem) == 0x000000, "Member 'LGUIBPLibrary_GetPrefabRoot::InUiItem' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetPrefabRoot, ReturnValue) == 0x000008, "Member 'LGUIBPLibrary_GetPrefabRoot::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetRelativePathWithRoot
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_GetRelativePathWithRoot final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                Root;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetRelativePathWithRoot) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetRelativePathWithRoot");
static_assert(sizeof(LGUIBPLibrary_GetRelativePathWithRoot) == 0x000020, "Wrong size on LGUIBPLibrary_GetRelativePathWithRoot");
static_assert(offsetof(LGUIBPLibrary_GetRelativePathWithRoot, Target) == 0x000000, "Member 'LGUIBPLibrary_GetRelativePathWithRoot::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetRelativePathWithRoot, Root) == 0x000008, "Member 'LGUIBPLibrary_GetRelativePathWithRoot::Root' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetRelativePathWithRoot, ReturnValue) == 0x000010, "Member 'LGUIBPLibrary_GetRelativePathWithRoot::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetSpriteBorderSize
// 0x0044 (0x0044 - 0x0000)
struct LGUIBPLibrary_GetSpriteBorderSize final
{
public:
	struct FLGUISpriteInfo                        SpriteInfo;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         borderLeft;                                        // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         borderRight;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         borderTop;                                         // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         borderBottom;                                      // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetSpriteBorderSize) == 0x000004, "Wrong alignment on LGUIBPLibrary_GetSpriteBorderSize");
static_assert(sizeof(LGUIBPLibrary_GetSpriteBorderSize) == 0x000044, "Wrong size on LGUIBPLibrary_GetSpriteBorderSize");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, SpriteInfo) == 0x000000, "Member 'LGUIBPLibrary_GetSpriteBorderSize::SpriteInfo' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, borderLeft) == 0x000034, "Member 'LGUIBPLibrary_GetSpriteBorderSize::borderLeft' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, borderRight) == 0x000038, "Member 'LGUIBPLibrary_GetSpriteBorderSize::borderRight' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, borderTop) == 0x00003C, "Member 'LGUIBPLibrary_GetSpriteBorderSize::borderTop' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, borderBottom) == 0x000040, "Member 'LGUIBPLibrary_GetSpriteBorderSize::borderBottom' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetSpriteBorderUV
// 0x0044 (0x0044 - 0x0000)
struct LGUIBPLibrary_GetSpriteBorderUV final
{
public:
	struct FLGUISpriteInfo                        SpriteInfo;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         borderUV0X;                                        // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         borderUV0Y;                                        // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         borderUV3X;                                        // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         borderUV3Y;                                        // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetSpriteBorderUV) == 0x000004, "Wrong alignment on LGUIBPLibrary_GetSpriteBorderUV");
static_assert(sizeof(LGUIBPLibrary_GetSpriteBorderUV) == 0x000044, "Wrong size on LGUIBPLibrary_GetSpriteBorderUV");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, SpriteInfo) == 0x000000, "Member 'LGUIBPLibrary_GetSpriteBorderUV::SpriteInfo' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, borderUV0X) == 0x000034, "Member 'LGUIBPLibrary_GetSpriteBorderUV::borderUV0X' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, borderUV0Y) == 0x000038, "Member 'LGUIBPLibrary_GetSpriteBorderUV::borderUV0Y' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, borderUV3X) == 0x00003C, "Member 'LGUIBPLibrary_GetSpriteBorderUV::borderUV3X' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, borderUV3Y) == 0x000040, "Member 'LGUIBPLibrary_GetSpriteBorderUV::borderUV3Y' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetSpriteSize
// 0x003C (0x003C - 0x0000)
struct LGUIBPLibrary_GetSpriteSize final
{
public:
	struct FLGUISpriteInfo                        SpriteInfo;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetSpriteSize) == 0x000004, "Wrong alignment on LGUIBPLibrary_GetSpriteSize");
static_assert(sizeof(LGUIBPLibrary_GetSpriteSize) == 0x00003C, "Wrong size on LGUIBPLibrary_GetSpriteSize");
static_assert(offsetof(LGUIBPLibrary_GetSpriteSize, SpriteInfo) == 0x000000, "Member 'LGUIBPLibrary_GetSpriteSize::SpriteInfo' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteSize, Width) == 0x000034, "Member 'LGUIBPLibrary_GetSpriteSize::Width' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteSize, Height) == 0x000038, "Member 'LGUIBPLibrary_GetSpriteSize::Height' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetSpriteUV
// 0x0044 (0x0044 - 0x0000)
struct LGUIBPLibrary_GetSpriteUV final
{
public:
	struct FLGUISpriteInfo                        SpriteInfo;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UV0X;                                              // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UV0Y;                                              // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UV3X;                                              // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UV3Y;                                              // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetSpriteUV) == 0x000004, "Wrong alignment on LGUIBPLibrary_GetSpriteUV");
static_assert(sizeof(LGUIBPLibrary_GetSpriteUV) == 0x000044, "Wrong size on LGUIBPLibrary_GetSpriteUV");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, SpriteInfo) == 0x000000, "Member 'LGUIBPLibrary_GetSpriteUV::SpriteInfo' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, UV0X) == 0x000034, "Member 'LGUIBPLibrary_GetSpriteUV::UV0X' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, UV0Y) == 0x000038, "Member 'LGUIBPLibrary_GetSpriteUV::UV0Y' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, UV3X) == 0x00003C, "Member 'LGUIBPLibrary_GetSpriteUV::UV3X' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, UV3Y) == 0x000040, "Member 'LGUIBPLibrary_GetSpriteUV::UV3Y' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetStringHashValue
// 0x0018 (0x0018 - 0x0000)
struct LGUIBPLibrary_GetStringHashValue final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetStringHashValue) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetStringHashValue");
static_assert(sizeof(LGUIBPLibrary_GetStringHashValue) == 0x000018, "Wrong size on LGUIBPLibrary_GetStringHashValue");
static_assert(offsetof(LGUIBPLibrary_GetStringHashValue, Str) == 0x000000, "Member 'LGUIBPLibrary_GetStringHashValue::Str' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetStringHashValue, ReturnValue) == 0x000010, "Member 'LGUIBPLibrary_GetStringHashValue::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetUIItemCornerPositionInViewPort
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_GetUIItemCornerPositionInViewPort final
{
public:
	EUiItemCornerType                             Corner;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                Item;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetUIItemCornerPositionInViewPort) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetUIItemCornerPositionInViewPort");
static_assert(sizeof(LGUIBPLibrary_GetUIItemCornerPositionInViewPort) == 0x000020, "Wrong size on LGUIBPLibrary_GetUIItemCornerPositionInViewPort");
static_assert(offsetof(LGUIBPLibrary_GetUIItemCornerPositionInViewPort, Corner) == 0x000000, "Member 'LGUIBPLibrary_GetUIItemCornerPositionInViewPort::Corner' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemCornerPositionInViewPort, WorldContextObject) == 0x000008, "Member 'LGUIBPLibrary_GetUIItemCornerPositionInViewPort::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemCornerPositionInViewPort, Item) == 0x000010, "Member 'LGUIBPLibrary_GetUIItemCornerPositionInViewPort::Item' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemCornerPositionInViewPort, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_GetUIItemCornerPositionInViewPort::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetUIItemPositionInViewPort
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_GetUIItemPositionInViewPort final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsScaledByBPI;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DE[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DF[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_GetUIItemPositionInViewPort) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetUIItemPositionInViewPort");
static_assert(sizeof(LGUIBPLibrary_GetUIItemPositionInViewPort) == 0x000020, "Wrong size on LGUIBPLibrary_GetUIItemPositionInViewPort");
static_assert(offsetof(LGUIBPLibrary_GetUIItemPositionInViewPort, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_GetUIItemPositionInViewPort::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemPositionInViewPort, Item) == 0x000008, "Member 'LGUIBPLibrary_GetUIItemPositionInViewPort::Item' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemPositionInViewPort, bIsScaledByBPI) == 0x000010, "Member 'LGUIBPLibrary_GetUIItemPositionInViewPort::bIsScaledByBPI' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemPositionInViewPort, ReturnValue) == 0x000014, "Member 'LGUIBPLibrary_GetUIItemPositionInViewPort::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetUIItemWithPath
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_GetUIItemWithPath final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullItemPath;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetUIItemWithPath) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetUIItemWithPath");
static_assert(sizeof(LGUIBPLibrary_GetUIItemWithPath) == 0x000020, "Wrong size on LGUIBPLibrary_GetUIItemWithPath");
static_assert(offsetof(LGUIBPLibrary_GetUIItemWithPath, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_GetUIItemWithPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemWithPath, FullItemPath) == 0x000008, "Member 'LGUIBPLibrary_GetUIItemWithPath::FullItemPath' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemWithPath, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_GetUIItemWithPath::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetUIItemWithRelativePath
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_GetUIItemWithRelativePath final
{
public:
	class UUIItem*                                ParentItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RelativePath;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetUIItemWithRelativePath) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetUIItemWithRelativePath");
static_assert(sizeof(LGUIBPLibrary_GetUIItemWithRelativePath) == 0x000020, "Wrong size on LGUIBPLibrary_GetUIItemWithRelativePath");
static_assert(offsetof(LGUIBPLibrary_GetUIItemWithRelativePath, ParentItem) == 0x000000, "Member 'LGUIBPLibrary_GetUIItemWithRelativePath::ParentItem' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemWithRelativePath, RelativePath) == 0x000008, "Member 'LGUIBPLibrary_GetUIItemWithRelativePath::RelativePath' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetUIItemWithRelativePath, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_GetUIItemWithRelativePath::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetWorldUISceneRendering
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_GetWorldUISceneRendering final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_GetWorldUISceneRendering) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetWorldUISceneRendering");
static_assert(sizeof(LGUIBPLibrary_GetWorldUISceneRendering) == 0x000010, "Wrong size on LGUIBPLibrary_GetWorldUISceneRendering");
static_assert(offsetof(LGUIBPLibrary_GetWorldUISceneRendering, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_GetWorldUISceneRendering::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetWorldUISceneRendering, ReturnValue) == 0x000008, "Member 'LGUIBPLibrary_GetWorldUISceneRendering::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.HeightTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_HeightTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E1[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_HeightTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_HeightTo");
static_assert(sizeof(LGUIBPLibrary_HeightTo) == 0x000020, "Wrong size on LGUIBPLibrary_HeightTo");
static_assert(offsetof(LGUIBPLibrary_HeightTo, Target) == 0x000000, "Member 'LGUIBPLibrary_HeightTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_HeightTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_HeightTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_HeightTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_HeightTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_HeightTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.K2_LGUICompRef_GetComponent
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_K2_LGUICompRef_GetComponent final
{
public:
	struct FLGUIComponentReference                InLGUICompRef;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        OutResult;                                         // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_K2_LGUICompRef_GetComponent) == 0x000008, "Wrong alignment on LGUIBPLibrary_K2_LGUICompRef_GetComponent");
static_assert(sizeof(LGUIBPLibrary_K2_LGUICompRef_GetComponent) == 0x000030, "Wrong size on LGUIBPLibrary_K2_LGUICompRef_GetComponent");
static_assert(offsetof(LGUIBPLibrary_K2_LGUICompRef_GetComponent, InLGUICompRef) == 0x000000, "Member 'LGUIBPLibrary_K2_LGUICompRef_GetComponent::InLGUICompRef' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_K2_LGUICompRef_GetComponent, OutResult) == 0x000028, "Member 'LGUIBPLibrary_K2_LGUICompRef_GetComponent::OutResult' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUICompRef_GetActor
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUICompRef_GetActor final
{
public:
	struct FLGUIComponentReference                InLGUIComponentReference;                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUICompRef_GetActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUICompRef_GetActor");
static_assert(sizeof(LGUIBPLibrary_LGUICompRef_GetActor) == 0x000030, "Wrong size on LGUIBPLibrary_LGUICompRef_GetActor");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetActor, InLGUIComponentReference) == 0x000000, "Member 'LGUIBPLibrary_LGUICompRef_GetActor::InLGUIComponentReference' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetActor, ReturnValue) == 0x000028, "Member 'LGUIBPLibrary_LGUICompRef_GetActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUICompRef_GetComponent
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUICompRef_GetComponent final
{
public:
	struct FLGUIComponentReference                InLGUIComponentReference;                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            InComponentType;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUICompRef_GetComponent) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUICompRef_GetComponent");
static_assert(sizeof(LGUIBPLibrary_LGUICompRef_GetComponent) == 0x000038, "Wrong size on LGUIBPLibrary_LGUICompRef_GetComponent");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponent, InLGUIComponentReference) == 0x000000, "Member 'LGUIBPLibrary_LGUICompRef_GetComponent::InLGUIComponentReference' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponent, InComponentType) == 0x000028, "Member 'LGUIBPLibrary_LGUICompRef_GetComponent::InComponentType' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponent, ReturnValue) == 0x000030, "Member 'LGUIBPLibrary_LGUICompRef_GetComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUICompRef_GetComponentClass
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUICompRef_GetComponentClass final
{
public:
	struct FLGUIComponentReference                InLGUIComponentReference;                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUICompRef_GetComponentClass) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUICompRef_GetComponentClass");
static_assert(sizeof(LGUIBPLibrary_LGUICompRef_GetComponentClass) == 0x000030, "Wrong size on LGUIBPLibrary_LGUICompRef_GetComponentClass");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponentClass, InLGUIComponentReference) == 0x000000, "Member 'LGUIBPLibrary_LGUICompRef_GetComponentClass::InLGUIComponentReference' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponentClass, ReturnValue) == 0x000028, "Member 'LGUIBPLibrary_LGUICompRef_GetComponentClass::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Actor_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute final
{
public:
	struct FLGUIDrawableEvent_Actor               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Actor_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Actor_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Actor_Register final
{
public:
	struct FLGUIDrawableEvent_Actor               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* Value)>          InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E2[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Actor_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Actor_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Actor_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Actor_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Actor_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Actor_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister final
{
public:
	struct FLGUIDrawableEvent_Actor               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Actor_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Bool_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute final
{
public:
	struct FLGUIDrawableEvent_Bool                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InParameter;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E3[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Bool_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Bool_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Bool_Register final
{
public:
	struct FLGUIDrawableEvent_Bool                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool Value)>                   InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E4[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Bool_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Bool_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Bool_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Bool_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Bool_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Bool_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister final
{
public:
	struct FLGUIDrawableEvent_Bool                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Bool_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Class_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Class_Execute final
{
public:
	struct FLGUIDrawableEvent_Class               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UClass*                                 InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Class_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Class_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Class_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Class_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Class_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Class_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Class_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Class_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Class_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Class_Register final
{
public:
	struct FLGUIDrawableEvent_Class               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UClass* Value)>          InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E5[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Class_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Class_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Class_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Class_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Class_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Class_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Class_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Class_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Class_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Class_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Class_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister final
{
public:
	struct FLGUIDrawableEvent_Class               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Class_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Color_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Color_Execute final
{
public:
	struct FLGUIDrawableEvent_Color               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FColor                                 InParameter;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E6[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Color_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Color_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Color_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Color_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Color_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Color_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Color_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Color_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Color_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Color_Register final
{
public:
	struct FLGUIDrawableEvent_Color               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FColor& Value)>   InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E7[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Color_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Color_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Color_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Color_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Color_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Color_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Color_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Color_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Color_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Color_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Color_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister final
{
public:
	struct FLGUIDrawableEvent_Color               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Color_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Empty_Execute
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Empty_Execute final
{
public:
	struct FLGUIDrawableEvent_Empty               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Empty_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Execute) == 0x000030, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Empty_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Empty_Execute::InEvent' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Empty_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Empty_Register final
{
public:
	struct FLGUIDrawableEvent_Empty               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E8[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Empty_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Empty_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Empty_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Empty_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Empty_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Empty_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister final
{
public:
	struct FLGUIDrawableEvent_Empty               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Empty_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Float_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Float_Execute final
{
public:
	struct FLGUIDrawableEvent_Float               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InParameter;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E9[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Float_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Float_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Float_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Float_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Float_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Float_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Float_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Float_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Float_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Float_Register final
{
public:
	struct FLGUIDrawableEvent_Float               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(float Value)>                  InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EA[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Float_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Float_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Float_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Float_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Float_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Float_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Float_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Float_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Float_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Float_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Float_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister final
{
public:
	struct FLGUIDrawableEvent_Float               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Float_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int32_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute final
{
public:
	struct FLGUIDrawableEvent_Int32               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InParameter;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EB[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int32_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int32_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Int32_Register final
{
public:
	struct FLGUIDrawableEvent_Int32               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Value)>                  InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EC[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Int32_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Int32_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int32_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int32_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int32_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int32_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister final
{
public:
	struct FLGUIDrawableEvent_Int32               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int32_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int64_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute final
{
public:
	struct FLGUIDrawableEvent_Int64               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int64_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int64_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Int64_Register final
{
public:
	struct FLGUIDrawableEvent_Int64               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(int64 Value)>                  InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10ED[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Int64_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Int64_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int64_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int64_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int64_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Int64_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister final
{
public:
	struct FLGUIDrawableEvent_Int64               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Int64_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_LinearColor_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute final
{
public:
	struct FLGUIDrawableEvent_LinearColor         InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           InParameter;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_LinearColor_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register final
{
public:
	struct FLGUIDrawableEvent_LinearColor         InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FLinearColor& Value)> InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EE[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_LinearColor_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister final
{
public:
	struct FLGUIDrawableEvent_LinearColor         InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_LinearColor_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Object_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Object_Execute final
{
public:
	struct FLGUIDrawableEvent_Object              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Object_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Object_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Object_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Object_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Object_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Object_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Object_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Object_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Object_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Object_Register final
{
public:
	struct FLGUIDrawableEvent_Object              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Value)>         InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EF[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Object_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Object_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Object_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Object_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Object_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Object_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Object_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Object_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Object_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Object_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Object_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister final
{
public:
	struct FLGUIDrawableEvent_Object              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Object_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_PointerEvent_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute final
{
public:
	struct FLGUIDrawableEvent_PointerEvent        InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_PointerEvent_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register final
{
public:
	struct FLGUIDrawableEvent_PointerEvent        InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class ULGUIPointerEventData* Value)> InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F0[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_PointerEvent_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister final
{
public:
	struct FLGUIDrawableEvent_PointerEvent        InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_PointerEvent_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Quaternion_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute final
{
public:
	struct FLGUIDrawableEvent_Quaternion          InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FQuat                                  InParameter;                                       // 0x0030(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute) == 0x000010, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Quaternion_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register final
{
public:
	struct FLGUIDrawableEvent_Quaternion          InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FQuat& Value)>    InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F1[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Quaternion_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister final
{
public:
	struct FLGUIDrawableEvent_Quaternion          InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Quaternion_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Rotator_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute final
{
public:
	struct FLGUIDrawableEvent_Rotator             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               InParameter;                                       // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F2[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Rotator_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Rotator_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register final
{
public:
	struct FLGUIDrawableEvent_Rotator             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRotator& Value)> InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F3[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Rotator_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Rotator_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister final
{
public:
	struct FLGUIDrawableEvent_Rotator             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Rotator_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_String_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_String_Execute final
{
public:
	struct FLGUIDrawableEvent_String              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InParameter;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_String_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_String_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_String_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_String_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_String_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_String_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_String_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_String_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_String_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_String_Register final
{
public:
	struct FLGUIDrawableEvent_String              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Value)>   InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F4[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_String_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_String_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_String_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_String_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_String_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_String_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_String_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_String_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_String_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_String_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_String_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_String_Unregister final
{
public:
	struct FLGUIDrawableEvent_String              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_String_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_String_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_String_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_String_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_String_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_String_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_String_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_String_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_UInt8_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute final
{
public:
	struct FLGUIDrawableEvent_UInt8               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         InParameter;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F5[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_UInt8_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_UInt8_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register final
{
public:
	struct FLGUIDrawableEvent_UInt8               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 Value)>                  InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F6[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_UInt8_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_UInt8_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister final
{
public:
	struct FLGUIDrawableEvent_UInt8               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_UInt8_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector2_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute final
{
public:
	struct FLGUIDrawableEvent_Vector2             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector2_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector2_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register final
{
public:
	struct FLGUIDrawableEvent_Vector2             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector2D& Value)> InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F7[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector2_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector2_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister final
{
public:
	struct FLGUIDrawableEvent_Vector2             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector2_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector3_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute final
{
public:
	struct FLGUIDrawableEvent_Vector3             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                InParameter;                                       // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F8[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector3_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector3_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register final
{
public:
	struct FLGUIDrawableEvent_Vector3             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector& Value)>  InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F9[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector3_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector3_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister final
{
public:
	struct FLGUIDrawableEvent_Vector3             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector3_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector4_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute final
{
public:
	struct FLGUIDrawableEvent_Vector4             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector4                               InParameter;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute) == 0x000010, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector4_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector4_Register
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register final
{
public:
	struct FLGUIDrawableEvent_Vector4             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector4& Value)> InDelegate;                                        // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FA[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register, ReturnValue) == 0x000048, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector4_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEvent_Vector4_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister final
{
public:
	struct FLGUIDrawableEvent_Vector4             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIDrawableEvent_Vector4_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteActor
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteActor final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 InParameter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteActor");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteActor) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteActor");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteActor, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteActor::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteActor, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteActor::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteBool
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteBool final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InParameter;                                       // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FB[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteBool) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteBool");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteBool) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteBool");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteBool, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteBool::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteBool, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteBool::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteClass
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteClass final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UClass*                                 InParameter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteClass) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteClass");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteClass) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteClass");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteClass, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteClass::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteClass, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteClass::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteColor
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteColor final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FColor                                 InParameter;                                       // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FC[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteColor) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteColor");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteColor) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteColor");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteColor, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteColor::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteColor, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteColor::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteEmpty
// 0x0018 (0x0018 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteEmpty final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteEmpty) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteEmpty");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteEmpty) == 0x000018, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteEmpty");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteEmpty, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteEmpty::InEvent' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteFloat
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteFloat final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InParameter;                                       // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FD[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteFloat) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteFloat");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteFloat) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteFloat");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteFloat, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteFloat::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteFloat, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteFloat::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteInt32
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteInt32 final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InParameter;                                       // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FE[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteInt32) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteInt32");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteInt32) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteInt32");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteInt32, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteInt32::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteInt32, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteInt32::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteLinearColor
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           InParameter;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteLinearColor::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteObject
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteObject final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                InParameter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteObject) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteObject");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteObject) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteObject");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteObject, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteObject::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteObject, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteObject::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecutePointerEvent
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  InParameter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecutePointerEvent::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteQuaternion
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FF[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  InParameter;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion) == 0x000010, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion) == 0x000030, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion, InParameter) == 0x000020, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteQuaternion::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteRotator
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteRotator final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               InParameter;                                       // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1100[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteRotator) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteRotator");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteRotator) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteRotator");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteRotator, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteRotator::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteRotator, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteRotator::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteString
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteString final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InParameter;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteString) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteString");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteString) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteString");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteString, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteString::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteString, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteString::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteUInt8
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteUInt8 final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         InParameter;                                       // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1101[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteUInt8) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteUInt8");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteUInt8) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteUInt8");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteUInt8, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteUInt8::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteUInt8, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteUInt8::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteVector2
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteVector2 final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              InParameter;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteVector2) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteVector2");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteVector2) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteVector2");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteVector2, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteVector2::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteVector2, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteVector2::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteVector3
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteVector3 final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                InParameter;                                       // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1102[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteVector3) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteVector3");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteVector3) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteVector3");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteVector3, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteVector3::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteVector3, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteVector3::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIDrawableEventExecuteVector4
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUIDrawableEventExecuteVector4 final
{
public:
	struct FLGUIDrawableEvent                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_1103[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               InParameter;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIDrawableEventExecuteVector4) == 0x000010, "Wrong alignment on LGUIBPLibrary_LGUIDrawableEventExecuteVector4");
static_assert(sizeof(LGUIBPLibrary_LGUIDrawableEventExecuteVector4) == 0x000030, "Wrong size on LGUIBPLibrary_LGUIDrawableEventExecuteVector4");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteVector4, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteVector4::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIDrawableEventExecuteVector4, InParameter) == 0x000020, "Member 'LGUIBPLibrary_LGUIDrawableEventExecuteVector4::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIExecuteControllerInputAction
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIExecuteControllerInputAction final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PressOrRelease;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1104[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIExecuteControllerInputAction) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIExecuteControllerInputAction");
static_assert(sizeof(LGUIBPLibrary_LGUIExecuteControllerInputAction) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIExecuteControllerInputAction");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteControllerInputAction, InputKey) == 0x000000, "Member 'LGUIBPLibrary_LGUIExecuteControllerInputAction::InputKey' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteControllerInputAction, PressOrRelease) == 0x000020, "Member 'LGUIBPLibrary_LGUIExecuteControllerInputAction::PressOrRelease' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIExecuteControllerInputAxis
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIExecuteControllerInputAxis final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1105[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIExecuteControllerInputAxis) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIExecuteControllerInputAxis");
static_assert(sizeof(LGUIBPLibrary_LGUIExecuteControllerInputAxis) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIExecuteControllerInputAxis");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteControllerInputAxis, InputKey) == 0x000000, "Member 'LGUIBPLibrary_LGUIExecuteControllerInputAxis::InputKey' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteControllerInputAxis, Value) == 0x000020, "Member 'LGUIBPLibrary_LGUIExecuteControllerInputAxis::Value' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIExecuteInputAction
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIExecuteInputAction final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PressOrRelease;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1106[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIExecuteInputAction) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIExecuteInputAction");
static_assert(sizeof(LGUIBPLibrary_LGUIExecuteInputAction) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIExecuteInputAction");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteInputAction, InputKey) == 0x000000, "Member 'LGUIBPLibrary_LGUIExecuteInputAction::InputKey' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteInputAction, PressOrRelease) == 0x000020, "Member 'LGUIBPLibrary_LGUIExecuteInputAction::PressOrRelease' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIExecuteInputAxis
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIExecuteInputAxis final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1107[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIExecuteInputAxis) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIExecuteInputAxis");
static_assert(sizeof(LGUIBPLibrary_LGUIExecuteInputAxis) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIExecuteInputAxis");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteInputAxis, InputKey) == 0x000000, "Member 'LGUIBPLibrary_LGUIExecuteInputAxis::InputKey' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteInputAxis, Value) == 0x000020, "Member 'LGUIBPLibrary_LGUIExecuteInputAxis::Value' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LoadImageToTexture2D
// 0x0018 (0x0018 - 0x0000)
struct LGUIBPLibrary_LoadImageToTexture2D final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LoadImageToTexture2D) == 0x000008, "Wrong alignment on LGUIBPLibrary_LoadImageToTexture2D");
static_assert(sizeof(LGUIBPLibrary_LoadImageToTexture2D) == 0x000018, "Wrong size on LGUIBPLibrary_LoadImageToTexture2D");
static_assert(offsetof(LGUIBPLibrary_LoadImageToTexture2D, ImagePath) == 0x000000, "Member 'LGUIBPLibrary_LoadImageToTexture2D::ImagePath' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadImageToTexture2D, Texture) == 0x000010, "Member 'LGUIBPLibrary_LoadImageToTexture2D::Texture' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LoadPrefabWithAsset
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LoadPrefabWithAsset final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrefabAsset*                           PrefabAsset;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LoadPrefabWithAsset) == 0x000008, "Wrong alignment on LGUIBPLibrary_LoadPrefabWithAsset");
static_assert(sizeof(LGUIBPLibrary_LoadPrefabWithAsset) == 0x000020, "Wrong size on LGUIBPLibrary_LoadPrefabWithAsset");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithAsset, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_LoadPrefabWithAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithAsset, PrefabAsset) == 0x000008, "Member 'LGUIBPLibrary_LoadPrefabWithAsset::PrefabAsset' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithAsset, InParent) == 0x000010, "Member 'LGUIBPLibrary_LoadPrefabWithAsset::InParent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithAsset, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_LoadPrefabWithAsset::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.PivotTo
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_PivotTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1108[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_PivotTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_PivotTo");
static_assert(sizeof(LGUIBPLibrary_PivotTo) == 0x000028, "Wrong size on LGUIBPLibrary_PivotTo");
static_assert(offsetof(LGUIBPLibrary_PivotTo, Target) == 0x000000, "Member 'LGUIBPLibrary_PivotTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_PivotTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, Duration) == 0x000010, "Member 'LGUIBPLibrary_PivotTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, Delay) == 0x000014, "Member 'LGUIBPLibrary_PivotTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, Ease) == 0x000018, "Member 'LGUIBPLibrary_PivotTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, ReturnValue) == 0x000020, "Member 'LGUIBPLibrary_PivotTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.PrintUIItemLog
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_PrintUIItemLog final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                UIItem;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogDepth;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1109[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_PrintUIItemLog) == 0x000008, "Wrong alignment on LGUIBPLibrary_PrintUIItemLog");
static_assert(sizeof(LGUIBPLibrary_PrintUIItemLog) == 0x000020, "Wrong size on LGUIBPLibrary_PrintUIItemLog");
static_assert(offsetof(LGUIBPLibrary_PrintUIItemLog, Content) == 0x000000, "Member 'LGUIBPLibrary_PrintUIItemLog::Content' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PrintUIItemLog, UIItem) == 0x000010, "Member 'LGUIBPLibrary_PrintUIItemLog::UIItem' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PrintUIItemLog, LogDepth) == 0x000018, "Member 'LGUIBPLibrary_PrintUIItemLog::LogDepth' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.ResetGlobalBlurUIItem
// 0x0008 (0x0008 - 0x0000)
struct LGUIBPLibrary_ResetGlobalBlurUIItem final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_ResetGlobalBlurUIItem) == 0x000008, "Wrong alignment on LGUIBPLibrary_ResetGlobalBlurUIItem");
static_assert(sizeof(LGUIBPLibrary_ResetGlobalBlurUIItem) == 0x000008, "Wrong size on LGUIBPLibrary_ResetGlobalBlurUIItem");
static_assert(offsetof(LGUIBPLibrary_ResetGlobalBlurUIItem, World) == 0x000000, "Member 'LGUIBPLibrary_ResetGlobalBlurUIItem::World' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.SetGlobalBlurUIItem
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_SetGlobalBlurUIItem final
{
public:
	class UUIItem*                                UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_SetGlobalBlurUIItem) == 0x000008, "Wrong alignment on LGUIBPLibrary_SetGlobalBlurUIItem");
static_assert(sizeof(LGUIBPLibrary_SetGlobalBlurUIItem) == 0x000010, "Wrong size on LGUIBPLibrary_SetGlobalBlurUIItem");
static_assert(offsetof(LGUIBPLibrary_SetGlobalBlurUIItem, UIItem) == 0x000000, "Member 'LGUIBPLibrary_SetGlobalBlurUIItem::UIItem' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_SetGlobalBlurUIItem, World) == 0x000008, "Member 'LGUIBPLibrary_SetGlobalBlurUIItem::World' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.SetIsFullScreenUIRendering
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_SetIsFullScreenUIRendering final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_SetIsFullScreenUIRendering) == 0x000008, "Wrong alignment on LGUIBPLibrary_SetIsFullScreenUIRendering");
static_assert(sizeof(LGUIBPLibrary_SetIsFullScreenUIRendering) == 0x000010, "Wrong size on LGUIBPLibrary_SetIsFullScreenUIRendering");
static_assert(offsetof(LGUIBPLibrary_SetIsFullScreenUIRendering, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_SetIsFullScreenUIRendering::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_SetIsFullScreenUIRendering, Value) == 0x000008, "Member 'LGUIBPLibrary_SetIsFullScreenUIRendering::Value' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.SetLGUIUISceneRendering
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_SetLGUIUISceneRendering final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUISceneRendering;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_SetLGUIUISceneRendering) == 0x000008, "Wrong alignment on LGUIBPLibrary_SetLGUIUISceneRendering");
static_assert(sizeof(LGUIBPLibrary_SetLGUIUISceneRendering) == 0x000010, "Wrong size on LGUIBPLibrary_SetLGUIUISceneRendering");
static_assert(offsetof(LGUIBPLibrary_SetLGUIUISceneRendering, Actor) == 0x000000, "Member 'LGUIBPLibrary_SetLGUIUISceneRendering::Actor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_SetLGUIUISceneRendering, IsUISceneRendering) == 0x000008, "Member 'LGUIBPLibrary_SetLGUIUISceneRendering::IsUISceneRendering' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.SetUIActive
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_SetUIActive final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Acitve;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_SetUIActive) == 0x000008, "Wrong alignment on LGUIBPLibrary_SetUIActive");
static_assert(sizeof(LGUIBPLibrary_SetUIActive) == 0x000010, "Wrong size on LGUIBPLibrary_SetUIActive");
static_assert(offsetof(LGUIBPLibrary_SetUIActive, Target) == 0x000000, "Member 'LGUIBPLibrary_SetUIActive::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_SetUIActive, Acitve) == 0x000008, "Member 'LGUIBPLibrary_SetUIActive::Acitve' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.SetUIAlpha
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_SetUIAlpha final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAlpha;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110D[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_SetUIAlpha) == 0x000008, "Wrong alignment on LGUIBPLibrary_SetUIAlpha");
static_assert(sizeof(LGUIBPLibrary_SetUIAlpha) == 0x000010, "Wrong size on LGUIBPLibrary_SetUIAlpha");
static_assert(offsetof(LGUIBPLibrary_SetUIAlpha, Target) == 0x000000, "Member 'LGUIBPLibrary_SetUIAlpha::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_SetUIAlpha, InAlpha) == 0x000008, "Member 'LGUIBPLibrary_SetUIAlpha::InAlpha' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.SetUIHierarchyIndex
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_SetUIHierarchyIndex final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110E[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_SetUIHierarchyIndex) == 0x000008, "Wrong alignment on LGUIBPLibrary_SetUIHierarchyIndex");
static_assert(sizeof(LGUIBPLibrary_SetUIHierarchyIndex) == 0x000010, "Wrong size on LGUIBPLibrary_SetUIHierarchyIndex");
static_assert(offsetof(LGUIBPLibrary_SetUIHierarchyIndex, Target) == 0x000000, "Member 'LGUIBPLibrary_SetUIHierarchyIndex::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_SetUIHierarchyIndex, Param_Index) == 0x000008, "Member 'LGUIBPLibrary_SetUIHierarchyIndex::Param_Index' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.StretchBottomTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_StretchBottomTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_StretchBottomTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_StretchBottomTo");
static_assert(sizeof(LGUIBPLibrary_StretchBottomTo) == 0x000020, "Wrong size on LGUIBPLibrary_StretchBottomTo");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, Target) == 0x000000, "Member 'LGUIBPLibrary_StretchBottomTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_StretchBottomTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_StretchBottomTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_StretchBottomTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_StretchBottomTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_StretchBottomTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.StretchLeftTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_StretchLeftTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1110[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_StretchLeftTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_StretchLeftTo");
static_assert(sizeof(LGUIBPLibrary_StretchLeftTo) == 0x000020, "Wrong size on LGUIBPLibrary_StretchLeftTo");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, Target) == 0x000000, "Member 'LGUIBPLibrary_StretchLeftTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_StretchLeftTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_StretchLeftTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_StretchLeftTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_StretchLeftTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_StretchLeftTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.StretchRightTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_StretchRightTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1111[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_StretchRightTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_StretchRightTo");
static_assert(sizeof(LGUIBPLibrary_StretchRightTo) == 0x000020, "Wrong size on LGUIBPLibrary_StretchRightTo");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, Target) == 0x000000, "Member 'LGUIBPLibrary_StretchRightTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_StretchRightTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_StretchRightTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_StretchRightTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_StretchRightTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_StretchRightTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.StretchTopTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_StretchTopTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1112[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_StretchTopTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_StretchTopTo");
static_assert(sizeof(LGUIBPLibrary_StretchTopTo) == 0x000020, "Wrong size on LGUIBPLibrary_StretchTopTo");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, Target) == 0x000000, "Member 'LGUIBPLibrary_StretchTopTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_StretchTopTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_StretchTopTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_StretchTopTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_StretchTopTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_StretchTopTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.UILocalPositionTo
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_UILocalPositionTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1113[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_UILocalPositionTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_UILocalPositionTo");
static_assert(sizeof(LGUIBPLibrary_UILocalPositionTo) == 0x000028, "Wrong size on LGUIBPLibrary_UILocalPositionTo");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, Target) == 0x000000, "Member 'LGUIBPLibrary_UILocalPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_UILocalPositionTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, Duration) == 0x000014, "Member 'LGUIBPLibrary_UILocalPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, Delay) == 0x000018, "Member 'LGUIBPLibrary_UILocalPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, Ease) == 0x00001C, "Member 'LGUIBPLibrary_UILocalPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, ReturnValue) == 0x000020, "Member 'LGUIBPLibrary_UILocalPositionTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.WidthTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_WidthTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1114[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_WidthTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_WidthTo");
static_assert(sizeof(LGUIBPLibrary_WidthTo) == 0x000020, "Wrong size on LGUIBPLibrary_WidthTo");
static_assert(offsetof(LGUIBPLibrary_WidthTo, Target) == 0x000000, "Member 'LGUIBPLibrary_WidthTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, EndValue) == 0x000008, "Member 'LGUIBPLibrary_WidthTo::EndValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_WidthTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_WidthTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_WidthTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_WidthTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.SetWorldUISceneRendering
// 0x0001 (0x0001 - 0x0000)
struct LGUIBPLibrary_SetWorldUISceneRendering final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_SetWorldUISceneRendering) == 0x000001, "Wrong alignment on LGUIBPLibrary_SetWorldUISceneRendering");
static_assert(sizeof(LGUIBPLibrary_SetWorldUISceneRendering) == 0x000001, "Wrong size on LGUIBPLibrary_SetWorldUISceneRendering");
static_assert(offsetof(LGUIBPLibrary_SetWorldUISceneRendering, Value) == 0x000000, "Member 'LGUIBPLibrary_SetWorldUISceneRendering::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualClipType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualClipType final
{
public:
	ELGUICanvasClipType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualClipType) == 0x000001, "Wrong alignment on LGUICanvas_GetActualClipType");
static_assert(sizeof(LGUICanvas_GetActualClipType) == 0x000001, "Wrong size on LGUICanvas_GetActualClipType");
static_assert(offsetof(LGUICanvas_GetActualClipType, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualClipType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualDynamicPixelsPerUnit
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetActualDynamicPixelsPerUnit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualDynamicPixelsPerUnit) == 0x000004, "Wrong alignment on LGUICanvas_GetActualDynamicPixelsPerUnit");
static_assert(sizeof(LGUICanvas_GetActualDynamicPixelsPerUnit) == 0x000004, "Wrong size on LGUICanvas_GetActualDynamicPixelsPerUnit");
static_assert(offsetof(LGUICanvas_GetActualDynamicPixelsPerUnit, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualDynamicPixelsPerUnit::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualOnlyOwnerSee
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualOnlyOwnerSee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualOnlyOwnerSee) == 0x000001, "Wrong alignment on LGUICanvas_GetActualOnlyOwnerSee");
static_assert(sizeof(LGUICanvas_GetActualOnlyOwnerSee) == 0x000001, "Wrong size on LGUICanvas_GetActualOnlyOwnerSee");
static_assert(offsetof(LGUICanvas_GetActualOnlyOwnerSee, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualOnlyOwnerSee::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualOwnerNoSee
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualOwnerNoSee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualOwnerNoSee) == 0x000001, "Wrong alignment on LGUICanvas_GetActualOwnerNoSee");
static_assert(sizeof(LGUICanvas_GetActualOwnerNoSee) == 0x000001, "Wrong size on LGUICanvas_GetActualOwnerNoSee");
static_assert(offsetof(LGUICanvas_GetActualOwnerNoSee, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualOwnerNoSee::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualPixelPerfect
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualPixelPerfect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualPixelPerfect) == 0x000001, "Wrong alignment on LGUICanvas_GetActualPixelPerfect");
static_assert(sizeof(LGUICanvas_GetActualPixelPerfect) == 0x000001, "Wrong size on LGUICanvas_GetActualPixelPerfect");
static_assert(offsetof(LGUICanvas_GetActualPixelPerfect, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualPixelPerfect::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualRenderMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualRenderMode final
{
public:
	ELGUIRenderMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualRenderMode) == 0x000001, "Wrong alignment on LGUICanvas_GetActualRenderMode");
static_assert(sizeof(LGUICanvas_GetActualRenderMode) == 0x000001, "Wrong size on LGUICanvas_GetActualRenderMode");
static_assert(offsetof(LGUICanvas_GetActualRenderMode, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualRenderMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetActualRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualRenderTarget) == 0x000008, "Wrong alignment on LGUICanvas_GetActualRenderTarget");
static_assert(sizeof(LGUICanvas_GetActualRenderTarget) == 0x000008, "Wrong size on LGUICanvas_GetActualRenderTarget");
static_assert(offsetof(LGUICanvas_GetActualRenderTarget, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualRenderTarget::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualTextRGBSplitGlitch
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualTextRGBSplitGlitch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualTextRGBSplitGlitch) == 0x000001, "Wrong alignment on LGUICanvas_GetActualTextRGBSplitGlitch");
static_assert(sizeof(LGUICanvas_GetActualTextRGBSplitGlitch) == 0x000001, "Wrong size on LGUICanvas_GetActualTextRGBSplitGlitch");
static_assert(offsetof(LGUICanvas_GetActualTextRGBSplitGlitch, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualTextRGBSplitGlitch::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipRectMax
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetClipRectMax final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipRectMax) == 0x000004, "Wrong alignment on LGUICanvas_GetClipRectMax");
static_assert(sizeof(LGUICanvas_GetClipRectMax) == 0x000008, "Wrong size on LGUICanvas_GetClipRectMax");
static_assert(offsetof(LGUICanvas_GetClipRectMax, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipRectMax::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipRectMin
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetClipRectMin final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipRectMin) == 0x000004, "Wrong alignment on LGUICanvas_GetClipRectMin");
static_assert(sizeof(LGUICanvas_GetClipRectMin) == 0x000008, "Wrong size on LGUICanvas_GetClipRectMin");
static_assert(offsetof(LGUICanvas_GetClipRectMin, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipRectMin::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireNormal
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireNormal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireNormal) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireNormal");
static_assert(sizeof(LGUICanvas_GetRequireNormal) == 0x000001, "Wrong size on LGUICanvas_GetRequireNormal");
static_assert(offsetof(LGUICanvas_GetRequireNormal, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireNormal::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireTangent
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireTangent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireTangent) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireTangent");
static_assert(sizeof(LGUICanvas_GetRequireTangent) == 0x000001, "Wrong size on LGUICanvas_GetRequireTangent");
static_assert(offsetof(LGUICanvas_GetRequireTangent, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireTangent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireUV1
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireUV1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireUV1) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireUV1");
static_assert(sizeof(LGUICanvas_GetRequireUV1) == 0x000001, "Wrong size on LGUICanvas_GetRequireUV1");
static_assert(offsetof(LGUICanvas_GetRequireUV1, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireUV1::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireUV2
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireUV2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireUV2) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireUV2");
static_assert(sizeof(LGUICanvas_GetRequireUV2) == 0x000001, "Wrong size on LGUICanvas_GetRequireUV2");
static_assert(offsetof(LGUICanvas_GetRequireUV2, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireUV2::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireUV3
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireUV3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireUV3) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireUV3");
static_assert(sizeof(LGUICanvas_GetRequireUV3) == 0x000001, "Wrong size on LGUICanvas_GetRequireUV3");
static_assert(offsetof(LGUICanvas_GetRequireUV3, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireUV3::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRootCanvas
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetRootCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRootCanvas) == 0x000008, "Wrong alignment on LGUICanvas_GetRootCanvas");
static_assert(sizeof(LGUICanvas_GetRootCanvas) == 0x000008, "Wrong size on LGUICanvas_GetRootCanvas");
static_assert(offsetof(LGUICanvas_GetRootCanvas, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRootCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.IsUIVisible
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_IsUIVisible final
{
public:
	class UUIItem*                                HitUI;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1120[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvas_IsUIVisible) == 0x000008, "Wrong alignment on LGUICanvas_IsUIVisible");
static_assert(sizeof(LGUICanvas_IsUIVisible) == 0x000010, "Wrong size on LGUICanvas_IsUIVisible");
static_assert(offsetof(LGUICanvas_IsUIVisible, HitUI) == 0x000000, "Member 'LGUICanvas_IsUIVisible::HitUI' has a wrong offset!");
static_assert(offsetof(LGUICanvas_IsUIVisible, ReturnValue) == 0x000008, "Member 'LGUICanvas_IsUIVisible::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetClipTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetClipTexture final
{
public:
	class UTexture*                               NewTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetClipTexture) == 0x000008, "Wrong alignment on LGUICanvas_SetClipTexture");
static_assert(sizeof(LGUICanvas_SetClipTexture) == 0x000008, "Wrong size on LGUICanvas_SetClipTexture");
static_assert(offsetof(LGUICanvas_SetClipTexture, NewTexture) == 0x000000, "Member 'LGUICanvas_SetClipTexture::NewTexture' has a wrong offset!");

// Function LGUI.LGUICanvas.SetClipTextureAlpha
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_SetClipTextureAlpha final
{
public:
	float                                         NewAlpha;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetClipTextureAlpha) == 0x000004, "Wrong alignment on LGUICanvas_SetClipTextureAlpha");
static_assert(sizeof(LGUICanvas_SetClipTextureAlpha) == 0x000004, "Wrong size on LGUICanvas_SetClipTextureAlpha");
static_assert(offsetof(LGUICanvas_SetClipTextureAlpha, NewAlpha) == 0x000000, "Member 'LGUICanvas_SetClipTextureAlpha::NewAlpha' has a wrong offset!");

// Function LGUI.LGUICanvas.SetClipType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetClipType final
{
public:
	ELGUICanvasClipType                           NewClipType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetClipType) == 0x000001, "Wrong alignment on LGUICanvas_SetClipType");
static_assert(sizeof(LGUICanvas_SetClipType) == 0x000001, "Wrong size on LGUICanvas_SetClipType");
static_assert(offsetof(LGUICanvas_SetClipType, NewClipType) == 0x000000, "Member 'LGUICanvas_SetClipType::NewClipType' has a wrong offset!");

// Function LGUI.LGUICanvas.SetDynamicPixelsPerUnit
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_SetDynamicPixelsPerUnit final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetDynamicPixelsPerUnit) == 0x000004, "Wrong alignment on LGUICanvas_SetDynamicPixelsPerUnit");
static_assert(sizeof(LGUICanvas_SetDynamicPixelsPerUnit) == 0x000004, "Wrong size on LGUICanvas_SetDynamicPixelsPerUnit");
static_assert(offsetof(LGUICanvas_SetDynamicPixelsPerUnit, NewValue) == 0x000000, "Member 'LGUICanvas_SetDynamicPixelsPerUnit::NewValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetInheriRectClip
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetInheriRectClip final
{
public:
	bool                                          NewBool;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetInheriRectClip) == 0x000001, "Wrong alignment on LGUICanvas_SetInheriRectClip");
static_assert(sizeof(LGUICanvas_SetInheriRectClip) == 0x000001, "Wrong size on LGUICanvas_SetInheriRectClip");
static_assert(offsetof(LGUICanvas_SetInheriRectClip, NewBool) == 0x000000, "Member 'LGUICanvas_SetInheriRectClip::NewBool' has a wrong offset!");

// Function LGUI.LGUICanvas.SetOnlyOwnerSee
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetOnlyOwnerSee final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetOnlyOwnerSee) == 0x000001, "Wrong alignment on LGUICanvas_SetOnlyOwnerSee");
static_assert(sizeof(LGUICanvas_SetOnlyOwnerSee) == 0x000001, "Wrong size on LGUICanvas_SetOnlyOwnerSee");
static_assert(offsetof(LGUICanvas_SetOnlyOwnerSee, Value) == 0x000000, "Member 'LGUICanvas_SetOnlyOwnerSee::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetOwnerNoSee
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetOwnerNoSee final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetOwnerNoSee) == 0x000001, "Wrong alignment on LGUICanvas_SetOwnerNoSee");
static_assert(sizeof(LGUICanvas_SetOwnerNoSee) == 0x000001, "Wrong size on LGUICanvas_SetOwnerNoSee");
static_assert(offsetof(LGUICanvas_SetOwnerNoSee, Value) == 0x000000, "Member 'LGUICanvas_SetOwnerNoSee::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetPixelPerfect
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetPixelPerfect final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetPixelPerfect) == 0x000001, "Wrong alignment on LGUICanvas_SetPixelPerfect");
static_assert(sizeof(LGUICanvas_SetPixelPerfect) == 0x000001, "Wrong size on LGUICanvas_SetPixelPerfect");
static_assert(offsetof(LGUICanvas_SetPixelPerfect, Value) == 0x000000, "Member 'LGUICanvas_SetPixelPerfect::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetProjectionParameters
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_SetProjectionParameters final
{
public:
	ECameraProjectionMode                         InProjectionType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1121[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InFovAngle;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InNearClipPlane;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFarClipPlane;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetProjectionParameters) == 0x000004, "Wrong alignment on LGUICanvas_SetProjectionParameters");
static_assert(sizeof(LGUICanvas_SetProjectionParameters) == 0x000010, "Wrong size on LGUICanvas_SetProjectionParameters");
static_assert(offsetof(LGUICanvas_SetProjectionParameters, InProjectionType) == 0x000000, "Member 'LGUICanvas_SetProjectionParameters::InProjectionType' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetProjectionParameters, InFovAngle) == 0x000004, "Member 'LGUICanvas_SetProjectionParameters::InFovAngle' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetProjectionParameters, InNearClipPlane) == 0x000008, "Member 'LGUICanvas_SetProjectionParameters::InNearClipPlane' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetProjectionParameters, InFarClipPlane) == 0x00000C, "Member 'LGUICanvas_SetProjectionParameters::InFarClipPlane' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRectClipFeather
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetRectClipFeather final
{
public:
	struct FVector2D                              NewFeather;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRectClipFeather) == 0x000004, "Wrong alignment on LGUICanvas_SetRectClipFeather");
static_assert(sizeof(LGUICanvas_SetRectClipFeather) == 0x000008, "Wrong size on LGUICanvas_SetRectClipFeather");
static_assert(offsetof(LGUICanvas_SetRectClipFeather, NewFeather) == 0x000000, "Member 'LGUICanvas_SetRectClipFeather::NewFeather' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRectClipOffset
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_SetRectClipOffset final
{
public:
	struct FMargin                                NewOffset;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRectClipOffset) == 0x000004, "Wrong alignment on LGUICanvas_SetRectClipOffset");
static_assert(sizeof(LGUICanvas_SetRectClipOffset) == 0x000010, "Wrong size on LGUICanvas_SetRectClipOffset");
static_assert(offsetof(LGUICanvas_SetRectClipOffset, NewOffset) == 0x000000, "Member 'LGUICanvas_SetRectClipOffset::NewOffset' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRenderMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetRenderMode final
{
public:
	ELGUIRenderMode                               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRenderMode) == 0x000001, "Wrong alignment on LGUICanvas_SetRenderMode");
static_assert(sizeof(LGUICanvas_SetRenderMode) == 0x000001, "Wrong size on LGUICanvas_SetRenderMode");
static_assert(offsetof(LGUICanvas_SetRenderMode, Value) == 0x000000, "Member 'LGUICanvas_SetRenderMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRenderTarget) == 0x000008, "Wrong alignment on LGUICanvas_SetRenderTarget");
static_assert(sizeof(LGUICanvas_SetRenderTarget) == 0x000008, "Wrong size on LGUICanvas_SetRenderTarget");
static_assert(offsetof(LGUICanvas_SetRenderTarget, Value) == 0x000000, "Member 'LGUICanvas_SetRenderTarget::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetSortOrder
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetSortOrder final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PropagateToChildrenCanvas;                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1122[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvas_SetSortOrder) == 0x000004, "Wrong alignment on LGUICanvas_SetSortOrder");
static_assert(sizeof(LGUICanvas_SetSortOrder) == 0x000008, "Wrong size on LGUICanvas_SetSortOrder");
static_assert(offsetof(LGUICanvas_SetSortOrder, NewValue) == 0x000000, "Member 'LGUICanvas_SetSortOrder::NewValue' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetSortOrder, PropagateToChildrenCanvas) == 0x000004, "Member 'LGUICanvas_SetSortOrder::PropagateToChildrenCanvas' has a wrong offset!");

// Function LGUI.LGUICanvas.SetSortOrderToHighestOfHierarchy
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetSortOrderToHighestOfHierarchy final
{
public:
	bool                                          PropagateToChildrenCanvas;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetSortOrderToHighestOfHierarchy) == 0x000001, "Wrong alignment on LGUICanvas_SetSortOrderToHighestOfHierarchy");
static_assert(sizeof(LGUICanvas_SetSortOrderToHighestOfHierarchy) == 0x000001, "Wrong size on LGUICanvas_SetSortOrderToHighestOfHierarchy");
static_assert(offsetof(LGUICanvas_SetSortOrderToHighestOfHierarchy, PropagateToChildrenCanvas) == 0x000000, "Member 'LGUICanvas_SetSortOrderToHighestOfHierarchy::PropagateToChildrenCanvas' has a wrong offset!");

// Function LGUI.LGUICanvas.SetTextRGBSplitGlitch
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetTextRGBSplitGlitch final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetTextRGBSplitGlitch) == 0x000001, "Wrong alignment on LGUICanvas_SetTextRGBSplitGlitch");
static_assert(sizeof(LGUICanvas_SetTextRGBSplitGlitch) == 0x000001, "Wrong size on LGUICanvas_SetTextRGBSplitGlitch");
static_assert(offsetof(LGUICanvas_SetTextRGBSplitGlitch, Value) == 0x000000, "Member 'LGUICanvas_SetTextRGBSplitGlitch::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipFeather
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetClipFeather final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipFeather) == 0x000004, "Wrong alignment on LGUICanvas_GetClipFeather");
static_assert(sizeof(LGUICanvas_GetClipFeather) == 0x000008, "Wrong size on LGUICanvas_GetClipFeather");
static_assert(offsetof(LGUICanvas_GetClipFeather, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipFeather::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetClipTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipTexture) == 0x000008, "Wrong alignment on LGUICanvas_GetClipTexture");
static_assert(sizeof(LGUICanvas_GetClipTexture) == 0x000008, "Wrong size on LGUICanvas_GetClipTexture");
static_assert(offsetof(LGUICanvas_GetClipTexture, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipTextureAlpha
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetClipTextureAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipTextureAlpha) == 0x000004, "Wrong alignment on LGUICanvas_GetClipTextureAlpha");
static_assert(sizeof(LGUICanvas_GetClipTextureAlpha) == 0x000004, "Wrong size on LGUICanvas_GetClipTextureAlpha");
static_assert(offsetof(LGUICanvas_GetClipTextureAlpha, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipTextureAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetClipType final
{
public:
	ELGUICanvasClipType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipType) == 0x000001, "Wrong alignment on LGUICanvas_GetClipType");
static_assert(sizeof(LGUICanvas_GetClipType) == 0x000001, "Wrong size on LGUICanvas_GetClipType");
static_assert(offsetof(LGUICanvas_GetClipType, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetDynamicPixelsPerUnit
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetDynamicPixelsPerUnit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetDynamicPixelsPerUnit) == 0x000004, "Wrong alignment on LGUICanvas_GetDynamicPixelsPerUnit");
static_assert(sizeof(LGUICanvas_GetDynamicPixelsPerUnit) == 0x000004, "Wrong size on LGUICanvas_GetDynamicPixelsPerUnit");
static_assert(offsetof(LGUICanvas_GetDynamicPixelsPerUnit, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetDynamicPixelsPerUnit::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetInheritRectClip
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetInheritRectClip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetInheritRectClip) == 0x000001, "Wrong alignment on LGUICanvas_GetInheritRectClip");
static_assert(sizeof(LGUICanvas_GetInheritRectClip) == 0x000001, "Wrong size on LGUICanvas_GetInheritRectClip");
static_assert(offsetof(LGUICanvas_GetInheritRectClip, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetInheritRectClip::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetOnlyOwnerSee
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetOnlyOwnerSee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetOnlyOwnerSee) == 0x000001, "Wrong alignment on LGUICanvas_GetOnlyOwnerSee");
static_assert(sizeof(LGUICanvas_GetOnlyOwnerSee) == 0x000001, "Wrong size on LGUICanvas_GetOnlyOwnerSee");
static_assert(offsetof(LGUICanvas_GetOnlyOwnerSee, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetOnlyOwnerSee::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetOwnerNoSee
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetOwnerNoSee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetOwnerNoSee) == 0x000001, "Wrong alignment on LGUICanvas_GetOwnerNoSee");
static_assert(sizeof(LGUICanvas_GetOwnerNoSee) == 0x000001, "Wrong size on LGUICanvas_GetOwnerNoSee");
static_assert(offsetof(LGUICanvas_GetOwnerNoSee, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetOwnerNoSee::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetPixelPerfect
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetPixelPerfect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetPixelPerfect) == 0x000001, "Wrong alignment on LGUICanvas_GetPixelPerfect");
static_assert(sizeof(LGUICanvas_GetPixelPerfect) == 0x000001, "Wrong size on LGUICanvas_GetPixelPerfect");
static_assert(offsetof(LGUICanvas_GetPixelPerfect, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetPixelPerfect::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRenderMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRenderMode final
{
public:
	ELGUIRenderMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRenderMode) == 0x000001, "Wrong alignment on LGUICanvas_GetRenderMode");
static_assert(sizeof(LGUICanvas_GetRenderMode) == 0x000001, "Wrong size on LGUICanvas_GetRenderMode");
static_assert(offsetof(LGUICanvas_GetRenderMode, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRenderMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRenderTarget) == 0x000008, "Wrong alignment on LGUICanvas_GetRenderTarget");
static_assert(sizeof(LGUICanvas_GetRenderTarget) == 0x000008, "Wrong size on LGUICanvas_GetRenderTarget");
static_assert(offsetof(LGUICanvas_GetRenderTarget, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.IsPostTickUpdate
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_IsPostTickUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_IsPostTickUpdate) == 0x000001, "Wrong alignment on LGUICanvas_IsPostTickUpdate");
static_assert(sizeof(LGUICanvas_IsPostTickUpdate) == 0x000001, "Wrong size on LGUICanvas_IsPostTickUpdate");
static_assert(offsetof(LGUICanvas_IsPostTickUpdate, ReturnValue) == 0x000000, "Member 'LGUICanvas_IsPostTickUpdate::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetMatchFromWidthToHeight
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_GetMatchFromWidthToHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetMatchFromWidthToHeight) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetMatchFromWidthToHeight");
static_assert(sizeof(LGUICanvasScaler_GetMatchFromWidthToHeight) == 0x000004, "Wrong size on LGUICanvasScaler_GetMatchFromWidthToHeight");
static_assert(offsetof(LGUICanvasScaler_GetMatchFromWidthToHeight, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetMatchFromWidthToHeight::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetReferenceResolution
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvasScaler_GetReferenceResolution final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetReferenceResolution) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetReferenceResolution");
static_assert(sizeof(LGUICanvasScaler_GetReferenceResolution) == 0x000008, "Wrong size on LGUICanvasScaler_GetReferenceResolution");
static_assert(offsetof(LGUICanvasScaler_GetReferenceResolution, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetReferenceResolution::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetScreenMatchMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_GetScreenMatchMode final
{
public:
	ELGUIScreenMatchMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetScreenMatchMode) == 0x000001, "Wrong alignment on LGUICanvasScaler_GetScreenMatchMode");
static_assert(sizeof(LGUICanvasScaler_GetScreenMatchMode) == 0x000001, "Wrong size on LGUICanvasScaler_GetScreenMatchMode");
static_assert(offsetof(LGUICanvasScaler_GetScreenMatchMode, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetScreenMatchMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetUIScaleMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_GetUIScaleMode final
{
public:
	ELGUIScaleMode                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetUIScaleMode) == 0x000001, "Wrong alignment on LGUICanvasScaler_GetUIScaleMode");
static_assert(sizeof(LGUICanvasScaler_GetUIScaleMode) == 0x000001, "Wrong size on LGUICanvasScaler_GetUIScaleMode");
static_assert(offsetof(LGUICanvasScaler_GetUIScaleMode, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetUIScaleMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetFarClipPlane
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_SetFarClipPlane final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetFarClipPlane) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetFarClipPlane");
static_assert(sizeof(LGUICanvasScaler_SetFarClipPlane) == 0x000004, "Wrong size on LGUICanvasScaler_SetFarClipPlane");
static_assert(offsetof(LGUICanvasScaler_SetFarClipPlane, Value) == 0x000000, "Member 'LGUICanvasScaler_SetFarClipPlane::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetFovAngle
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_SetFovAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetFovAngle) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetFovAngle");
static_assert(sizeof(LGUICanvasScaler_SetFovAngle) == 0x000004, "Wrong size on LGUICanvasScaler_SetFovAngle");
static_assert(offsetof(LGUICanvasScaler_SetFovAngle, Value) == 0x000000, "Member 'LGUICanvasScaler_SetFovAngle::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetMatchFromWidthToHeight
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_SetMatchFromWidthToHeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetMatchFromWidthToHeight) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetMatchFromWidthToHeight");
static_assert(sizeof(LGUICanvasScaler_SetMatchFromWidthToHeight) == 0x000004, "Wrong size on LGUICanvasScaler_SetMatchFromWidthToHeight");
static_assert(offsetof(LGUICanvasScaler_SetMatchFromWidthToHeight, Value) == 0x000000, "Member 'LGUICanvasScaler_SetMatchFromWidthToHeight::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetNearClipPlane
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_SetNearClipPlane final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetNearClipPlane) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetNearClipPlane");
static_assert(sizeof(LGUICanvasScaler_SetNearClipPlane) == 0x000004, "Wrong size on LGUICanvasScaler_SetNearClipPlane");
static_assert(offsetof(LGUICanvasScaler_SetNearClipPlane, Value) == 0x000000, "Member 'LGUICanvasScaler_SetNearClipPlane::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetProjectionType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_SetProjectionType final
{
public:
	ECameraProjectionMode                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetProjectionType) == 0x000001, "Wrong alignment on LGUICanvasScaler_SetProjectionType");
static_assert(sizeof(LGUICanvasScaler_SetProjectionType) == 0x000001, "Wrong size on LGUICanvasScaler_SetProjectionType");
static_assert(offsetof(LGUICanvasScaler_SetProjectionType, Value) == 0x000000, "Member 'LGUICanvasScaler_SetProjectionType::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetReferenceResolution
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvasScaler_SetReferenceResolution final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetReferenceResolution) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetReferenceResolution");
static_assert(sizeof(LGUICanvasScaler_SetReferenceResolution) == 0x000008, "Wrong size on LGUICanvasScaler_SetReferenceResolution");
static_assert(offsetof(LGUICanvasScaler_SetReferenceResolution, Value) == 0x000000, "Member 'LGUICanvasScaler_SetReferenceResolution::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetScreenMatchMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_SetScreenMatchMode final
{
public:
	ELGUIScreenMatchMode                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetScreenMatchMode) == 0x000001, "Wrong alignment on LGUICanvasScaler_SetScreenMatchMode");
static_assert(sizeof(LGUICanvasScaler_SetScreenMatchMode) == 0x000001, "Wrong size on LGUICanvasScaler_SetScreenMatchMode");
static_assert(offsetof(LGUICanvasScaler_SetScreenMatchMode, Value) == 0x000000, "Member 'LGUICanvasScaler_SetScreenMatchMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetUIScaleMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_SetUIScaleMode final
{
public:
	ELGUIScaleMode                                Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetUIScaleMode) == 0x000001, "Wrong alignment on LGUICanvasScaler_SetUIScaleMode");
static_assert(sizeof(LGUICanvasScaler_SetUIScaleMode) == 0x000001, "Wrong size on LGUICanvasScaler_SetUIScaleMode");
static_assert(offsetof(LGUICanvasScaler_SetUIScaleMode, Value) == 0x000000, "Member 'LGUICanvasScaler_SetUIScaleMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.ConvertPositionFromLGUICanvasToViewport
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport) == 0x000004, "Wrong alignment on LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport");
static_assert(sizeof(LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport) == 0x000010, "Wrong size on LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport");
static_assert(offsetof(LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport, Position) == 0x000000, "Member 'LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport::Position' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport, ReturnValue) == 0x000008, "Member 'LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.ConvertPositionFromViewportToLGUICanvas
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas) == 0x000004, "Wrong alignment on LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas");
static_assert(sizeof(LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas) == 0x000010, "Wrong size on LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas");
static_assert(offsetof(LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas, Position) == 0x000000, "Member 'LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas::Position' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas, ReturnValue) == 0x000008, "Member 'LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetFarClipPlane
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_GetFarClipPlane final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetFarClipPlane) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetFarClipPlane");
static_assert(sizeof(LGUICanvasScaler_GetFarClipPlane) == 0x000004, "Wrong size on LGUICanvasScaler_GetFarClipPlane");
static_assert(offsetof(LGUICanvasScaler_GetFarClipPlane, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetFarClipPlane::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetFovAngle
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_GetFovAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetFovAngle) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetFovAngle");
static_assert(sizeof(LGUICanvasScaler_GetFovAngle) == 0x000004, "Wrong size on LGUICanvasScaler_GetFovAngle");
static_assert(offsetof(LGUICanvasScaler_GetFovAngle, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetFovAngle::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetNearClipPlane
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_GetNearClipPlane final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetNearClipPlane) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetNearClipPlane");
static_assert(sizeof(LGUICanvasScaler_GetNearClipPlane) == 0x000004, "Wrong size on LGUICanvasScaler_GetNearClipPlane");
static_assert(offsetof(LGUICanvasScaler_GetNearClipPlane, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetNearClipPlane::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetProjectionType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_GetProjectionType final
{
public:
	ECameraProjectionMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetProjectionType) == 0x000001, "Wrong alignment on LGUICanvasScaler_GetProjectionType");
static_assert(sizeof(LGUICanvasScaler_GetProjectionType) == 0x000001, "Wrong size on LGUICanvasScaler_GetProjectionType");
static_assert(offsetof(LGUICanvasScaler_GetProjectionType, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetProjectionType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.Project3DToScreen
// 0x0018 (0x0018 - 0x0000)
struct LGUICanvasScaler_Project3DToScreen final
{
public:
	struct FVector                                Position3D;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPosition2D;                                     // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1128[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvasScaler_Project3DToScreen) == 0x000004, "Wrong alignment on LGUICanvasScaler_Project3DToScreen");
static_assert(sizeof(LGUICanvasScaler_Project3DToScreen) == 0x000018, "Wrong size on LGUICanvasScaler_Project3DToScreen");
static_assert(offsetof(LGUICanvasScaler_Project3DToScreen, Position3D) == 0x000000, "Member 'LGUICanvasScaler_Project3DToScreen::Position3D' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_Project3DToScreen, OutPosition2D) == 0x00000C, "Member 'LGUICanvasScaler_Project3DToScreen::OutPosition2D' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_Project3DToScreen, ReturnValue) == 0x000014, "Member 'LGUICanvasScaler_Project3DToScreen::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAllAttachUIChildren
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetAllAttachUIChildren final
{
public:
	TArray<class UUIItem*>                        OutArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAllAttachUIChildren) == 0x000008, "Wrong alignment on UIItem_GetAllAttachUIChildren");
static_assert(sizeof(UIItem_GetAllAttachUIChildren) == 0x000010, "Wrong size on UIItem_GetAllAttachUIChildren");
static_assert(offsetof(UIItem_GetAllAttachUIChildren, OutArray) == 0x000000, "Member 'UIItem_GetAllAttachUIChildren::OutArray' has a wrong offset!");

// Function LGUI.UIItem.GetLGUISpaceAbsolutePosition
// 0x000C (0x000C - 0x0000)
struct UIItem_GetLGUISpaceAbsolutePosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLGUISpaceAbsolutePosition) == 0x000004, "Wrong alignment on UIItem_GetLGUISpaceAbsolutePosition");
static_assert(sizeof(UIItem_GetLGUISpaceAbsolutePosition) == 0x00000C, "Wrong size on UIItem_GetLGUISpaceAbsolutePosition");
static_assert(offsetof(UIItem_GetLGUISpaceAbsolutePosition, ReturnValue) == 0x000000, "Member 'UIItem_GetLGUISpaceAbsolutePosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLGUISpaceAbsolutePositionByPivot
// 0x0014 (0x0014 - 0x0000)
struct UIItem_GetLGUISpaceAbsolutePositionByPivot final
{
public:
	struct FVector2D                              Pivot;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLGUISpaceAbsolutePositionByPivot) == 0x000004, "Wrong alignment on UIItem_GetLGUISpaceAbsolutePositionByPivot");
static_assert(sizeof(UIItem_GetLGUISpaceAbsolutePositionByPivot) == 0x000014, "Wrong size on UIItem_GetLGUISpaceAbsolutePositionByPivot");
static_assert(offsetof(UIItem_GetLGUISpaceAbsolutePositionByPivot, Pivot) == 0x000000, "Member 'UIItem_GetLGUISpaceAbsolutePositionByPivot::Pivot' has a wrong offset!");
static_assert(offsetof(UIItem_GetLGUISpaceAbsolutePositionByPivot, ReturnValue) == 0x000008, "Member 'UIItem_GetLGUISpaceAbsolutePositionByPivot::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLGUISpaceCenterAbsolutePosition
// 0x000C (0x000C - 0x0000)
struct UIItem_GetLGUISpaceCenterAbsolutePosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLGUISpaceCenterAbsolutePosition) == 0x000004, "Wrong alignment on UIItem_GetLGUISpaceCenterAbsolutePosition");
static_assert(sizeof(UIItem_GetLGUISpaceCenterAbsolutePosition) == 0x00000C, "Wrong size on UIItem_GetLGUISpaceCenterAbsolutePosition");
static_assert(offsetof(UIItem_GetLGUISpaceCenterAbsolutePosition, ReturnValue) == 0x000000, "Member 'UIItem_GetLGUISpaceCenterAbsolutePosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetOverlapWith
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetOverlapWith final
{
public:
	class UUIItem*                                UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1136[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIItem_GetOverlapWith) == 0x000008, "Wrong alignment on UIItem_GetOverlapWith");
static_assert(sizeof(UIItem_GetOverlapWith) == 0x000010, "Wrong size on UIItem_GetOverlapWith");
static_assert(offsetof(UIItem_GetOverlapWith, UIItem) == 0x000000, "Member 'UIItem_GetOverlapWith::UIItem' has a wrong offset!");
static_assert(offsetof(UIItem_GetOverlapWith, ReturnValue) == 0x000008, "Member 'UIItem_GetOverlapWith::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetParentAsUIItem
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetParentAsUIItem final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetParentAsUIItem) == 0x000008, "Wrong alignment on UIItem_GetParentAsUIItem");
static_assert(sizeof(UIItem_GetParentAsUIItem) == 0x000008, "Wrong size on UIItem_GetParentAsUIItem");
static_assert(offsetof(UIItem_GetParentAsUIItem, ReturnValue) == 0x000000, "Member 'UIItem_GetParentAsUIItem::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetPositionInScreen
// 0x000C (0x000C - 0x0000)
struct UIItem_GetPositionInScreen final
{
public:
	bool                                          bIsScaledByDPI;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1137[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetPositionInScreen) == 0x000004, "Wrong alignment on UIItem_GetPositionInScreen");
static_assert(sizeof(UIItem_GetPositionInScreen) == 0x00000C, "Wrong size on UIItem_GetPositionInScreen");
static_assert(offsetof(UIItem_GetPositionInScreen, bIsScaledByDPI) == 0x000000, "Member 'UIItem_GetPositionInScreen::bIsScaledByDPI' has a wrong offset!");
static_assert(offsetof(UIItem_GetPositionInScreen, ReturnValue) == 0x000004, "Member 'UIItem_GetPositionInScreen::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetPositionInViewPort
// 0x000C (0x000C - 0x0000)
struct UIItem_GetPositionInViewPort final
{
public:
	bool                                          bIsScaledByDPI;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1138[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetPositionInViewPort) == 0x000004, "Wrong alignment on UIItem_GetPositionInViewPort");
static_assert(sizeof(UIItem_GetPositionInViewPort) == 0x00000C, "Wrong size on UIItem_GetPositionInViewPort");
static_assert(offsetof(UIItem_GetPositionInViewPort, bIsScaledByDPI) == 0x000000, "Member 'UIItem_GetPositionInViewPort::bIsScaledByDPI' has a wrong offset!");
static_assert(offsetof(UIItem_GetPositionInViewPort, ReturnValue) == 0x000004, "Member 'UIItem_GetPositionInViewPort::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetRenderCanvas
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetRenderCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetRenderCanvas) == 0x000008, "Wrong alignment on UIItem_GetRenderCanvas");
static_assert(sizeof(UIItem_GetRenderCanvas) == 0x000008, "Wrong size on UIItem_GetRenderCanvas");
static_assert(offsetof(UIItem_GetRenderCanvas, ReturnValue) == 0x000000, "Member 'UIItem_GetRenderCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsRenderTargetUI
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsRenderTargetUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsRenderTargetUI) == 0x000001, "Wrong alignment on UIItem_IsRenderTargetUI");
static_assert(sizeof(UIItem_IsRenderTargetUI) == 0x000001, "Wrong size on UIItem_IsRenderTargetUI");
static_assert(offsetof(UIItem_IsRenderTargetUI, ReturnValue) == 0x000000, "Member 'UIItem_IsRenderTargetUI::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsScreenSpaceOverlayUI
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsScreenSpaceOverlayUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsScreenSpaceOverlayUI) == 0x000001, "Wrong alignment on UIItem_IsScreenSpaceOverlayUI");
static_assert(sizeof(UIItem_IsScreenSpaceOverlayUI) == 0x000001, "Wrong size on UIItem_IsScreenSpaceOverlayUI");
static_assert(offsetof(UIItem_IsScreenSpaceOverlayUI, ReturnValue) == 0x000000, "Member 'UIItem_IsScreenSpaceOverlayUI::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsWorldSpaceUI
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsWorldSpaceUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsWorldSpaceUI) == 0x000001, "Wrong alignment on UIItem_IsWorldSpaceUI");
static_assert(sizeof(UIItem_IsWorldSpaceUI) == 0x000001, "Wrong size on UIItem_IsWorldSpaceUI");
static_assert(offsetof(UIItem_IsWorldSpaceUI, ReturnValue) == 0x000000, "Member 'UIItem_IsWorldSpaceUI::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.PlayUIItemAlphaTween
// 0x000C (0x000C - 0x0000)
struct UIItem_PlayUIItemAlphaTween final
{
public:
	float                                         StartValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_PlayUIItemAlphaTween) == 0x000004, "Wrong alignment on UIItem_PlayUIItemAlphaTween");
static_assert(sizeof(UIItem_PlayUIItemAlphaTween) == 0x00000C, "Wrong size on UIItem_PlayUIItemAlphaTween");
static_assert(offsetof(UIItem_PlayUIItemAlphaTween, StartValue) == 0x000000, "Member 'UIItem_PlayUIItemAlphaTween::StartValue' has a wrong offset!");
static_assert(offsetof(UIItem_PlayUIItemAlphaTween, EndValue) == 0x000004, "Member 'UIItem_PlayUIItemAlphaTween::EndValue' has a wrong offset!");
static_assert(offsetof(UIItem_PlayUIItemAlphaTween, Duration) == 0x000008, "Member 'UIItem_PlayUIItemAlphaTween::Duration' has a wrong offset!");

// Function LGUI.UIItem.PlayUIItemScaleTween
// 0x000C (0x000C - 0x0000)
struct UIItem_PlayUIItemScaleTween final
{
public:
	float                                         StartValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_PlayUIItemScaleTween) == 0x000004, "Wrong alignment on UIItem_PlayUIItemScaleTween");
static_assert(sizeof(UIItem_PlayUIItemScaleTween) == 0x00000C, "Wrong size on UIItem_PlayUIItemScaleTween");
static_assert(offsetof(UIItem_PlayUIItemScaleTween, StartValue) == 0x000000, "Member 'UIItem_PlayUIItemScaleTween::StartValue' has a wrong offset!");
static_assert(offsetof(UIItem_PlayUIItemScaleTween, EndValue) == 0x000004, "Member 'UIItem_PlayUIItemScaleTween::EndValue' has a wrong offset!");
static_assert(offsetof(UIItem_PlayUIItemScaleTween, Duration) == 0x000008, "Member 'UIItem_PlayUIItemScaleTween::Duration' has a wrong offset!");

// Function LGUI.UIItem.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetAlpha final
{
public:
	float                                         NewAlpha;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAlpha) == 0x000004, "Wrong alignment on UIItem_SetAlpha");
static_assert(sizeof(UIItem_SetAlpha) == 0x000004, "Wrong size on UIItem_SetAlpha");
static_assert(offsetof(UIItem_SetAlpha, NewAlpha) == 0x000000, "Member 'UIItem_SetAlpha::NewAlpha' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorAlign
// 0x0002 (0x0002 - 0x0000)
struct UIItem_SetAnchorAlign final
{
public:
	EUIAnchorHorizontalAlign                      HAlign;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIAnchorVerticalAlign                        VAlign;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorAlign) == 0x000001, "Wrong alignment on UIItem_SetAnchorAlign");
static_assert(sizeof(UIItem_SetAnchorAlign) == 0x000002, "Wrong size on UIItem_SetAnchorAlign");
static_assert(offsetof(UIItem_SetAnchorAlign, HAlign) == 0x000000, "Member 'UIItem_SetAnchorAlign::HAlign' has a wrong offset!");
static_assert(offsetof(UIItem_SetAnchorAlign, VAlign) == 0x000001, "Member 'UIItem_SetAnchorAlign::VAlign' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorHAlign
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetAnchorHAlign final
{
public:
	EUIAnchorHorizontalAlign                      Align;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorHAlign) == 0x000001, "Wrong alignment on UIItem_SetAnchorHAlign");
static_assert(sizeof(UIItem_SetAnchorHAlign) == 0x000001, "Wrong size on UIItem_SetAnchorHAlign");
static_assert(offsetof(UIItem_SetAnchorHAlign, Align) == 0x000000, "Member 'UIItem_SetAnchorHAlign::Align' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorOffset
// 0x0008 (0x0008 - 0x0000)
struct UIItem_SetAnchorOffset final
{
public:
	struct FVector2D                              NewOffset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorOffset) == 0x000004, "Wrong alignment on UIItem_SetAnchorOffset");
static_assert(sizeof(UIItem_SetAnchorOffset) == 0x000008, "Wrong size on UIItem_SetAnchorOffset");
static_assert(offsetof(UIItem_SetAnchorOffset, NewOffset) == 0x000000, "Member 'UIItem_SetAnchorOffset::NewOffset' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorOffsetX
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetAnchorOffsetX final
{
public:
	float                                         NewOffset;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorOffsetX) == 0x000004, "Wrong alignment on UIItem_SetAnchorOffsetX");
static_assert(sizeof(UIItem_SetAnchorOffsetX) == 0x000004, "Wrong size on UIItem_SetAnchorOffsetX");
static_assert(offsetof(UIItem_SetAnchorOffsetX, NewOffset) == 0x000000, "Member 'UIItem_SetAnchorOffsetX::NewOffset' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorOffsetY
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetAnchorOffsetY final
{
public:
	float                                         NewOffset;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorOffsetY) == 0x000004, "Wrong alignment on UIItem_SetAnchorOffsetY");
static_assert(sizeof(UIItem_SetAnchorOffsetY) == 0x000004, "Wrong size on UIItem_SetAnchorOffsetY");
static_assert(offsetof(UIItem_SetAnchorOffsetY, NewOffset) == 0x000000, "Member 'UIItem_SetAnchorOffsetY::NewOffset' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorVAlign
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetAnchorVAlign final
{
public:
	EUIAnchorVerticalAlign                        Align;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorVAlign) == 0x000001, "Wrong alignment on UIItem_SetAnchorVAlign");
static_assert(sizeof(UIItem_SetAnchorVAlign) == 0x000001, "Wrong size on UIItem_SetAnchorVAlign");
static_assert(offsetof(UIItem_SetAnchorVAlign, Align) == 0x000000, "Member 'UIItem_SetAnchorVAlign::Align' has a wrong offset!");

// Function LGUI.UIItem.SetBubbleUpToParent
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetBubbleUpToParent final
{
public:
	bool                                          NewBool;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetBubbleUpToParent) == 0x000001, "Wrong alignment on UIItem_SetBubbleUpToParent");
static_assert(sizeof(UIItem_SetBubbleUpToParent) == 0x000001, "Wrong size on UIItem_SetBubbleUpToParent");
static_assert(offsetof(UIItem_SetBubbleUpToParent, NewBool) == 0x000000, "Member 'UIItem_SetBubbleUpToParent::NewBool' has a wrong offset!");

// Function LGUI.UIItem.SetChangeColor
// 0x0008 (0x0008 - 0x0000)
struct UIItem_SetChangeColor final
{
public:
	bool                                          bUseChangeColor;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1139[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 NewColor;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetChangeColor) == 0x000004, "Wrong alignment on UIItem_SetChangeColor");
static_assert(sizeof(UIItem_SetChangeColor) == 0x000008, "Wrong size on UIItem_SetChangeColor");
static_assert(offsetof(UIItem_SetChangeColor, bUseChangeColor) == 0x000000, "Member 'UIItem_SetChangeColor::bUseChangeColor' has a wrong offset!");
static_assert(offsetof(UIItem_SetChangeColor, NewColor) == 0x000004, "Member 'UIItem_SetChangeColor::NewColor' has a wrong offset!");

// Function LGUI.UIItem.SetColor
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetColor) == 0x000004, "Wrong alignment on UIItem_SetColor");
static_assert(sizeof(UIItem_SetColor) == 0x000004, "Wrong size on UIItem_SetColor");
static_assert(offsetof(UIItem_SetColor, NewColor) == 0x000000, "Member 'UIItem_SetColor::NewColor' has a wrong offset!");

// Function LGUI.UIItem.SetDepth
// 0x0008 (0x0008 - 0x0000)
struct UIItem_SetDepth final
{
public:
	int32                                         Depth;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PropagateToChildren;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIItem_SetDepth) == 0x000004, "Wrong alignment on UIItem_SetDepth");
static_assert(sizeof(UIItem_SetDepth) == 0x000008, "Wrong size on UIItem_SetDepth");
static_assert(offsetof(UIItem_SetDepth, Depth) == 0x000000, "Member 'UIItem_SetDepth::Depth' has a wrong offset!");
static_assert(offsetof(UIItem_SetDepth, PropagateToChildren) == 0x000004, "Member 'UIItem_SetDepth::PropagateToChildren' has a wrong offset!");

// Function LGUI.UIItem.SetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct UIItem_SetDisplayName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetDisplayName) == 0x000008, "Wrong alignment on UIItem_SetDisplayName");
static_assert(sizeof(UIItem_SetDisplayName) == 0x000010, "Wrong size on UIItem_SetDisplayName");
static_assert(offsetof(UIItem_SetDisplayName, InName) == 0x000000, "Member 'UIItem_SetDisplayName::InName' has a wrong offset!");

// Function LGUI.UIItem.SetHeight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetHeight) == 0x000004, "Wrong alignment on UIItem_SetHeight");
static_assert(sizeof(UIItem_SetHeight) == 0x000004, "Wrong size on UIItem_SetHeight");
static_assert(offsetof(UIItem_SetHeight, NewHeight) == 0x000000, "Member 'UIItem_SetHeight::NewHeight' has a wrong offset!");

// Function LGUI.UIItem.SetHierarchyIndex
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetHierarchyIndex final
{
public:
	int32                                         InInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetHierarchyIndex) == 0x000004, "Wrong alignment on UIItem_SetHierarchyIndex");
static_assert(sizeof(UIItem_SetHierarchyIndex) == 0x000004, "Wrong size on UIItem_SetHierarchyIndex");
static_assert(offsetof(UIItem_SetHierarchyIndex, InInt) == 0x000000, "Member 'UIItem_SetHierarchyIndex::InInt' has a wrong offset!");

// Function LGUI.UIItem.SetHorizontalStretch
// 0x0008 (0x0008 - 0x0000)
struct UIItem_SetHorizontalStretch final
{
public:
	struct FVector2D                              NewStretch;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetHorizontalStretch) == 0x000004, "Wrong alignment on UIItem_SetHorizontalStretch");
static_assert(sizeof(UIItem_SetHorizontalStretch) == 0x000008, "Wrong size on UIItem_SetHorizontalStretch");
static_assert(offsetof(UIItem_SetHorizontalStretch, NewStretch) == 0x000000, "Member 'UIItem_SetHorizontalStretch::NewStretch' has a wrong offset!");

// Function LGUI.UIItem.SetIsUIActive
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetIsUIActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetIsUIActive) == 0x000001, "Wrong alignment on UIItem_SetIsUIActive");
static_assert(sizeof(UIItem_SetIsUIActive) == 0x000001, "Wrong size on UIItem_SetIsUIActive");
static_assert(offsetof(UIItem_SetIsUIActive, Active) == 0x000000, "Member 'UIItem_SetIsUIActive::Active' has a wrong offset!");

// Function LGUI.UIItem.SetLGUISpaceAbsolutePosition
// 0x000C (0x000C - 0x0000)
struct UIItem_SetLGUISpaceAbsolutePosition final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetLGUISpaceAbsolutePosition) == 0x000004, "Wrong alignment on UIItem_SetLGUISpaceAbsolutePosition");
static_assert(sizeof(UIItem_SetLGUISpaceAbsolutePosition) == 0x00000C, "Wrong size on UIItem_SetLGUISpaceAbsolutePosition");
static_assert(offsetof(UIItem_SetLGUISpaceAbsolutePosition, Pos) == 0x000000, "Member 'UIItem_SetLGUISpaceAbsolutePosition::Pos' has a wrong offset!");

// Function LGUI.UIItem.SetPivot
// 0x0008 (0x0008 - 0x0000)
struct UIItem_SetPivot final
{
public:
	struct FVector2D                              NewPivot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetPivot) == 0x000004, "Wrong alignment on UIItem_SetPivot");
static_assert(sizeof(UIItem_SetPivot) == 0x000008, "Wrong size on UIItem_SetPivot");
static_assert(offsetof(UIItem_SetPivot, NewPivot) == 0x000000, "Member 'UIItem_SetPivot::NewPivot' has a wrong offset!");

// Function LGUI.UIItem.SetRaycastTarget
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetRaycastTarget final
{
public:
	bool                                          NewBool;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetRaycastTarget) == 0x000001, "Wrong alignment on UIItem_SetRaycastTarget");
static_assert(sizeof(UIItem_SetRaycastTarget) == 0x000001, "Wrong size on UIItem_SetRaycastTarget");
static_assert(offsetof(UIItem_SetRaycastTarget, NewBool) == 0x000000, "Member 'UIItem_SetRaycastTarget::NewBool' has a wrong offset!");

// Function LGUI.UIItem.SetStretchBottom
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetStretchBottom final
{
public:
	float                                         NewBottom;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetStretchBottom) == 0x000004, "Wrong alignment on UIItem_SetStretchBottom");
static_assert(sizeof(UIItem_SetStretchBottom) == 0x000004, "Wrong size on UIItem_SetStretchBottom");
static_assert(offsetof(UIItem_SetStretchBottom, NewBottom) == 0x000000, "Member 'UIItem_SetStretchBottom::NewBottom' has a wrong offset!");

// Function LGUI.UIItem.SetStretchLeft
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetStretchLeft final
{
public:
	float                                         NewLeft;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetStretchLeft) == 0x000004, "Wrong alignment on UIItem_SetStretchLeft");
static_assert(sizeof(UIItem_SetStretchLeft) == 0x000004, "Wrong size on UIItem_SetStretchLeft");
static_assert(offsetof(UIItem_SetStretchLeft, NewLeft) == 0x000000, "Member 'UIItem_SetStretchLeft::NewLeft' has a wrong offset!");

// Function LGUI.UIItem.SetStretchRight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetStretchRight final
{
public:
	float                                         NewRight;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetStretchRight) == 0x000004, "Wrong alignment on UIItem_SetStretchRight");
static_assert(sizeof(UIItem_SetStretchRight) == 0x000004, "Wrong size on UIItem_SetStretchRight");
static_assert(offsetof(UIItem_SetStretchRight, NewRight) == 0x000000, "Member 'UIItem_SetStretchRight::NewRight' has a wrong offset!");

// Function LGUI.UIItem.SetStretchTop
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetStretchTop final
{
public:
	float                                         NewTop;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetStretchTop) == 0x000004, "Wrong alignment on UIItem_SetStretchTop");
static_assert(sizeof(UIItem_SetStretchTop) == 0x000004, "Wrong size on UIItem_SetStretchTop");
static_assert(offsetof(UIItem_SetStretchTop, NewTop) == 0x000000, "Member 'UIItem_SetStretchTop::NewTop' has a wrong offset!");

// Function LGUI.UIItem.SetTraceChannel
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetTraceChannel final
{
public:
	ETraceTypeQuery                               InTraceChannel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetTraceChannel) == 0x000001, "Wrong alignment on UIItem_SetTraceChannel");
static_assert(sizeof(UIItem_SetTraceChannel) == 0x000001, "Wrong size on UIItem_SetTraceChannel");
static_assert(offsetof(UIItem_SetTraceChannel, InTraceChannel) == 0x000000, "Member 'UIItem_SetTraceChannel::InTraceChannel' has a wrong offset!");

// Function LGUI.UIItem.SetUIActive
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetUIActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIActive) == 0x000001, "Wrong alignment on UIItem_SetUIActive");
static_assert(sizeof(UIItem_SetUIActive) == 0x000001, "Wrong size on UIItem_SetUIActive");
static_assert(offsetof(UIItem_SetUIActive, bActive) == 0x000000, "Member 'UIItem_SetUIActive::bActive' has a wrong offset!");

// Function LGUI.UIItem.SetUIItemAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetUIItemAlpha final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIItemAlpha) == 0x000004, "Wrong alignment on UIItem_SetUIItemAlpha");
static_assert(sizeof(UIItem_SetUIItemAlpha) == 0x000004, "Wrong size on UIItem_SetUIItemAlpha");
static_assert(offsetof(UIItem_SetUIItemAlpha, Value) == 0x000000, "Member 'UIItem_SetUIItemAlpha::Value' has a wrong offset!");

// Function LGUI.UIItem.SetUIItemScale
// 0x000C (0x000C - 0x0000)
struct UIItem_SetUIItemScale final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIItemScale) == 0x000004, "Wrong alignment on UIItem_SetUIItemScale");
static_assert(sizeof(UIItem_SetUIItemScale) == 0x00000C, "Wrong size on UIItem_SetUIItemScale");
static_assert(offsetof(UIItem_SetUIItemScale, Value) == 0x000000, "Member 'UIItem_SetUIItemScale::Value' has a wrong offset!");

// Function LGUI.UIItem.SetUIParent
// 0x0010 (0x0010 - 0x0000)
struct UIItem_SetUIParent final
{
public:
	class UUIItem*                                InParent;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepWorldTransform;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIItem_SetUIParent) == 0x000008, "Wrong alignment on UIItem_SetUIParent");
static_assert(sizeof(UIItem_SetUIParent) == 0x000010, "Wrong size on UIItem_SetUIParent");
static_assert(offsetof(UIItem_SetUIParent, InParent) == 0x000000, "Member 'UIItem_SetUIParent::InParent' has a wrong offset!");
static_assert(offsetof(UIItem_SetUIParent, KeepWorldTransform) == 0x000008, "Member 'UIItem_SetUIParent::KeepWorldTransform' has a wrong offset!");

// Function LGUI.UIItem.SetUIRelativeLocation
// 0x000C (0x000C - 0x0000)
struct UIItem_SetUIRelativeLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIRelativeLocation) == 0x000004, "Wrong alignment on UIItem_SetUIRelativeLocation");
static_assert(sizeof(UIItem_SetUIRelativeLocation) == 0x00000C, "Wrong size on UIItem_SetUIRelativeLocation");
static_assert(offsetof(UIItem_SetUIRelativeLocation, NewLocation) == 0x000000, "Member 'UIItem_SetUIRelativeLocation::NewLocation' has a wrong offset!");

// Function LGUI.UIItem.SetUIRelativeRotation
// 0x000C (0x000C - 0x0000)
struct UIItem_SetUIRelativeRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIRelativeRotation) == 0x000004, "Wrong alignment on UIItem_SetUIRelativeRotation");
static_assert(sizeof(UIItem_SetUIRelativeRotation) == 0x00000C, "Wrong size on UIItem_SetUIRelativeRotation");
static_assert(offsetof(UIItem_SetUIRelativeRotation, NewRotation) == 0x000000, "Member 'UIItem_SetUIRelativeRotation::NewRotation' has a wrong offset!");

// Function LGUI.UIItem.SetUIRelativeScale3D
// 0x000C (0x000C - 0x0000)
struct UIItem_SetUIRelativeScale3D final
{
public:
	struct FVector                                NewScale3D;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIRelativeScale3D) == 0x000004, "Wrong alignment on UIItem_SetUIRelativeScale3D");
static_assert(sizeof(UIItem_SetUIRelativeScale3D) == 0x00000C, "Wrong size on UIItem_SetUIRelativeScale3D");
static_assert(offsetof(UIItem_SetUIRelativeScale3D, NewScale3D) == 0x000000, "Member 'UIItem_SetUIRelativeScale3D::NewScale3D' has a wrong offset!");

// Function LGUI.UIItem.SetUIRenderAfterBlur
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetUIRenderAfterBlur final
{
public:
	bool                                          bAfterBlur;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIRenderAfterBlur) == 0x000001, "Wrong alignment on UIItem_SetUIRenderAfterBlur");
static_assert(sizeof(UIItem_SetUIRenderAfterBlur) == 0x000001, "Wrong size on UIItem_SetUIRenderAfterBlur");
static_assert(offsetof(UIItem_SetUIRenderAfterBlur, bAfterBlur) == 0x000000, "Member 'UIItem_SetUIRenderAfterBlur::bAfterBlur' has a wrong offset!");

// Function LGUI.UIItem.SetUIRenderBeforeBloom
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetUIRenderBeforeBloom final
{
public:
	bool                                          bBeforeBloom;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIRenderBeforeBloom) == 0x000001, "Wrong alignment on UIItem_SetUIRenderBeforeBloom");
static_assert(sizeof(UIItem_SetUIRenderBeforeBloom) == 0x000001, "Wrong size on UIItem_SetUIRenderBeforeBloom");
static_assert(offsetof(UIItem_SetUIRenderBeforeBloom, bBeforeBloom) == 0x000000, "Member 'UIItem_SetUIRenderBeforeBloom::bBeforeBloom' has a wrong offset!");

// Function LGUI.UIItem.SetUIWorldLocation
// 0x000C (0x000C - 0x0000)
struct UIItem_SetUIWorldLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIWorldLocation) == 0x000004, "Wrong alignment on UIItem_SetUIWorldLocation");
static_assert(sizeof(UIItem_SetUIWorldLocation) == 0x00000C, "Wrong size on UIItem_SetUIWorldLocation");
static_assert(offsetof(UIItem_SetUIWorldLocation, NewLocation) == 0x000000, "Member 'UIItem_SetUIWorldLocation::NewLocation' has a wrong offset!");

// Function LGUI.UIItem.SetUIWorldRotation
// 0x000C (0x000C - 0x0000)
struct UIItem_SetUIWorldRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetUIWorldRotation) == 0x000004, "Wrong alignment on UIItem_SetUIWorldRotation");
static_assert(sizeof(UIItem_SetUIWorldRotation) == 0x00000C, "Wrong size on UIItem_SetUIWorldRotation");
static_assert(offsetof(UIItem_SetUIWorldRotation, NewRotation) == 0x000000, "Member 'UIItem_SetUIWorldRotation::NewRotation' has a wrong offset!");

// Function LGUI.UIItem.SetVerticalStretch
// 0x0008 (0x0008 - 0x0000)
struct UIItem_SetVerticalStretch final
{
public:
	struct FVector2D                              NewStretch;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetVerticalStretch) == 0x000004, "Wrong alignment on UIItem_SetVerticalStretch");
static_assert(sizeof(UIItem_SetVerticalStretch) == 0x000008, "Wrong size on UIItem_SetVerticalStretch");
static_assert(offsetof(UIItem_SetVerticalStretch, NewStretch) == 0x000000, "Member 'UIItem_SetVerticalStretch::NewStretch' has a wrong offset!");

// Function LGUI.UIItem.SetWidget
// 0x0040 (0x0040 - 0x0000)
struct UIItem_SetWidget final
{
public:
	struct FUIWidget                              InWidget;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetWidget) == 0x000004, "Wrong alignment on UIItem_SetWidget");
static_assert(sizeof(UIItem_SetWidget) == 0x000040, "Wrong size on UIItem_SetWidget");
static_assert(offsetof(UIItem_SetWidget, InWidget) == 0x000000, "Member 'UIItem_SetWidget::InWidget' has a wrong offset!");

// Function LGUI.UIItem.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetWidth final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetWidth) == 0x000004, "Wrong alignment on UIItem_SetWidth");
static_assert(sizeof(UIItem_SetWidth) == 0x000004, "Wrong size on UIItem_SetWidth");
static_assert(offsetof(UIItem_SetWidth, NewWidth) == 0x000000, "Member 'UIItem_SetWidth::NewWidth' has a wrong offset!");

// Function LGUI.UIItem.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAlpha) == 0x000004, "Wrong alignment on UIItem_GetAlpha");
static_assert(sizeof(UIItem_GetAlpha) == 0x000004, "Wrong size on UIItem_GetAlpha");
static_assert(offsetof(UIItem_GetAlpha, ReturnValue) == 0x000000, "Member 'UIItem_GetAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorHAlign
// 0x0001 (0x0001 - 0x0000)
struct UIItem_GetAnchorHAlign final
{
public:
	EUIAnchorHorizontalAlign                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorHAlign) == 0x000001, "Wrong alignment on UIItem_GetAnchorHAlign");
static_assert(sizeof(UIItem_GetAnchorHAlign) == 0x000001, "Wrong size on UIItem_GetAnchorHAlign");
static_assert(offsetof(UIItem_GetAnchorHAlign, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorHAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorOffset
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetAnchorOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorOffset) == 0x000004, "Wrong alignment on UIItem_GetAnchorOffset");
static_assert(sizeof(UIItem_GetAnchorOffset) == 0x000008, "Wrong size on UIItem_GetAnchorOffset");
static_assert(offsetof(UIItem_GetAnchorOffset, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorOffsetX
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetAnchorOffsetX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorOffsetX) == 0x000004, "Wrong alignment on UIItem_GetAnchorOffsetX");
static_assert(sizeof(UIItem_GetAnchorOffsetX) == 0x000004, "Wrong size on UIItem_GetAnchorOffsetX");
static_assert(offsetof(UIItem_GetAnchorOffsetX, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorOffsetX::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorOffsetY
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetAnchorOffsetY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorOffsetY) == 0x000004, "Wrong alignment on UIItem_GetAnchorOffsetY");
static_assert(sizeof(UIItem_GetAnchorOffsetY) == 0x000004, "Wrong size on UIItem_GetAnchorOffsetY");
static_assert(offsetof(UIItem_GetAnchorOffsetY, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorOffsetY::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorVAlign
// 0x0001 (0x0001 - 0x0000)
struct UIItem_GetAnchorVAlign final
{
public:
	EUIAnchorVerticalAlign                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorVAlign) == 0x000001, "Wrong alignment on UIItem_GetAnchorVAlign");
static_assert(sizeof(UIItem_GetAnchorVAlign) == 0x000001, "Wrong size on UIItem_GetAnchorVAlign");
static_assert(offsetof(UIItem_GetAnchorVAlign, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorVAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAttachUIChild
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetAttachUIChild final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIItem*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAttachUIChild) == 0x000008, "Wrong alignment on UIItem_GetAttachUIChild");
static_assert(sizeof(UIItem_GetAttachUIChild) == 0x000010, "Wrong size on UIItem_GetAttachUIChild");
static_assert(offsetof(UIItem_GetAttachUIChild, Param_Index) == 0x000000, "Member 'UIItem_GetAttachUIChild::Param_Index' has a wrong offset!");
static_assert(offsetof(UIItem_GetAttachUIChild, ReturnValue) == 0x000008, "Member 'UIItem_GetAttachUIChild::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAttachUIChildren
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetAttachUIChildren final
{
public:
	TArray<class UUIItem*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAttachUIChildren) == 0x000008, "Wrong alignment on UIItem_GetAttachUIChildren");
static_assert(sizeof(UIItem_GetAttachUIChildren) == 0x000010, "Wrong size on UIItem_GetAttachUIChildren");
static_assert(offsetof(UIItem_GetAttachUIChildren, ReturnValue) == 0x000000, "Member 'UIItem_GetAttachUIChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetCalculatedParentAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetCalculatedParentAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetCalculatedParentAlpha) == 0x000004, "Wrong alignment on UIItem_GetCalculatedParentAlpha");
static_assert(sizeof(UIItem_GetCalculatedParentAlpha) == 0x000004, "Wrong size on UIItem_GetCalculatedParentAlpha");
static_assert(offsetof(UIItem_GetCalculatedParentAlpha, ReturnValue) == 0x000000, "Member 'UIItem_GetCalculatedParentAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetCanvasScaler
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetCanvasScaler final
{
public:
	class ULGUICanvasScaler*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetCanvasScaler) == 0x000008, "Wrong alignment on UIItem_GetCanvasScaler");
static_assert(sizeof(UIItem_GetCanvasScaler) == 0x000008, "Wrong size on UIItem_GetCanvasScaler");
static_assert(offsetof(UIItem_GetCanvasScaler, ReturnValue) == 0x000000, "Member 'UIItem_GetCanvasScaler::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetColor
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetColor) == 0x000004, "Wrong alignment on UIItem_GetColor");
static_assert(sizeof(UIItem_GetColor) == 0x000004, "Wrong size on UIItem_GetColor");
static_assert(offsetof(UIItem_GetColor, ReturnValue) == 0x000000, "Member 'UIItem_GetColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetDepth
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetDepth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetDepth) == 0x000004, "Wrong alignment on UIItem_GetDepth");
static_assert(sizeof(UIItem_GetDepth) == 0x000004, "Wrong size on UIItem_GetDepth");
static_assert(offsetof(UIItem_GetDepth, ReturnValue) == 0x000000, "Member 'UIItem_GetDepth::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetDisplayName) == 0x000008, "Wrong alignment on UIItem_GetDisplayName");
static_assert(sizeof(UIItem_GetDisplayName) == 0x000010, "Wrong size on UIItem_GetDisplayName");
static_assert(offsetof(UIItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'UIItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetFlattenHierarchyIndex
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetFlattenHierarchyIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetFlattenHierarchyIndex) == 0x000004, "Wrong alignment on UIItem_GetFlattenHierarchyIndex");
static_assert(sizeof(UIItem_GetFlattenHierarchyIndex) == 0x000004, "Wrong size on UIItem_GetFlattenHierarchyIndex");
static_assert(offsetof(UIItem_GetFlattenHierarchyIndex, ReturnValue) == 0x000000, "Member 'UIItem_GetFlattenHierarchyIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetHeight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetHeight) == 0x000004, "Wrong alignment on UIItem_GetHeight");
static_assert(sizeof(UIItem_GetHeight) == 0x000004, "Wrong size on UIItem_GetHeight");
static_assert(offsetof(UIItem_GetHeight, ReturnValue) == 0x000000, "Member 'UIItem_GetHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetHierarchyIndex
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetHierarchyIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetHierarchyIndex) == 0x000004, "Wrong alignment on UIItem_GetHierarchyIndex");
static_assert(sizeof(UIItem_GetHierarchyIndex) == 0x000004, "Wrong size on UIItem_GetHierarchyIndex");
static_assert(offsetof(UIItem_GetHierarchyIndex, ReturnValue) == 0x000000, "Member 'UIItem_GetHierarchyIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetInheritAlpha
// 0x0001 (0x0001 - 0x0000)
struct UIItem_GetInheritAlpha final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetInheritAlpha) == 0x000001, "Wrong alignment on UIItem_GetInheritAlpha");
static_assert(sizeof(UIItem_GetInheritAlpha) == 0x000001, "Wrong size on UIItem_GetInheritAlpha");
static_assert(offsetof(UIItem_GetInheritAlpha, ReturnValue) == 0x000000, "Member 'UIItem_GetInheritAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceBottom
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetLocalSpaceBottom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceBottom) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceBottom");
static_assert(sizeof(UIItem_GetLocalSpaceBottom) == 0x000004, "Wrong size on UIItem_GetLocalSpaceBottom");
static_assert(offsetof(UIItem_GetLocalSpaceBottom, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceBottom::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceCenter
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetLocalSpaceCenter final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceCenter) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceCenter");
static_assert(sizeof(UIItem_GetLocalSpaceCenter) == 0x000008, "Wrong size on UIItem_GetLocalSpaceCenter");
static_assert(offsetof(UIItem_GetLocalSpaceCenter, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceCenter::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceLeft
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetLocalSpaceLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceLeft) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceLeft");
static_assert(sizeof(UIItem_GetLocalSpaceLeft) == 0x000004, "Wrong size on UIItem_GetLocalSpaceLeft");
static_assert(offsetof(UIItem_GetLocalSpaceLeft, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceLeft::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceLeftBottomPoint
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetLocalSpaceLeftBottomPoint final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceLeftBottomPoint) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceLeftBottomPoint");
static_assert(sizeof(UIItem_GetLocalSpaceLeftBottomPoint) == 0x000008, "Wrong size on UIItem_GetLocalSpaceLeftBottomPoint");
static_assert(offsetof(UIItem_GetLocalSpaceLeftBottomPoint, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceLeftBottomPoint::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceRight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetLocalSpaceRight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceRight) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceRight");
static_assert(sizeof(UIItem_GetLocalSpaceRight) == 0x000004, "Wrong size on UIItem_GetLocalSpaceRight");
static_assert(offsetof(UIItem_GetLocalSpaceRight, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceRight::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceRightTopPoint
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetLocalSpaceRightTopPoint final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceRightTopPoint) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceRightTopPoint");
static_assert(sizeof(UIItem_GetLocalSpaceRightTopPoint) == 0x000008, "Wrong size on UIItem_GetLocalSpaceRightTopPoint");
static_assert(offsetof(UIItem_GetLocalSpaceRightTopPoint, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceRightTopPoint::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceTop
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetLocalSpaceTop final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceTop) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceTop");
static_assert(sizeof(UIItem_GetLocalSpaceTop) == 0x000004, "Wrong size on UIItem_GetLocalSpaceTop");
static_assert(offsetof(UIItem_GetLocalSpaceTop, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceTop::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetPivot
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetPivot final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetPivot) == 0x000004, "Wrong alignment on UIItem_GetPivot");
static_assert(sizeof(UIItem_GetPivot) == 0x000008, "Wrong size on UIItem_GetPivot");
static_assert(offsetof(UIItem_GetPivot, ReturnValue) == 0x000000, "Member 'UIItem_GetPivot::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetRootCanvas
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetRootCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetRootCanvas) == 0x000008, "Wrong alignment on UIItem_GetRootCanvas");
static_assert(sizeof(UIItem_GetRootCanvas) == 0x000008, "Wrong size on UIItem_GetRootCanvas");
static_assert(offsetof(UIItem_GetRootCanvas, ReturnValue) == 0x000000, "Member 'UIItem_GetRootCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetStretchBottom
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetStretchBottom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetStretchBottom) == 0x000004, "Wrong alignment on UIItem_GetStretchBottom");
static_assert(sizeof(UIItem_GetStretchBottom) == 0x000004, "Wrong size on UIItem_GetStretchBottom");
static_assert(offsetof(UIItem_GetStretchBottom, ReturnValue) == 0x000000, "Member 'UIItem_GetStretchBottom::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetStretchLeft
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetStretchLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetStretchLeft) == 0x000004, "Wrong alignment on UIItem_GetStretchLeft");
static_assert(sizeof(UIItem_GetStretchLeft) == 0x000004, "Wrong size on UIItem_GetStretchLeft");
static_assert(offsetof(UIItem_GetStretchLeft, ReturnValue) == 0x000000, "Member 'UIItem_GetStretchLeft::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetStretchRight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetStretchRight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetStretchRight) == 0x000004, "Wrong alignment on UIItem_GetStretchRight");
static_assert(sizeof(UIItem_GetStretchRight) == 0x000004, "Wrong size on UIItem_GetStretchRight");
static_assert(offsetof(UIItem_GetStretchRight, ReturnValue) == 0x000000, "Member 'UIItem_GetStretchRight::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetStretchTop
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetStretchTop final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetStretchTop) == 0x000004, "Wrong alignment on UIItem_GetStretchTop");
static_assert(sizeof(UIItem_GetStretchTop) == 0x000004, "Wrong size on UIItem_GetStretchTop");
static_assert(offsetof(UIItem_GetStretchTop, ReturnValue) == 0x000000, "Member 'UIItem_GetStretchTop::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetTraceChannel
// 0x0001 (0x0001 - 0x0000)
struct UIItem_GetTraceChannel final
{
public:
	ETraceTypeQuery                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetTraceChannel) == 0x000001, "Wrong alignment on UIItem_GetTraceChannel");
static_assert(sizeof(UIItem_GetTraceChannel) == 0x000001, "Wrong size on UIItem_GetTraceChannel");
static_assert(offsetof(UIItem_GetTraceChannel, ReturnValue) == 0x000000, "Member 'UIItem_GetTraceChannel::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetUIItemType
// 0x0001 (0x0001 - 0x0000)
struct UIItem_GetUIItemType final
{
public:
	EUIItemType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetUIItemType) == 0x000001, "Wrong alignment on UIItem_GetUIItemType");
static_assert(sizeof(UIItem_GetUIItemType) == 0x000001, "Wrong size on UIItem_GetUIItemType");
static_assert(offsetof(UIItem_GetUIItemType, ReturnValue) == 0x000000, "Member 'UIItem_GetUIItemType::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetWidget
// 0x0040 (0x0040 - 0x0000)
struct UIItem_GetWidget final
{
public:
	struct FUIWidget                              ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetWidget) == 0x000004, "Wrong alignment on UIItem_GetWidget");
static_assert(sizeof(UIItem_GetWidget) == 0x000040, "Wrong size on UIItem_GetWidget");
static_assert(offsetof(UIItem_GetWidget, ReturnValue) == 0x000000, "Member 'UIItem_GetWidget::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetWidth
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetWidth) == 0x000004, "Wrong alignment on UIItem_GetWidth");
static_assert(sizeof(UIItem_GetWidth) == 0x000004, "Wrong size on UIItem_GetWidth");
static_assert(offsetof(UIItem_GetWidth, ReturnValue) == 0x000000, "Member 'UIItem_GetWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsBubbleUpToParent
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsBubbleUpToParent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsBubbleUpToParent) == 0x000001, "Wrong alignment on UIItem_IsBubbleUpToParent");
static_assert(sizeof(UIItem_IsBubbleUpToParent) == 0x000001, "Wrong size on UIItem_IsBubbleUpToParent");
static_assert(offsetof(UIItem_IsBubbleUpToParent, ReturnValue) == 0x000000, "Member 'UIItem_IsBubbleUpToParent::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsRaycastTarget
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsRaycastTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsRaycastTarget) == 0x000001, "Wrong alignment on UIItem_IsRaycastTarget");
static_assert(sizeof(UIItem_IsRaycastTarget) == 0x000001, "Wrong size on UIItem_IsRaycastTarget");
static_assert(offsetof(UIItem_IsRaycastTarget, ReturnValue) == 0x000000, "Member 'UIItem_IsRaycastTarget::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsUIActiveInHierarchy
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsUIActiveInHierarchy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsUIActiveInHierarchy) == 0x000001, "Wrong alignment on UIItem_IsUIActiveInHierarchy");
static_assert(sizeof(UIItem_IsUIActiveInHierarchy) == 0x000001, "Wrong size on UIItem_IsUIActiveInHierarchy");
static_assert(offsetof(UIItem_IsUIActiveInHierarchy, ReturnValue) == 0x000000, "Member 'UIItem_IsUIActiveInHierarchy::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsUIActiveSelf
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsUIActiveSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsUIActiveSelf) == 0x000001, "Wrong alignment on UIItem_IsUIActiveSelf");
static_assert(sizeof(UIItem_IsUIActiveSelf) == 0x000001, "Wrong size on UIItem_IsUIActiveSelf");
static_assert(offsetof(UIItem_IsUIActiveSelf, ReturnValue) == 0x000000, "Member 'UIItem_IsUIActiveSelf::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.SetUIRenderAfterBlurPartial
// 0x0001 (0x0001 - 0x0000)
struct UIBaseRenderable_SetUIRenderAfterBlurPartial final
{
public:
	bool                                          bAfterBlurPartial;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_SetUIRenderAfterBlurPartial) == 0x000001, "Wrong alignment on UIBaseRenderable_SetUIRenderAfterBlurPartial");
static_assert(sizeof(UIBaseRenderable_SetUIRenderAfterBlurPartial) == 0x000001, "Wrong size on UIBaseRenderable_SetUIRenderAfterBlurPartial");
static_assert(offsetof(UIBaseRenderable_SetUIRenderAfterBlurPartial, bAfterBlurPartial) == 0x000000, "Member 'UIBaseRenderable_SetUIRenderAfterBlurPartial::bAfterBlurPartial' has a wrong offset!");

// Function LGUI.UIBaseRenderable.GetUIRenderableType
// 0x0001 (0x0001 - 0x0000)
struct UIBaseRenderable_GetUIRenderableType final
{
public:
	EUIRenderableType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_GetUIRenderableType) == 0x000001, "Wrong alignment on UIBaseRenderable_GetUIRenderableType");
static_assert(sizeof(UIBaseRenderable_GetUIRenderableType) == 0x000001, "Wrong size on UIBaseRenderable_GetUIRenderableType");
static_assert(offsetof(UIBaseRenderable_GetUIRenderableType, ReturnValue) == 0x000000, "Member 'UIBaseRenderable_GetUIRenderableType::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.GetRaycastComplex
// 0x0001 (0x0001 - 0x0000)
struct UIBatchGeometryRenderable_GetRaycastComplex final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_GetRaycastComplex) == 0x000001, "Wrong alignment on UIBatchGeometryRenderable_GetRaycastComplex");
static_assert(sizeof(UIBatchGeometryRenderable_GetRaycastComplex) == 0x000001, "Wrong size on UIBatchGeometryRenderable_GetRaycastComplex");
static_assert(offsetof(UIBatchGeometryRenderable_GetRaycastComplex, ReturnValue) == 0x000000, "Member 'UIBatchGeometryRenderable_GetRaycastComplex::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.SetCustomMaterialScalarParameter
// 0x0010 (0x0010 - 0x0000)
struct UIBatchGeometryRenderable_SetCustomMaterialScalarParameter final
{
public:
	class FName                                   ParamterName;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_SetCustomMaterialScalarParameter) == 0x000004, "Wrong alignment on UIBatchGeometryRenderable_SetCustomMaterialScalarParameter");
static_assert(sizeof(UIBatchGeometryRenderable_SetCustomMaterialScalarParameter) == 0x000010, "Wrong size on UIBatchGeometryRenderable_SetCustomMaterialScalarParameter");
static_assert(offsetof(UIBatchGeometryRenderable_SetCustomMaterialScalarParameter, ParamterName) == 0x000000, "Member 'UIBatchGeometryRenderable_SetCustomMaterialScalarParameter::ParamterName' has a wrong offset!");
static_assert(offsetof(UIBatchGeometryRenderable_SetCustomMaterialScalarParameter, Value) == 0x00000C, "Member 'UIBatchGeometryRenderable_SetCustomMaterialScalarParameter::Value' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.SetCustomMaterialTextureParameter
// 0x0018 (0x0018 - 0x0000)
struct UIBatchGeometryRenderable_SetCustomMaterialTextureParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1142[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_SetCustomMaterialTextureParameter) == 0x000008, "Wrong alignment on UIBatchGeometryRenderable_SetCustomMaterialTextureParameter");
static_assert(sizeof(UIBatchGeometryRenderable_SetCustomMaterialTextureParameter) == 0x000018, "Wrong size on UIBatchGeometryRenderable_SetCustomMaterialTextureParameter");
static_assert(offsetof(UIBatchGeometryRenderable_SetCustomMaterialTextureParameter, ParameterName) == 0x000000, "Member 'UIBatchGeometryRenderable_SetCustomMaterialTextureParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(UIBatchGeometryRenderable_SetCustomMaterialTextureParameter, Value) == 0x000010, "Member 'UIBatchGeometryRenderable_SetCustomMaterialTextureParameter::Value' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.SetCustomMaterialVectorParameter
// 0x001C (0x001C - 0x0000)
struct UIBatchGeometryRenderable_SetCustomMaterialVectorParameter final
{
public:
	class FName                                   ParamterName;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_SetCustomMaterialVectorParameter) == 0x000004, "Wrong alignment on UIBatchGeometryRenderable_SetCustomMaterialVectorParameter");
static_assert(sizeof(UIBatchGeometryRenderable_SetCustomMaterialVectorParameter) == 0x00001C, "Wrong size on UIBatchGeometryRenderable_SetCustomMaterialVectorParameter");
static_assert(offsetof(UIBatchGeometryRenderable_SetCustomMaterialVectorParameter, ParamterName) == 0x000000, "Member 'UIBatchGeometryRenderable_SetCustomMaterialVectorParameter::ParamterName' has a wrong offset!");
static_assert(offsetof(UIBatchGeometryRenderable_SetCustomMaterialVectorParameter, Value) == 0x00000C, "Member 'UIBatchGeometryRenderable_SetCustomMaterialVectorParameter::Value' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.SetCustomUIMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIBatchGeometryRenderable_SetCustomUIMaterial final
{
public:
	class UMaterialInterface*                     InMat;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_SetCustomUIMaterial) == 0x000008, "Wrong alignment on UIBatchGeometryRenderable_SetCustomUIMaterial");
static_assert(sizeof(UIBatchGeometryRenderable_SetCustomUIMaterial) == 0x000008, "Wrong size on UIBatchGeometryRenderable_SetCustomUIMaterial");
static_assert(offsetof(UIBatchGeometryRenderable_SetCustomUIMaterial, InMat) == 0x000000, "Member 'UIBatchGeometryRenderable_SetCustomUIMaterial::InMat' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.SetIsColorRevert
// 0x0001 (0x0001 - 0x0000)
struct UIBatchGeometryRenderable_SetIsColorRevert final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_SetIsColorRevert) == 0x000001, "Wrong alignment on UIBatchGeometryRenderable_SetIsColorRevert");
static_assert(sizeof(UIBatchGeometryRenderable_SetIsColorRevert) == 0x000001, "Wrong size on UIBatchGeometryRenderable_SetIsColorRevert");
static_assert(offsetof(UIBatchGeometryRenderable_SetIsColorRevert, Value) == 0x000000, "Member 'UIBatchGeometryRenderable_SetIsColorRevert::Value' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.SetIsGray
// 0x0001 (0x0001 - 0x0000)
struct UIBatchGeometryRenderable_SetIsGray final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_SetIsGray) == 0x000001, "Wrong alignment on UIBatchGeometryRenderable_SetIsGray");
static_assert(sizeof(UIBatchGeometryRenderable_SetIsGray) == 0x000001, "Wrong size on UIBatchGeometryRenderable_SetIsGray");
static_assert(offsetof(UIBatchGeometryRenderable_SetIsGray, Value) == 0x000000, "Member 'UIBatchGeometryRenderable_SetIsGray::Value' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.SetIsSelfRender
// 0x0001 (0x0001 - 0x0000)
struct UIBatchGeometryRenderable_SetIsSelfRender final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_SetIsSelfRender) == 0x000001, "Wrong alignment on UIBatchGeometryRenderable_SetIsSelfRender");
static_assert(sizeof(UIBatchGeometryRenderable_SetIsSelfRender) == 0x000001, "Wrong size on UIBatchGeometryRenderable_SetIsSelfRender");
static_assert(offsetof(UIBatchGeometryRenderable_SetIsSelfRender, Value) == 0x000000, "Member 'UIBatchGeometryRenderable_SetIsSelfRender::Value' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.SetRaycastComplex
// 0x0001 (0x0001 - 0x0000)
struct UIBatchGeometryRenderable_SetRaycastComplex final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_SetRaycastComplex) == 0x000001, "Wrong alignment on UIBatchGeometryRenderable_SetRaycastComplex");
static_assert(sizeof(UIBatchGeometryRenderable_SetRaycastComplex) == 0x000001, "Wrong size on UIBatchGeometryRenderable_SetRaycastComplex");
static_assert(offsetof(UIBatchGeometryRenderable_SetRaycastComplex, NewValue) == 0x000000, "Member 'UIBatchGeometryRenderable_SetRaycastComplex::NewValue' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.GetCustomUIMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIBatchGeometryRenderable_GetCustomUIMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_GetCustomUIMaterial) == 0x000008, "Wrong alignment on UIBatchGeometryRenderable_GetCustomUIMaterial");
static_assert(sizeof(UIBatchGeometryRenderable_GetCustomUIMaterial) == 0x000008, "Wrong size on UIBatchGeometryRenderable_GetCustomUIMaterial");
static_assert(offsetof(UIBatchGeometryRenderable_GetCustomUIMaterial, ReturnValue) == 0x000000, "Member 'UIBatchGeometryRenderable_GetCustomUIMaterial::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.GetIsSelfRender
// 0x0001 (0x0001 - 0x0000)
struct UIBatchGeometryRenderable_GetIsSelfRender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_GetIsSelfRender) == 0x000001, "Wrong alignment on UIBatchGeometryRenderable_GetIsSelfRender");
static_assert(sizeof(UIBatchGeometryRenderable_GetIsSelfRender) == 0x000001, "Wrong size on UIBatchGeometryRenderable_GetIsSelfRender");
static_assert(offsetof(UIBatchGeometryRenderable_GetIsSelfRender, ReturnValue) == 0x000000, "Member 'UIBatchGeometryRenderable_GetIsSelfRender::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable.GetMaterialInstanceDynamic
// 0x0008 (0x0008 - 0x0000)
struct UIBatchGeometryRenderable_GetMaterialInstanceDynamic final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_GetMaterialInstanceDynamic) == 0x000008, "Wrong alignment on UIBatchGeometryRenderable_GetMaterialInstanceDynamic");
static_assert(sizeof(UIBatchGeometryRenderable_GetMaterialInstanceDynamic) == 0x000008, "Wrong size on UIBatchGeometryRenderable_GetMaterialInstanceDynamic");
static_assert(offsetof(UIBatchGeometryRenderable_GetMaterialInstanceDynamic, ReturnValue) == 0x000000, "Member 'UIBatchGeometryRenderable_GetMaterialInstanceDynamic::ReturnValue' has a wrong offset!");

// Function LGUI.UITextureBase.OnDynamicAtlasSlotBuilt
// 0x0040 (0x0040 - 0x0000)
struct UITextureBase_OnDynamicAtlasSlotBuilt final
{
public:
	struct FDynamicAtlasSlotManagedHandle         ManagedHandle;                                     // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureBase_OnDynamicAtlasSlotBuilt) == 0x000010, "Wrong alignment on UITextureBase_OnDynamicAtlasSlotBuilt");
static_assert(sizeof(UITextureBase_OnDynamicAtlasSlotBuilt) == 0x000040, "Wrong size on UITextureBase_OnDynamicAtlasSlotBuilt");
static_assert(offsetof(UITextureBase_OnDynamicAtlasSlotBuilt, ManagedHandle) == 0x000000, "Member 'UITextureBase_OnDynamicAtlasSlotBuilt::ManagedHandle' has a wrong offset!");

// Function LGUI.UITextureBase.SetDynamicAtlasTextureAsync
// 0x0030 (0x0030 - 0x0000)
struct UITextureBase_SetDynamicAtlasTextureAsync final
{
public:
	class FString                                 InAtlasTag;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InSoftObjectPath;                                  // 0x0010(0x0020)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureBase_SetDynamicAtlasTextureAsync) == 0x000008, "Wrong alignment on UITextureBase_SetDynamicAtlasTextureAsync");
static_assert(sizeof(UITextureBase_SetDynamicAtlasTextureAsync) == 0x000030, "Wrong size on UITextureBase_SetDynamicAtlasTextureAsync");
static_assert(offsetof(UITextureBase_SetDynamicAtlasTextureAsync, InAtlasTag) == 0x000000, "Member 'UITextureBase_SetDynamicAtlasTextureAsync::InAtlasTag' has a wrong offset!");
static_assert(offsetof(UITextureBase_SetDynamicAtlasTextureAsync, InSoftObjectPath) == 0x000010, "Member 'UITextureBase_SetDynamicAtlasTextureAsync::InSoftObjectPath' has a wrong offset!");

// Function LGUI.UITextureBase.SetTexture
// 0x0008 (0x0008 - 0x0000)
struct UITextureBase_SetTexture final
{
public:
	class UTexture*                               NewTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureBase_SetTexture) == 0x000008, "Wrong alignment on UITextureBase_SetTexture");
static_assert(sizeof(UITextureBase_SetTexture) == 0x000008, "Wrong size on UITextureBase_SetTexture");
static_assert(offsetof(UITextureBase_SetTexture, NewTexture) == 0x000000, "Member 'UITextureBase_SetTexture::NewTexture' has a wrong offset!");

// Function LGUI.UITextureBase.GetTexture
// 0x0008 (0x0008 - 0x0000)
struct UITextureBase_GetTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureBase_GetTexture) == 0x000008, "Wrong alignment on UITextureBase_GetTexture");
static_assert(sizeof(UITextureBase_GetTexture) == 0x000008, "Wrong size on UITextureBase_GetTexture");
static_assert(offsetof(UITextureBase_GetTexture, ReturnValue) == 0x000000, "Member 'UITextureBase_GetTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.GetLGUIEventSystemInstance
// 0x0010 (0x0010 - 0x0000)
struct LGUIEventSystem_GetLGUIEventSystemInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIEventSystem*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_GetLGUIEventSystemInstance) == 0x000008, "Wrong alignment on LGUIEventSystem_GetLGUIEventSystemInstance");
static_assert(sizeof(LGUIEventSystem_GetLGUIEventSystemInstance) == 0x000010, "Wrong size on LGUIEventSystem_GetLGUIEventSystemInstance");
static_assert(offsetof(LGUIEventSystem_GetLGUIEventSystemInstance, WorldContextObject) == 0x000000, "Member 'LGUIEventSystem_GetLGUIEventSystemInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_GetLGUIEventSystemInstance, ReturnValue) == 0x000008, "Member 'LGUIEventSystem_GetLGUIEventSystemInstance::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.GetCurrentInputModule
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_GetCurrentInputModule final
{
public:
	class ULGUIBaseInputModule*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_GetCurrentInputModule) == 0x000008, "Wrong alignment on LGUIEventSystem_GetCurrentInputModule");
static_assert(sizeof(LGUIEventSystem_GetCurrentInputModule) == 0x000008, "Wrong size on LGUIEventSystem_GetCurrentInputModule");
static_assert(offsetof(LGUIEventSystem_GetCurrentInputModule, ReturnValue) == 0x000000, "Member 'LGUIEventSystem_GetCurrentInputModule::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.GetCurrentSelectedComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_GetCurrentSelectedComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_GetCurrentSelectedComponent) == 0x000008, "Wrong alignment on LGUIEventSystem_GetCurrentSelectedComponent");
static_assert(sizeof(LGUIEventSystem_GetCurrentSelectedComponent) == 0x000008, "Wrong size on LGUIEventSystem_GetCurrentSelectedComponent");
static_assert(offsetof(LGUIEventSystem_GetCurrentSelectedComponent, ReturnValue) == 0x000000, "Member 'LGUIEventSystem_GetCurrentSelectedComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.InputScroll
// 0x0004 (0x0004 - 0x0000)
struct LGUIEventSystem_InputScroll final
{
public:
	float                                         InAxisValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_InputScroll) == 0x000004, "Wrong alignment on LGUIEventSystem_InputScroll");
static_assert(sizeof(LGUIEventSystem_InputScroll) == 0x000004, "Wrong size on LGUIEventSystem_InputScroll");
static_assert(offsetof(LGUIEventSystem_InputScroll, InAxisValue) == 0x000000, "Member 'LGUIEventSystem_InputScroll::InAxisValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.InputTrigger
// 0x0002 (0x0002 - 0x0000)
struct LGUIEventSystem_InputTrigger final
{
public:
	bool                                          InTriggerPress;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseButtonType                              InMouseButtonType;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_InputTrigger) == 0x000001, "Wrong alignment on LGUIEventSystem_InputTrigger");
static_assert(sizeof(LGUIEventSystem_InputTrigger) == 0x000002, "Wrong size on LGUIEventSystem_InputTrigger");
static_assert(offsetof(LGUIEventSystem_InputTrigger, InTriggerPress) == 0x000000, "Member 'LGUIEventSystem_InputTrigger::InTriggerPress' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_InputTrigger, InMouseButtonType) == 0x000001, "Member 'LGUIEventSystem_InputTrigger::InMouseButtonType' has a wrong offset!");

// Function LGUI.LGUIEventSystem.IsRaycastEnable
// 0x0001 (0x0001 - 0x0000)
struct LGUIEventSystem_IsRaycastEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_IsRaycastEnable) == 0x000001, "Wrong alignment on LGUIEventSystem_IsRaycastEnable");
static_assert(sizeof(LGUIEventSystem_IsRaycastEnable) == 0x000001, "Wrong size on LGUIEventSystem_IsRaycastEnable");
static_assert(offsetof(LGUIEventSystem_IsRaycastEnable, ReturnValue) == 0x000000, "Member 'LGUIEventSystem_IsRaycastEnable::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.Navigate
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_Navigate final
{
public:
	ELGUINavigationDirection                      Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1149[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUISelectableComponent*                 Selectable;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_Navigate) == 0x000008, "Wrong alignment on LGUIEventSystem_Navigate");
static_assert(sizeof(LGUIEventSystem_Navigate) == 0x000018, "Wrong size on LGUIEventSystem_Navigate");
static_assert(offsetof(LGUIEventSystem_Navigate, Direction) == 0x000000, "Member 'LGUIEventSystem_Navigate::Direction' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_Navigate, Selectable) == 0x000008, "Member 'LGUIEventSystem_Navigate::Selectable' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_Navigate, ReturnValue) == 0x000010, "Member 'LGUIEventSystem_Navigate::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.RegisterGlobalListener
// 0x0020 (0x0020 - 0x0000)
struct LGUIEventSystem_RegisterGlobalListener final
{
public:
	TDelegate<void(class ULGUIBaseEventData* EventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_114A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_RegisterGlobalListener) == 0x000008, "Wrong alignment on LGUIEventSystem_RegisterGlobalListener");
static_assert(sizeof(LGUIEventSystem_RegisterGlobalListener) == 0x000020, "Wrong size on LGUIEventSystem_RegisterGlobalListener");
static_assert(offsetof(LGUIEventSystem_RegisterGlobalListener, InDelegate) == 0x000000, "Member 'LGUIEventSystem_RegisterGlobalListener::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_RegisterGlobalListener, ReturnValue) == 0x000018, "Member 'LGUIEventSystem_RegisterGlobalListener::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.RegisterHitEvent
// 0x0020 (0x0020 - 0x0000)
struct LGUIEventSystem_RegisterHitEvent final
{
public:
	TDelegate<void(bool IsHit, struct FHitResult& HitResult, class USceneComponent* HitComponent)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_114B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_RegisterHitEvent) == 0x000008, "Wrong alignment on LGUIEventSystem_RegisterHitEvent");
static_assert(sizeof(LGUIEventSystem_RegisterHitEvent) == 0x000020, "Wrong size on LGUIEventSystem_RegisterHitEvent");
static_assert(offsetof(LGUIEventSystem_RegisterHitEvent, InDelegate) == 0x000000, "Member 'LGUIEventSystem_RegisterHitEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_RegisterHitEvent, ReturnValue) == 0x000018, "Member 'LGUIEventSystem_RegisterHitEvent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.RegisterPointerEnterExitEvent
// 0x0014 (0x0014 - 0x0000)
struct LGUIEventSystem_RegisterPointerEnterExitEvent final
{
public:
	TDelegate<void(bool bEnter)>                  PointerEnterExitDelegate;                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_RegisterPointerEnterExitEvent) == 0x000004, "Wrong alignment on LGUIEventSystem_RegisterPointerEnterExitEvent");
static_assert(sizeof(LGUIEventSystem_RegisterPointerEnterExitEvent) == 0x000014, "Wrong size on LGUIEventSystem_RegisterPointerEnterExitEvent");
static_assert(offsetof(LGUIEventSystem_RegisterPointerEnterExitEvent, PointerEnterExitDelegate) == 0x000000, "Member 'LGUIEventSystem_RegisterPointerEnterExitEvent::PointerEnterExitDelegate' has a wrong offset!");

// Function LGUI.LGUIEventSystem.SetRaycastEnable
// 0x0002 (0x0002 - 0x0000)
struct LGUIEventSystem_SetRaycastEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearEvent;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_SetRaycastEnable) == 0x000001, "Wrong alignment on LGUIEventSystem_SetRaycastEnable");
static_assert(sizeof(LGUIEventSystem_SetRaycastEnable) == 0x000002, "Wrong size on LGUIEventSystem_SetRaycastEnable");
static_assert(offsetof(LGUIEventSystem_SetRaycastEnable, Enable) == 0x000000, "Member 'LGUIEventSystem_SetRaycastEnable::Enable' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetRaycastEnable, ClearEvent) == 0x000001, "Member 'LGUIEventSystem_SetRaycastEnable::ClearEvent' has a wrong offset!");

// Function LGUI.LGUIEventSystem.SetSelectComponent
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_SetSelectComponent final
{
public:
	class USceneComponent*                        InSelectComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIBaseEventData*                     EventData;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            EventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_SetSelectComponent) == 0x000008, "Wrong alignment on LGUIEventSystem_SetSelectComponent");
static_assert(sizeof(LGUIEventSystem_SetSelectComponent) == 0x000018, "Wrong size on LGUIEventSystem_SetSelectComponent");
static_assert(offsetof(LGUIEventSystem_SetSelectComponent, InSelectComp) == 0x000000, "Member 'LGUIEventSystem_SetSelectComponent::InSelectComp' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetSelectComponent, EventData) == 0x000008, "Member 'LGUIEventSystem_SetSelectComponent::EventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetSelectComponent, EventFireType) == 0x000010, "Member 'LGUIEventSystem_SetSelectComponent::EventFireType' has a wrong offset!");

// Function LGUI.LGUIEventSystem.SetSelectComponentWithDefault
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_SetSelectComponentWithDefault final
{
public:
	class USceneComponent*                        InSelectComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_SetSelectComponentWithDefault) == 0x000008, "Wrong alignment on LGUIEventSystem_SetSelectComponentWithDefault");
static_assert(sizeof(LGUIEventSystem_SetSelectComponentWithDefault) == 0x000008, "Wrong size on LGUIEventSystem_SetSelectComponentWithDefault");
static_assert(offsetof(LGUIEventSystem_SetSelectComponentWithDefault, InSelectComp) == 0x000000, "Member 'LGUIEventSystem_SetSelectComponentWithDefault::InSelectComp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.UnregisterGlobalListener
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_UnregisterGlobalListener final
{
public:
	struct FLGUIDelegateHandleWrapper             InHandle;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_UnregisterGlobalListener) == 0x000008, "Wrong alignment on LGUIEventSystem_UnregisterGlobalListener");
static_assert(sizeof(LGUIEventSystem_UnregisterGlobalListener) == 0x000008, "Wrong size on LGUIEventSystem_UnregisterGlobalListener");
static_assert(offsetof(LGUIEventSystem_UnregisterGlobalListener, InHandle) == 0x000000, "Member 'LGUIEventSystem_UnregisterGlobalListener::InHandle' has a wrong offset!");

// Function LGUI.LGUIEventSystem.UnregisterHitEvent
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_UnregisterHitEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InHandle;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_UnregisterHitEvent) == 0x000008, "Wrong alignment on LGUIEventSystem_UnregisterHitEvent");
static_assert(sizeof(LGUIEventSystem_UnregisterHitEvent) == 0x000008, "Wrong size on LGUIEventSystem_UnregisterHitEvent");
static_assert(offsetof(LGUIEventSystem_UnregisterHitEvent, InHandle) == 0x000000, "Member 'LGUIEventSystem_UnregisterHitEvent::InHandle' has a wrong offset!");

// Function LGUI.LGUIEventSystem.IsNavigationActive
// 0x0001 (0x0001 - 0x0000)
struct LGUIEventSystem_IsNavigationActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_IsNavigationActive) == 0x000001, "Wrong alignment on LGUIEventSystem_IsNavigationActive");
static_assert(sizeof(LGUIEventSystem_IsNavigationActive) == 0x000001, "Wrong size on LGUIEventSystem_IsNavigationActive");
static_assert(offsetof(LGUIEventSystem_IsNavigationActive, ReturnValue) == 0x000000, "Member 'LGUIEventSystem_IsNavigationActive::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIFontData.GetDefaultFont
// 0x0008 (0x0008 - 0x0000)
struct LGUIFontData_GetDefaultFont final
{
public:
	class ULGUIFontData*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_GetDefaultFont) == 0x000008, "Wrong alignment on LGUIFontData_GetDefaultFont");
static_assert(sizeof(LGUIFontData_GetDefaultFont) == 0x000008, "Wrong size on LGUIFontData_GetDefaultFont");
static_assert(offsetof(LGUIFontData_GetDefaultFont, ReturnValue) == 0x000000, "Member 'LGUIFontData_GetDefaultFont::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIFontData.GetFonts
// 0x0010 (0x0010 - 0x0000)
struct LGUIFontData_GetFonts final
{
public:
	TArray<class ULGUIFontData*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_GetFonts) == 0x000008, "Wrong alignment on LGUIFontData_GetFonts");
static_assert(sizeof(LGUIFontData_GetFonts) == 0x000010, "Wrong size on LGUIFontData_GetFonts");
static_assert(offsetof(LGUIFontData_GetFonts, ReturnValue) == 0x000000, "Member 'LGUIFontData_GetFonts::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIFontData.SetAllFontCurrentCulture
// 0x0001 (0x0001 - 0x0000)
struct LGUIFontData_SetAllFontCurrentCulture final
{
public:
	ECulture                                      NewCulture;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_SetAllFontCurrentCulture) == 0x000001, "Wrong alignment on LGUIFontData_SetAllFontCurrentCulture");
static_assert(sizeof(LGUIFontData_SetAllFontCurrentCulture) == 0x000001, "Wrong size on LGUIFontData_SetAllFontCurrentCulture");
static_assert(offsetof(LGUIFontData_SetAllFontCurrentCulture, NewCulture) == 0x000000, "Member 'LGUIFontData_SetAllFontCurrentCulture::NewCulture' has a wrong offset!");

// Function LGUI.LGUIFontData.GetCharMapSize
// 0x0004 (0x0004 - 0x0000)
struct LGUIFontData_GetCharMapSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_GetCharMapSize) == 0x000004, "Wrong alignment on LGUIFontData_GetCharMapSize");
static_assert(sizeof(LGUIFontData_GetCharMapSize) == 0x000004, "Wrong size on LGUIFontData_GetCharMapSize");
static_assert(offsetof(LGUIFontData_GetCharMapSize, ReturnValue) == 0x000000, "Member 'LGUIFontData_GetCharMapSize::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIFontData.GetFontPath
// 0x0010 (0x0010 - 0x0000)
struct LGUIFontData_GetFontPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_GetFontPath) == 0x000008, "Wrong alignment on LGUIFontData_GetFontPath");
static_assert(sizeof(LGUIFontData_GetFontPath) == 0x000010, "Wrong size on LGUIFontData_GetFontPath");
static_assert(offsetof(LGUIFontData_GetFontPath, ReturnValue) == 0x000000, "Member 'LGUIFontData_GetFontPath::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIFontData.GetFontTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUIFontData_GetFontTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_GetFontTexture) == 0x000008, "Wrong alignment on LGUIFontData_GetFontTexture");
static_assert(sizeof(LGUIFontData_GetFontTexture) == 0x000008, "Wrong size on LGUIFontData_GetFontTexture");
static_assert(offsetof(LGUIFontData_GetFontTexture, ReturnValue) == 0x000000, "Member 'LGUIFontData_GetFontTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIFontData.GetFreeRectNum
// 0x0004 (0x0004 - 0x0000)
struct LGUIFontData_GetFreeRectNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_GetFreeRectNum) == 0x000004, "Wrong alignment on LGUIFontData_GetFreeRectNum");
static_assert(sizeof(LGUIFontData_GetFreeRectNum) == 0x000004, "Wrong size on LGUIFontData_GetFreeRectNum");
static_assert(offsetof(LGUIFontData_GetFreeRectNum, ReturnValue) == 0x000000, "Member 'LGUIFontData_GetFreeRectNum::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIFontData.GetTobeClearNum
// 0x0004 (0x0004 - 0x0000)
struct LGUIFontData_GetTobeClearNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_GetTobeClearNum) == 0x000004, "Wrong alignment on LGUIFontData_GetTobeClearNum");
static_assert(sizeof(LGUIFontData_GetTobeClearNum) == 0x000004, "Wrong size on LGUIFontData_GetTobeClearNum");
static_assert(offsetof(LGUIFontData_GetTobeClearNum, ReturnValue) == 0x000000, "Member 'LGUIFontData_GetTobeClearNum::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIFontData.GetUsedRectNum
// 0x0004 (0x0004 - 0x0000)
struct LGUIFontData_GetUsedRectNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIFontData_GetUsedRectNum) == 0x000004, "Wrong alignment on LGUIFontData_GetUsedRectNum");
static_assert(sizeof(LGUIFontData_GetUsedRectNum) == 0x000004, "Wrong size on LGUIFontData_GetUsedRectNum");
static_assert(offsetof(LGUIFontData_GetUsedRectNum, ReturnValue) == 0x000000, "Member 'LGUIFontData_GetUsedRectNum::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.SeekFrame
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_SeekFrame final
{
public:
	int32                                         FrameNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_SeekFrame) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_SeekFrame");
static_assert(sizeof(LGUIImageSequencePlayer_SeekFrame) == 0x000004, "Wrong size on LGUIImageSequencePlayer_SeekFrame");
static_assert(offsetof(LGUIImageSequencePlayer_SeekFrame, FrameNumber) == 0x000000, "Member 'LGUIImageSequencePlayer_SeekFrame::FrameNumber' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.SeekTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_SeekTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_SeekTime) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_SeekTime");
static_assert(sizeof(LGUIImageSequencePlayer_SeekTime) == 0x000004, "Wrong size on LGUIImageSequencePlayer_SeekTime");
static_assert(offsetof(LGUIImageSequencePlayer_SeekTime, Time) == 0x000000, "Member 'LGUIImageSequencePlayer_SeekTime::Time' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.SetFps
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_SetFps final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_SetFps) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_SetFps");
static_assert(sizeof(LGUIImageSequencePlayer_SetFps) == 0x000004, "Wrong size on LGUIImageSequencePlayer_SetFps");
static_assert(offsetof(LGUIImageSequencePlayer_SetFps, Value) == 0x000000, "Member 'LGUIImageSequencePlayer_SetFps::Value' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.SetLoop
// 0x0001 (0x0001 - 0x0000)
struct LGUIImageSequencePlayer_SetLoop final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_SetLoop) == 0x000001, "Wrong alignment on LGUIImageSequencePlayer_SetLoop");
static_assert(sizeof(LGUIImageSequencePlayer_SetLoop) == 0x000001, "Wrong size on LGUIImageSequencePlayer_SetLoop");
static_assert(offsetof(LGUIImageSequencePlayer_SetLoop, Value) == 0x000000, "Member 'LGUIImageSequencePlayer_SetLoop::Value' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_GetDuration) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_GetDuration");
static_assert(sizeof(LGUIImageSequencePlayer_GetDuration) == 0x000004, "Wrong size on LGUIImageSequencePlayer_GetDuration");
static_assert(offsetof(LGUIImageSequencePlayer_GetDuration, ReturnValue) == 0x000000, "Member 'LGUIImageSequencePlayer_GetDuration::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.GetFps
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_GetFps final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_GetFps) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_GetFps");
static_assert(sizeof(LGUIImageSequencePlayer_GetFps) == 0x000004, "Wrong size on LGUIImageSequencePlayer_GetFps");
static_assert(offsetof(LGUIImageSequencePlayer_GetFps, ReturnValue) == 0x000000, "Member 'LGUIImageSequencePlayer_GetFps::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.GetIsPlaying
// 0x0001 (0x0001 - 0x0000)
struct LGUIImageSequencePlayer_GetIsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_GetIsPlaying) == 0x000001, "Wrong alignment on LGUIImageSequencePlayer_GetIsPlaying");
static_assert(sizeof(LGUIImageSequencePlayer_GetIsPlaying) == 0x000001, "Wrong size on LGUIImageSequencePlayer_GetIsPlaying");
static_assert(offsetof(LGUIImageSequencePlayer_GetIsPlaying, ReturnValue) == 0x000000, "Member 'LGUIImageSequencePlayer_GetIsPlaying::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.GetLoop
// 0x0001 (0x0001 - 0x0000)
struct LGUIImageSequencePlayer_GetLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_GetLoop) == 0x000001, "Wrong alignment on LGUIImageSequencePlayer_GetLoop");
static_assert(sizeof(LGUIImageSequencePlayer_GetLoop) == 0x000001, "Wrong size on LGUIImageSequencePlayer_GetLoop");
static_assert(offsetof(LGUIImageSequencePlayer_GetLoop, ReturnValue) == 0x000000, "Member 'LGUIImageSequencePlayer_GetLoop::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetSelectableDelegate
// 0x0014 (0x0014 - 0x0000)
struct UISelectableComponent_SetSelectableDelegate final
{
public:
	TDelegate<void(class UUISelectableComponent* SelectableComponent, bool bCreate)> Delegate;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetSelectableDelegate) == 0x000004, "Wrong alignment on UISelectableComponent_SetSelectableDelegate");
static_assert(sizeof(UISelectableComponent_SetSelectableDelegate) == 0x000014, "Wrong size on UISelectableComponent_SetSelectableDelegate");
static_assert(offsetof(UISelectableComponent_SetSelectableDelegate, Delegate) == 0x000000, "Member 'UISelectableComponent_SetSelectableDelegate::Delegate' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetShieldMobileHighlight
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetShieldMobileHighlight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetShieldMobileHighlight) == 0x000001, "Wrong alignment on UISelectableComponent_SetShieldMobileHighlight");
static_assert(sizeof(UISelectableComponent_SetShieldMobileHighlight) == 0x000001, "Wrong size on UISelectableComponent_SetShieldMobileHighlight");
static_assert(offsetof(UISelectableComponent_SetShieldMobileHighlight, Value) == 0x000000, "Member 'UISelectableComponent_SetShieldMobileHighlight::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetShieldPCPress
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetShieldPCPress final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetShieldPCPress) == 0x000001, "Wrong alignment on UISelectableComponent_SetShieldPCPress");
static_assert(sizeof(UISelectableComponent_SetShieldPCPress) == 0x000001, "Wrong size on UISelectableComponent_SetShieldPCPress");
static_assert(offsetof(UISelectableComponent_SetShieldPCPress, Value) == 0x000000, "Member 'UISelectableComponent_SetShieldPCPress::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.ApplySelectionState
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_ApplySelectionState final
{
public:
	bool                                          bImmediateSet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_ApplySelectionState) == 0x000001, "Wrong alignment on UISelectableComponent_ApplySelectionState");
static_assert(sizeof(UISelectableComponent_ApplySelectionState) == 0x000001, "Wrong size on UISelectableComponent_ApplySelectionState");
static_assert(offsetof(UISelectableComponent_ApplySelectionState, bImmediateSet) == 0x000000, "Member 'UISelectableComponent_ApplySelectionState::bImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetCanClickWhenDisable
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetCanClickWhenDisable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetCanClickWhenDisable) == 0x000001, "Wrong alignment on UISelectableComponent_GetCanClickWhenDisable");
static_assert(sizeof(UISelectableComponent_GetCanClickWhenDisable) == 0x000001, "Wrong size on UISelectableComponent_GetCanClickWhenDisable");
static_assert(offsetof(UISelectableComponent_GetCanClickWhenDisable, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetCanClickWhenDisable::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetSelectionState
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetSelectionState final
{
public:
	EUISelectableSelectionState                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetSelectionState) == 0x000001, "Wrong alignment on UISelectableComponent_GetSelectionState");
static_assert(sizeof(UISelectableComponent_GetSelectionState) == 0x000001, "Wrong size on UISelectableComponent_GetSelectionState");
static_assert(offsetof(UISelectableComponent_GetSelectionState, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetSelectionState::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetSelfInteractive
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetSelfInteractive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetSelfInteractive) == 0x000001, "Wrong alignment on UISelectableComponent_GetSelfInteractive");
static_assert(sizeof(UISelectableComponent_GetSelfInteractive) == 0x000001, "Wrong size on UISelectableComponent_GetSelfInteractive");
static_assert(offsetof(UISelectableComponent_GetSelfInteractive, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetSelfInteractive::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.PlayUIAnimationByPlayInfo
// 0x0048 (0x0048 - 0x0000)
struct UISelectableComponent_PlayUIAnimationByPlayInfo final
{
public:
	struct FAnimationPlayInfo                     PlayInfo;                                          // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_PlayUIAnimationByPlayInfo) == 0x000008, "Wrong alignment on UISelectableComponent_PlayUIAnimationByPlayInfo");
static_assert(sizeof(UISelectableComponent_PlayUIAnimationByPlayInfo) == 0x000048, "Wrong size on UISelectableComponent_PlayUIAnimationByPlayInfo");
static_assert(offsetof(UISelectableComponent_PlayUIAnimationByPlayInfo, PlayInfo) == 0x000000, "Member 'UISelectableComponent_PlayUIAnimationByPlayInfo::PlayInfo' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetCanClickWhenDisable
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetCanClickWhenDisable final
{
public:
	bool                                          CanClickEnbale;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetCanClickWhenDisable) == 0x000001, "Wrong alignment on UISelectableComponent_SetCanClickWhenDisable");
static_assert(sizeof(UISelectableComponent_SetCanClickWhenDisable) == 0x000001, "Wrong size on UISelectableComponent_SetCanClickWhenDisable");
static_assert(offsetof(UISelectableComponent_SetCanClickWhenDisable, CanClickEnbale) == 0x000000, "Member 'UISelectableComponent_SetCanClickWhenDisable::CanClickEnbale' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetHighlightedColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_SetHighlightedColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetHighlightedColor) == 0x000004, "Wrong alignment on UISelectableComponent_SetHighlightedColor");
static_assert(sizeof(UISelectableComponent_SetHighlightedColor) == 0x000004, "Wrong size on UISelectableComponent_SetHighlightedColor");
static_assert(offsetof(UISelectableComponent_SetHighlightedColor, NewColor) == 0x000000, "Member 'UISelectableComponent_SetHighlightedColor::NewColor' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetHighlightedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetHighlightedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetHighlightedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_SetHighlightedSprite");
static_assert(sizeof(UISelectableComponent_SetHighlightedSprite) == 0x000008, "Wrong size on UISelectableComponent_SetHighlightedSprite");
static_assert(offsetof(UISelectableComponent_SetHighlightedSprite, NewSprite) == 0x000000, "Member 'UISelectableComponent_SetHighlightedSprite::NewSprite' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetIsCustomAnim
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetIsCustomAnim final
{
public:
	bool                                          bIsCustomAnim;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetIsCustomAnim) == 0x000001, "Wrong alignment on UISelectableComponent_SetIsCustomAnim");
static_assert(sizeof(UISelectableComponent_SetIsCustomAnim) == 0x000001, "Wrong size on UISelectableComponent_SetIsCustomAnim");
static_assert(offsetof(UISelectableComponent_SetIsCustomAnim, bIsCustomAnim) == 0x000000, "Member 'UISelectableComponent_SetIsCustomAnim::bIsCustomAnim' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetIsCustomTransition
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetIsCustomTransition final
{
public:
	bool                                          bIsCustomTransition;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetIsCustomTransition) == 0x000001, "Wrong alignment on UISelectableComponent_SetIsCustomTransition");
static_assert(sizeof(UISelectableComponent_SetIsCustomTransition) == 0x000001, "Wrong size on UISelectableComponent_SetIsCustomTransition");
static_assert(offsetof(UISelectableComponent_SetIsCustomTransition, bIsCustomTransition) == 0x000000, "Member 'UISelectableComponent_SetIsCustomTransition::bIsCustomTransition' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationDown
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationDown final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationDown) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationDown");
static_assert(sizeof(UISelectableComponent_SetNavigationDown) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationDown");
static_assert(offsetof(UISelectableComponent_SetNavigationDown, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationDown::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationDownExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationDownExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationDownExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationDownExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationDownExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationDownExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationDownExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationDownExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationGroup
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationGroup final
{
public:
	class UUINavigationGroupComponent*            Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationGroup) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationGroup");
static_assert(sizeof(UISelectableComponent_SetNavigationGroup) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationGroup");
static_assert(offsetof(UISelectableComponent_SetNavigationGroup, Component) == 0x000000, "Member 'UISelectableComponent_SetNavigationGroup::Component' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationGroupParent
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationGroupParent final
{
public:
	class UUISelectableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationGroupParent) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationGroupParent");
static_assert(sizeof(UISelectableComponent_SetNavigationGroupParent) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationGroupParent");
static_assert(offsetof(UISelectableComponent_SetNavigationGroupParent, Component) == 0x000000, "Member 'UISelectableComponent_SetNavigationGroupParent::Component' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationLeft
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationLeft final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationLeft) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationLeft");
static_assert(sizeof(UISelectableComponent_SetNavigationLeft) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationLeft");
static_assert(offsetof(UISelectableComponent_SetNavigationLeft, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationLeft::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationLeftExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationLeftExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationLeftExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationLeftExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationLeftExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationLeftExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationLeftExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationLeftExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationNext
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationNext final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationNext) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationNext");
static_assert(sizeof(UISelectableComponent_SetNavigationNext) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationNext");
static_assert(offsetof(UISelectableComponent_SetNavigationNext, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationNext::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationNextExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationNextExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationNextExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationNextExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationNextExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationNextExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationNextExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationNextExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationPrev
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationPrev final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationPrev) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationPrev");
static_assert(sizeof(UISelectableComponent_SetNavigationPrev) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationPrev");
static_assert(offsetof(UISelectableComponent_SetNavigationPrev, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationPrev::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationPrevExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationPrevExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationPrevExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationPrevExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationPrevExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationPrevExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationPrevExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationPrevExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationRight
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationRight final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationRight) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationRight");
static_assert(sizeof(UISelectableComponent_SetNavigationRight) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationRight");
static_assert(offsetof(UISelectableComponent_SetNavigationRight, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationRight::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationRightExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationRightExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationRightExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationRightExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationRightExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationRightExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationRightExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationRightExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationUp
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationUp final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationUp) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationUp");
static_assert(sizeof(UISelectableComponent_SetNavigationUp) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationUp");
static_assert(offsetof(UISelectableComponent_SetNavigationUp, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationUp::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationUpExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationUpExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationUpExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationUpExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationUpExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationUpExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationUpExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationUpExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNormalColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_SetNormalColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNormalColor) == 0x000004, "Wrong alignment on UISelectableComponent_SetNormalColor");
static_assert(sizeof(UISelectableComponent_SetNormalColor) == 0x000004, "Wrong size on UISelectableComponent_SetNormalColor");
static_assert(offsetof(UISelectableComponent_SetNormalColor, NewColor) == 0x000000, "Member 'UISelectableComponent_SetNormalColor::NewColor' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNormalSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNormalSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNormalSprite) == 0x000008, "Wrong alignment on UISelectableComponent_SetNormalSprite");
static_assert(sizeof(UISelectableComponent_SetNormalSprite) == 0x000008, "Wrong size on UISelectableComponent_SetNormalSprite");
static_assert(offsetof(UISelectableComponent_SetNormalSprite, NewSprite) == 0x000000, "Member 'UISelectableComponent_SetNormalSprite::NewSprite' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetPressedColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_SetPressedColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetPressedColor) == 0x000004, "Wrong alignment on UISelectableComponent_SetPressedColor");
static_assert(sizeof(UISelectableComponent_SetPressedColor) == 0x000004, "Wrong size on UISelectableComponent_SetPressedColor");
static_assert(offsetof(UISelectableComponent_SetPressedColor, NewColor) == 0x000000, "Member 'UISelectableComponent_SetPressedColor::NewColor' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetPressedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetPressedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetPressedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_SetPressedSprite");
static_assert(sizeof(UISelectableComponent_SetPressedSprite) == 0x000008, "Wrong size on UISelectableComponent_SetPressedSprite");
static_assert(offsetof(UISelectableComponent_SetPressedSprite, NewSprite) == 0x000000, "Member 'UISelectableComponent_SetPressedSprite::NewSprite' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetScrollView
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetScrollView final
{
public:
	class UUIScrollViewWithScrollbarComponent*    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetScrollView) == 0x000008, "Wrong alignment on UISelectableComponent_SetScrollView");
static_assert(sizeof(UISelectableComponent_SetScrollView) == 0x000008, "Wrong size on UISelectableComponent_SetScrollView");
static_assert(offsetof(UISelectableComponent_SetScrollView, Component) == 0x000000, "Member 'UISelectableComponent_SetScrollView::Component' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetSelectionState
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetSelectionState final
{
public:
	EUISelectableSelectionState                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetSelectionState) == 0x000001, "Wrong alignment on UISelectableComponent_SetSelectionState");
static_assert(sizeof(UISelectableComponent_SetSelectionState) == 0x000001, "Wrong size on UISelectableComponent_SetSelectionState");
static_assert(offsetof(UISelectableComponent_SetSelectionState, NewState) == 0x000000, "Member 'UISelectableComponent_SetSelectionState::NewState' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetSelfInteractive
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetSelfInteractive final
{
public:
	bool                                          InteractiveEnable;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetSelfInteractive) == 0x000001, "Wrong alignment on UISelectableComponent_SetSelfInteractive");
static_assert(sizeof(UISelectableComponent_SetSelfInteractive) == 0x000001, "Wrong size on UISelectableComponent_SetSelfInteractive");
static_assert(offsetof(UISelectableComponent_SetSelfInteractive, InteractiveEnable) == 0x000000, "Member 'UISelectableComponent_SetSelfInteractive::InteractiveEnable' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetTransitionTarget
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetTransitionTarget final
{
public:
	class AUIBaseActor*                           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetTransitionTarget) == 0x000008, "Wrong alignment on UISelectableComponent_SetTransitionTarget");
static_assert(sizeof(UISelectableComponent_SetTransitionTarget) == 0x000008, "Wrong size on UISelectableComponent_SetTransitionTarget");
static_assert(offsetof(UISelectableComponent_SetTransitionTarget, Value) == 0x000000, "Member 'UISelectableComponent_SetTransitionTarget::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetDisabledSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetDisabledSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetDisabledSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetDisabledSprite");
static_assert(sizeof(UISelectableComponent_GetDisabledSprite) == 0x000008, "Wrong size on UISelectableComponent_GetDisabledSprite");
static_assert(offsetof(UISelectableComponent_GetDisabledSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetDisabledSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetHighlightedColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_GetHighlightedColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetHighlightedColor) == 0x000004, "Wrong alignment on UISelectableComponent_GetHighlightedColor");
static_assert(sizeof(UISelectableComponent_GetHighlightedColor) == 0x000004, "Wrong size on UISelectableComponent_GetHighlightedColor");
static_assert(offsetof(UISelectableComponent_GetHighlightedColor, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetHighlightedColor::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetHighlightedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetHighlightedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetHighlightedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetHighlightedSprite");
static_assert(sizeof(UISelectableComponent_GetHighlightedSprite) == 0x000008, "Wrong size on UISelectableComponent_GetHighlightedSprite");
static_assert(offsetof(UISelectableComponent_GetHighlightedSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetHighlightedSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationDown
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationDown final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationDown) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationDown");
static_assert(sizeof(UISelectableComponent_GetNavigationDown) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationDown");
static_assert(offsetof(UISelectableComponent_GetNavigationDown, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationDown::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationDownExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationDownExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationDownExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationDownExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationDownExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationDownExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationDownExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationDownExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationLeft
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationLeft final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationLeft) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationLeft");
static_assert(sizeof(UISelectableComponent_GetNavigationLeft) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationLeft");
static_assert(offsetof(UISelectableComponent_GetNavigationLeft, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationLeft::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationLeftExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationLeftExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationLeftExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationLeftExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationLeftExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationLeftExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationLeftExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationLeftExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationNext
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationNext final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationNext) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationNext");
static_assert(sizeof(UISelectableComponent_GetNavigationNext) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationNext");
static_assert(offsetof(UISelectableComponent_GetNavigationNext, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationNext::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationNextExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationNextExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationNextExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationNextExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationNextExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationNextExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationNextExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationNextExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationPrev
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationPrev final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationPrev) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationPrev");
static_assert(sizeof(UISelectableComponent_GetNavigationPrev) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationPrev");
static_assert(offsetof(UISelectableComponent_GetNavigationPrev, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationPrev::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationPrevExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationPrevExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationPrevExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationPrevExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationPrevExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationPrevExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationPrevExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationPrevExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationRight
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationRight final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationRight) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationRight");
static_assert(sizeof(UISelectableComponent_GetNavigationRight) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationRight");
static_assert(offsetof(UISelectableComponent_GetNavigationRight, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationRight::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationRightExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationRightExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationRightExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationRightExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationRightExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationRightExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationRightExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationRightExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationUp
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationUp final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationUp) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationUp");
static_assert(sizeof(UISelectableComponent_GetNavigationUp) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationUp");
static_assert(offsetof(UISelectableComponent_GetNavigationUp, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationUp::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationUpExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationUpExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationUpExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationUpExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationUpExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationUpExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationUpExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationUpExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNormalColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_GetNormalColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNormalColor) == 0x000004, "Wrong alignment on UISelectableComponent_GetNormalColor");
static_assert(sizeof(UISelectableComponent_GetNormalColor) == 0x000004, "Wrong size on UISelectableComponent_GetNormalColor");
static_assert(offsetof(UISelectableComponent_GetNormalColor, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNormalColor::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNormalSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNormalSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNormalSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetNormalSprite");
static_assert(sizeof(UISelectableComponent_GetNormalSprite) == 0x000008, "Wrong size on UISelectableComponent_GetNormalSprite");
static_assert(offsetof(UISelectableComponent_GetNormalSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNormalSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetPressedColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_GetPressedColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetPressedColor) == 0x000004, "Wrong alignment on UISelectableComponent_GetPressedColor");
static_assert(sizeof(UISelectableComponent_GetPressedColor) == 0x000004, "Wrong size on UISelectableComponent_GetPressedColor");
static_assert(offsetof(UISelectableComponent_GetPressedColor, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetPressedColor::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetPressedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetPressedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetPressedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetPressedSprite");
static_assert(sizeof(UISelectableComponent_GetPressedSprite) == 0x000008, "Wrong size on UISelectableComponent_GetPressedSprite");
static_assert(offsetof(UISelectableComponent_GetPressedSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetPressedSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetSelectedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetSelectedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetSelectedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetSelectedSprite");
static_assert(sizeof(UISelectableComponent_GetSelectedSprite) == 0x000008, "Wrong size on UISelectableComponent_GetSelectedSprite");
static_assert(offsetof(UISelectableComponent_GetSelectedSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetSelectedSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetTransitionTarget
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetTransitionTarget final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetTransitionTarget) == 0x000008, "Wrong alignment on UISelectableComponent_GetTransitionTarget");
static_assert(sizeof(UISelectableComponent_GetTransitionTarget) == 0x000008, "Wrong size on UISelectableComponent_GetTransitionTarget");
static_assert(offsetof(UISelectableComponent_GetTransitionTarget, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetTransitionTarget::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.IsInteractable
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_IsInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_IsInteractable) == 0x000001, "Wrong alignment on UISelectableComponent_IsInteractable");
static_assert(sizeof(UISelectableComponent_IsInteractable) == 0x000001, "Wrong size on UISelectableComponent_IsInteractable");
static_assert(offsetof(UISelectableComponent_IsInteractable, ReturnValue) == 0x000000, "Member 'UISelectableComponent_IsInteractable::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.RegisterInputActivateEvent
// 0x0020 (0x0020 - 0x0000)
struct UITextInputComponent_RegisterInputActivateEvent final
{
public:
	TDelegate<void(bool InActivate)>              InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1171[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_RegisterInputActivateEvent) == 0x000008, "Wrong alignment on UITextInputComponent_RegisterInputActivateEvent");
static_assert(sizeof(UITextInputComponent_RegisterInputActivateEvent) == 0x000020, "Wrong size on UITextInputComponent_RegisterInputActivateEvent");
static_assert(offsetof(UITextInputComponent_RegisterInputActivateEvent, InDelegate) == 0x000000, "Member 'UITextInputComponent_RegisterInputActivateEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_RegisterInputActivateEvent, ReturnValue) == 0x000018, "Member 'UITextInputComponent_RegisterInputActivateEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.RegisterSubmitEvent
// 0x0020 (0x0020 - 0x0000)
struct UITextInputComponent_RegisterSubmitEvent final
{
public:
	TDelegate<void(const class FString& InString)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1172[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_RegisterSubmitEvent) == 0x000008, "Wrong alignment on UITextInputComponent_RegisterSubmitEvent");
static_assert(sizeof(UITextInputComponent_RegisterSubmitEvent) == 0x000020, "Wrong size on UITextInputComponent_RegisterSubmitEvent");
static_assert(offsetof(UITextInputComponent_RegisterSubmitEvent, InDelegate) == 0x000000, "Member 'UITextInputComponent_RegisterSubmitEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_RegisterSubmitEvent, ReturnValue) == 0x000018, "Member 'UITextInputComponent_RegisterSubmitEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.RegisterValueChangeEvent
// 0x0020 (0x0020 - 0x0000)
struct UITextInputComponent_RegisterValueChangeEvent final
{
public:
	TDelegate<void(const class FString& InString)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1173[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_RegisterValueChangeEvent) == 0x000008, "Wrong alignment on UITextInputComponent_RegisterValueChangeEvent");
static_assert(sizeof(UITextInputComponent_RegisterValueChangeEvent) == 0x000020, "Wrong size on UITextInputComponent_RegisterValueChangeEvent");
static_assert(offsetof(UITextInputComponent_RegisterValueChangeEvent, InDelegate) == 0x000000, "Member 'UITextInputComponent_RegisterValueChangeEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_RegisterValueChangeEvent, ReturnValue) == 0x000018, "Member 'UITextInputComponent_RegisterValueChangeEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetCustomInputTypeFunction
// 0x0014 (0x0014 - 0x0000)
struct UITextInputComponent_SetCustomInputTypeFunction final
{
public:
	TDelegate<void(const class FString& InString)> InFunction;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetCustomInputTypeFunction) == 0x000004, "Wrong alignment on UITextInputComponent_SetCustomInputTypeFunction");
static_assert(sizeof(UITextInputComponent_SetCustomInputTypeFunction) == 0x000014, "Wrong size on UITextInputComponent_SetCustomInputTypeFunction");
static_assert(offsetof(UITextInputComponent_SetCustomInputTypeFunction, InFunction) == 0x000000, "Member 'UITextInputComponent_SetCustomInputTypeFunction::InFunction' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetInputType
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_SetInputType final
{
public:
	ELGUITextInputType                            NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetInputType) == 0x000001, "Wrong alignment on UITextInputComponent_SetInputType");
static_assert(sizeof(UITextInputComponent_SetInputType) == 0x000001, "Wrong size on UITextInputComponent_SetInputType");
static_assert(offsetof(UITextInputComponent_SetInputType, NewValue) == 0x000000, "Member 'UITextInputComponent_SetInputType::NewValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetText
// 0x0018 (0x0018 - 0x0000)
struct UITextInputComponent_SetText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFireEvent;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1174[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITextInputComponent_SetText) == 0x000008, "Wrong alignment on UITextInputComponent_SetText");
static_assert(sizeof(UITextInputComponent_SetText) == 0x000018, "Wrong size on UITextInputComponent_SetText");
static_assert(offsetof(UITextInputComponent_SetText, InText) == 0x000000, "Member 'UITextInputComponent_SetText::InText' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_SetText, InFireEvent) == 0x000010, "Member 'UITextInputComponent_SetText::InFireEvent' has a wrong offset!");

// Function LGUI.UITextInputComponent.UnregisterInputActivateEvent
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_UnregisterInputActivateEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_UnregisterInputActivateEvent) == 0x000008, "Wrong alignment on UITextInputComponent_UnregisterInputActivateEvent");
static_assert(sizeof(UITextInputComponent_UnregisterInputActivateEvent) == 0x000008, "Wrong size on UITextInputComponent_UnregisterInputActivateEvent");
static_assert(offsetof(UITextInputComponent_UnregisterInputActivateEvent, InDelegateHandle) == 0x000000, "Member 'UITextInputComponent_UnregisterInputActivateEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UITextInputComponent.UnregisterSubmitEvent
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_UnregisterSubmitEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_UnregisterSubmitEvent) == 0x000008, "Wrong alignment on UITextInputComponent_UnregisterSubmitEvent");
static_assert(sizeof(UITextInputComponent_UnregisterSubmitEvent) == 0x000008, "Wrong size on UITextInputComponent_UnregisterSubmitEvent");
static_assert(offsetof(UITextInputComponent_UnregisterSubmitEvent, InDelegateHandle) == 0x000000, "Member 'UITextInputComponent_UnregisterSubmitEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UITextInputComponent.UnregisterValueChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_UnregisterValueChangeEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_UnregisterValueChangeEvent) == 0x000008, "Wrong alignment on UITextInputComponent_UnregisterValueChangeEvent");
static_assert(sizeof(UITextInputComponent_UnregisterValueChangeEvent) == 0x000008, "Wrong size on UITextInputComponent_UnregisterValueChangeEvent");
static_assert(offsetof(UITextInputComponent_UnregisterValueChangeEvent, InDelegateHandle) == 0x000000, "Member 'UITextInputComponent_UnregisterValueChangeEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetInputType
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_GetInputType final
{
public:
	ELGUITextInputType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetInputType) == 0x000001, "Wrong alignment on UITextInputComponent_GetInputType");
static_assert(sizeof(UITextInputComponent_GetInputType) == 0x000001, "Wrong size on UITextInputComponent_GetInputType");
static_assert(offsetof(UITextInputComponent_GetInputType, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetInputType::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetText
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetText) == 0x000008, "Wrong alignment on UITextInputComponent_GetText");
static_assert(sizeof(UITextInputComponent_GetText) == 0x000010, "Wrong size on UITextInputComponent_GetText");
static_assert(offsetof(UITextInputComponent_GetText, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetText::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetTextComponent
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_GetTextComponent final
{
public:
	class UUIText*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetTextComponent) == 0x000008, "Wrong alignment on UITextInputComponent_GetTextComponent");
static_assert(sizeof(UITextInputComponent_GetTextComponent) == 0x000008, "Wrong size on UITextInputComponent_GetTextComponent");
static_assert(offsetof(UITextInputComponent_GetTextComponent, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetTextComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIManagerActor.GetGlobalUiBlurIndex
// 0x0010 (0x0010 - 0x0000)
struct LGUIManagerActor_GetGlobalUiBlurIndex final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1179[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIManagerActor_GetGlobalUiBlurIndex) == 0x000008, "Wrong alignment on LGUIManagerActor_GetGlobalUiBlurIndex");
static_assert(sizeof(LGUIManagerActor_GetGlobalUiBlurIndex) == 0x000010, "Wrong size on LGUIManagerActor_GetGlobalUiBlurIndex");
static_assert(offsetof(LGUIManagerActor_GetGlobalUiBlurIndex, WorldContextObject) == 0x000000, "Member 'LGUIManagerActor_GetGlobalUiBlurIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIManagerActor_GetGlobalUiBlurIndex, ReturnValue) == 0x000008, "Member 'LGUIManagerActor_GetGlobalUiBlurIndex::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIManagerActor.SetDebugRootLayer
// 0x0010 (0x0010 - 0x0000)
struct LGUIManagerActor_SetDebugRootLayer final
{
public:
	class UObject*                                WorldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                LayerItem;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIManagerActor_SetDebugRootLayer) == 0x000008, "Wrong alignment on LGUIManagerActor_SetDebugRootLayer");
static_assert(sizeof(LGUIManagerActor_SetDebugRootLayer) == 0x000010, "Wrong size on LGUIManagerActor_SetDebugRootLayer");
static_assert(offsetof(LGUIManagerActor_SetDebugRootLayer, WorldContextObj) == 0x000000, "Member 'LGUIManagerActor_SetDebugRootLayer::WorldContextObj' has a wrong offset!");
static_assert(offsetof(LGUIManagerActor_SetDebugRootLayer, LayerItem) == 0x000008, "Member 'LGUIManagerActor_SetDebugRootLayer::LayerItem' has a wrong offset!");

// Function LGUI.LGUIPlayTween.RegisterOnComplete
// 0x0020 (0x0020 - 0x0000)
struct LGUIPlayTween_RegisterOnComplete final
{
public:
	TDelegate<void()>                             InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_117F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTween_RegisterOnComplete) == 0x000008, "Wrong alignment on LGUIPlayTween_RegisterOnComplete");
static_assert(sizeof(LGUIPlayTween_RegisterOnComplete) == 0x000020, "Wrong size on LGUIPlayTween_RegisterOnComplete");
static_assert(offsetof(LGUIPlayTween_RegisterOnComplete, InDelegate) == 0x000000, "Member 'LGUIPlayTween_RegisterOnComplete::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIPlayTween_RegisterOnComplete, ReturnValue) == 0x000018, "Member 'LGUIPlayTween_RegisterOnComplete::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPlayTween.UnregisterOnComplete
// 0x0008 (0x0008 - 0x0000)
struct LGUIPlayTween_UnregisterOnComplete final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTween_UnregisterOnComplete) == 0x000008, "Wrong alignment on LGUIPlayTween_UnregisterOnComplete");
static_assert(sizeof(LGUIPlayTween_UnregisterOnComplete) == 0x000008, "Wrong size on LGUIPlayTween_UnregisterOnComplete");
static_assert(offsetof(LGUIPlayTween_UnregisterOnComplete, InDelegateHandle) == 0x000000, "Member 'LGUIPlayTween_UnregisterOnComplete::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIPlayTween.GetTweener
// 0x0008 (0x0008 - 0x0000)
struct LGUIPlayTween_GetTweener final
{
public:
	class ULTweener*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTween_GetTweener) == 0x000008, "Wrong alignment on LGUIPlayTween_GetTweener");
static_assert(sizeof(LGUIPlayTween_GetTweener) == 0x000008, "Wrong size on LGUIPlayTween_GetTweener");
static_assert(offsetof(LGUIPlayTween_GetTweener, ReturnValue) == 0x000000, "Member 'LGUIPlayTween_GetTweener::ReturnValue' has a wrong offset!");

// Function LGUI.UIInteractionGroup.SetIgnoreParentGroup
// 0x0001 (0x0001 - 0x0000)
struct UIInteractionGroup_SetIgnoreParentGroup final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInteractionGroup_SetIgnoreParentGroup) == 0x000001, "Wrong alignment on UIInteractionGroup_SetIgnoreParentGroup");
static_assert(sizeof(UIInteractionGroup_SetIgnoreParentGroup) == 0x000001, "Wrong size on UIInteractionGroup_SetIgnoreParentGroup");
static_assert(offsetof(UIInteractionGroup_SetIgnoreParentGroup, Value) == 0x000000, "Member 'UIInteractionGroup_SetIgnoreParentGroup::Value' has a wrong offset!");

// Function LGUI.UIInteractionGroup.SetInteractable
// 0x0001 (0x0001 - 0x0000)
struct UIInteractionGroup_SetInteractable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInteractionGroup_SetInteractable) == 0x000001, "Wrong alignment on UIInteractionGroup_SetInteractable");
static_assert(sizeof(UIInteractionGroup_SetInteractable) == 0x000001, "Wrong size on UIInteractionGroup_SetInteractable");
static_assert(offsetof(UIInteractionGroup_SetInteractable, Value) == 0x000000, "Member 'UIInteractionGroup_SetInteractable::Value' has a wrong offset!");

// Function LGUI.UIInteractionGroup.GetIgnoreParentGroup
// 0x0001 (0x0001 - 0x0000)
struct UIInteractionGroup_GetIgnoreParentGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInteractionGroup_GetIgnoreParentGroup) == 0x000001, "Wrong alignment on UIInteractionGroup_GetIgnoreParentGroup");
static_assert(sizeof(UIInteractionGroup_GetIgnoreParentGroup) == 0x000001, "Wrong size on UIInteractionGroup_GetIgnoreParentGroup");
static_assert(offsetof(UIInteractionGroup_GetIgnoreParentGroup, ReturnValue) == 0x000000, "Member 'UIInteractionGroup_GetIgnoreParentGroup::ReturnValue' has a wrong offset!");

// Function LGUI.UIInteractionGroup.GetInteractable
// 0x0001 (0x0001 - 0x0000)
struct UIInteractionGroup_GetInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInteractionGroup_GetInteractable) == 0x000001, "Wrong alignment on UIInteractionGroup_GetInteractable");
static_assert(sizeof(UIInteractionGroup_GetInteractable) == 0x000001, "Wrong size on UIInteractionGroup_GetInteractable");
static_assert(offsetof(UIInteractionGroup_GetInteractable, ReturnValue) == 0x000000, "Member 'UIInteractionGroup_GetInteractable::ReturnValue' has a wrong offset!");

// Function LGUI.UINiagaraActor.GetUINiagara
// 0x0008 (0x0008 - 0x0000)
struct UINiagaraActor_GetUINiagara final
{
public:
	class UUINiagara*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagaraActor_GetUINiagara) == 0x000008, "Wrong alignment on UINiagaraActor_GetUINiagara");
static_assert(sizeof(UINiagaraActor_GetUINiagara) == 0x000008, "Wrong size on UINiagaraActor_GetUINiagara");
static_assert(offsetof(UINiagaraActor_GetUINiagara, ReturnValue) == 0x000000, "Member 'UINiagaraActor_GetUINiagara::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutBase.SetGridAnimationInterval
// 0x0004 (0x0004 - 0x0000)
struct UILayoutBase_SetGridAnimationInterval final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutBase_SetGridAnimationInterval) == 0x000004, "Wrong alignment on UILayoutBase_SetGridAnimationInterval");
static_assert(sizeof(UILayoutBase_SetGridAnimationInterval) == 0x000004, "Wrong size on UILayoutBase_SetGridAnimationInterval");
static_assert(offsetof(UILayoutBase_SetGridAnimationInterval, Value) == 0x000000, "Member 'UILayoutBase_SetGridAnimationInterval::Value' has a wrong offset!");

// Function LGUI.UILayoutBase.SetGridAnimationStartTime
// 0x0004 (0x0004 - 0x0000)
struct UILayoutBase_SetGridAnimationStartTime final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutBase_SetGridAnimationStartTime) == 0x000004, "Wrong alignment on UILayoutBase_SetGridAnimationStartTime");
static_assert(sizeof(UILayoutBase_SetGridAnimationStartTime) == 0x000004, "Wrong size on UILayoutBase_SetGridAnimationStartTime");
static_assert(offsetof(UILayoutBase_SetGridAnimationStartTime, Value) == 0x000000, "Member 'UILayoutBase_SetGridAnimationStartTime::Value' has a wrong offset!");

// Function LGUI.UILayoutBase.SetInAnimation
// 0x0001 (0x0001 - 0x0000)
struct UILayoutBase_SetInAnimation final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutBase_SetInAnimation) == 0x000001, "Wrong alignment on UILayoutBase_SetInAnimation");
static_assert(sizeof(UILayoutBase_SetInAnimation) == 0x000001, "Wrong size on UILayoutBase_SetInAnimation");
static_assert(offsetof(UILayoutBase_SetInAnimation, State) == 0x000000, "Member 'UILayoutBase_SetInAnimation::State' has a wrong offset!");

// Function LGUI.UILayoutBase.GetGridAnimationInterval
// 0x0004 (0x0004 - 0x0000)
struct UILayoutBase_GetGridAnimationInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutBase_GetGridAnimationInterval) == 0x000004, "Wrong alignment on UILayoutBase_GetGridAnimationInterval");
static_assert(sizeof(UILayoutBase_GetGridAnimationInterval) == 0x000004, "Wrong size on UILayoutBase_GetGridAnimationInterval");
static_assert(offsetof(UILayoutBase_GetGridAnimationInterval, ReturnValue) == 0x000000, "Member 'UILayoutBase_GetGridAnimationInterval::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutBase.GetGridAnimationStartTime
// 0x0004 (0x0004 - 0x0000)
struct UILayoutBase_GetGridAnimationStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutBase_GetGridAnimationStartTime) == 0x000004, "Wrong alignment on UILayoutBase_GetGridAnimationStartTime");
static_assert(sizeof(UILayoutBase_GetGridAnimationStartTime) == 0x000004, "Wrong size on UILayoutBase_GetGridAnimationStartTime");
static_assert(offsetof(UILayoutBase_GetGridAnimationStartTime, ReturnValue) == 0x000000, "Member 'UILayoutBase_GetGridAnimationStartTime::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutBase.GetInAnimation
// 0x0001 (0x0001 - 0x0000)
struct UILayoutBase_GetInAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutBase_GetInAnimation) == 0x000001, "Wrong alignment on UILayoutBase_GetInAnimation");
static_assert(sizeof(UILayoutBase_GetInAnimation) == 0x000001, "Wrong size on UILayoutBase_GetInAnimation");
static_assert(offsetof(UILayoutBase_GetInAnimation, ReturnValue) == 0x000000, "Member 'UILayoutBase_GetInAnimation::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.CancelAnimation
// 0x0001 (0x0001 - 0x0000)
struct UILayoutWithAnimation_CancelAnimation final
{
public:
	bool                                          CallComplete;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_CancelAnimation) == 0x000001, "Wrong alignment on UILayoutWithAnimation_CancelAnimation");
static_assert(sizeof(UILayoutWithAnimation_CancelAnimation) == 0x000001, "Wrong size on UILayoutWithAnimation_CancelAnimation");
static_assert(offsetof(UILayoutWithAnimation_CancelAnimation, CallComplete) == 0x000000, "Member 'UILayoutWithAnimation_CancelAnimation::CallComplete' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.SetAnimationDuration
// 0x0004 (0x0004 - 0x0000)
struct UILayoutWithAnimation_SetAnimationDuration final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_SetAnimationDuration) == 0x000004, "Wrong alignment on UILayoutWithAnimation_SetAnimationDuration");
static_assert(sizeof(UILayoutWithAnimation_SetAnimationDuration) == 0x000004, "Wrong size on UILayoutWithAnimation_SetAnimationDuration");
static_assert(offsetof(UILayoutWithAnimation_SetAnimationDuration, Value) == 0x000000, "Member 'UILayoutWithAnimation_SetAnimationDuration::Value' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.SetAnimationType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutWithAnimation_SetAnimationType final
{
public:
	EUILayoutChangePositionAnimationType          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_SetAnimationType) == 0x000001, "Wrong alignment on UILayoutWithAnimation_SetAnimationType");
static_assert(sizeof(UILayoutWithAnimation_SetAnimationType) == 0x000001, "Wrong size on UILayoutWithAnimation_SetAnimationType");
static_assert(offsetof(UILayoutWithAnimation_SetAnimationType, Value) == 0x000000, "Member 'UILayoutWithAnimation_SetAnimationType::Value' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.GetAnimationDuration
// 0x0004 (0x0004 - 0x0000)
struct UILayoutWithAnimation_GetAnimationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_GetAnimationDuration) == 0x000004, "Wrong alignment on UILayoutWithAnimation_GetAnimationDuration");
static_assert(sizeof(UILayoutWithAnimation_GetAnimationDuration) == 0x000004, "Wrong size on UILayoutWithAnimation_GetAnimationDuration");
static_assert(offsetof(UILayoutWithAnimation_GetAnimationDuration, ReturnValue) == 0x000000, "Member 'UILayoutWithAnimation_GetAnimationDuration::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.GetAnimationType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutWithAnimation_GetAnimationType final
{
public:
	EUILayoutChangePositionAnimationType          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_GetAnimationType) == 0x000001, "Wrong alignment on UILayoutWithAnimation_GetAnimationType");
static_assert(sizeof(UILayoutWithAnimation_GetAnimationType) == 0x000001, "Wrong size on UILayoutWithAnimation_GetAnimationType");
static_assert(offsetof(UILayoutWithAnimation_GetAnimationType, ReturnValue) == 0x000000, "Member 'UILayoutWithAnimation_GetAnimationType::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.SetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetAlign final
{
public:
	ELGUILayoutAlignmentType                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetAlign) == 0x000001, "Wrong alignment on UIGridLayout_SetAlign");
static_assert(sizeof(UIGridLayout_SetAlign) == 0x000001, "Wrong size on UIGridLayout_SetAlign");
static_assert(offsetof(UIGridLayout_SetAlign, Value) == 0x000000, "Member 'UIGridLayout_SetAlign::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetCellSize
// 0x0008 (0x0008 - 0x0000)
struct UIGridLayout_SetCellSize final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetCellSize) == 0x000004, "Wrong alignment on UIGridLayout_SetCellSize");
static_assert(sizeof(UIGridLayout_SetCellSize) == 0x000008, "Wrong size on UIGridLayout_SetCellSize");
static_assert(offsetof(UIGridLayout_SetCellSize, Value) == 0x000000, "Member 'UIGridLayout_SetCellSize::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetDependOnSizeOrCount
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetDependOnSizeOrCount final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetDependOnSizeOrCount) == 0x000001, "Wrong alignment on UIGridLayout_SetDependOnSizeOrCount");
static_assert(sizeof(UIGridLayout_SetDependOnSizeOrCount) == 0x000001, "Wrong size on UIGridLayout_SetDependOnSizeOrCount");
static_assert(offsetof(UIGridLayout_SetDependOnSizeOrCount, Value) == 0x000000, "Member 'UIGridLayout_SetDependOnSizeOrCount::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetExpendChildSize
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetExpendChildSize final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetExpendChildSize) == 0x000001, "Wrong alignment on UIGridLayout_SetExpendChildSize");
static_assert(sizeof(UIGridLayout_SetExpendChildSize) == 0x000001, "Wrong size on UIGridLayout_SetExpendChildSize");
static_assert(offsetof(UIGridLayout_SetExpendChildSize, Value) == 0x000000, "Member 'UIGridLayout_SetExpendChildSize::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIGridLayout_SetHeightFitToChildren");
static_assert(sizeof(UIGridLayout_SetHeightFitToChildren) == 0x000001, "Wrong size on UIGridLayout_SetHeightFitToChildren");
static_assert(offsetof(UIGridLayout_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIGridLayout_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetHorizontalOrVertical
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetHorizontalOrVertical final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetHorizontalOrVertical) == 0x000001, "Wrong alignment on UIGridLayout_SetHorizontalOrVertical");
static_assert(sizeof(UIGridLayout_SetHorizontalOrVertical) == 0x000001, "Wrong size on UIGridLayout_SetHorizontalOrVertical");
static_assert(offsetof(UIGridLayout_SetHorizontalOrVertical, Value) == 0x000000, "Member 'UIGridLayout_SetHorizontalOrVertical::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetLastLineCanAlign
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetLastLineCanAlign final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetLastLineCanAlign) == 0x000001, "Wrong alignment on UIGridLayout_SetLastLineCanAlign");
static_assert(sizeof(UIGridLayout_SetLastLineCanAlign) == 0x000001, "Wrong size on UIGridLayout_SetLastLineCanAlign");
static_assert(offsetof(UIGridLayout_SetLastLineCanAlign, Value) == 0x000000, "Member 'UIGridLayout_SetLastLineCanAlign::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetLineCount
// 0x0004 (0x0004 - 0x0000)
struct UIGridLayout_SetLineCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetLineCount) == 0x000004, "Wrong alignment on UIGridLayout_SetLineCount");
static_assert(sizeof(UIGridLayout_SetLineCount) == 0x000004, "Wrong size on UIGridLayout_SetLineCount");
static_assert(offsetof(UIGridLayout_SetLineCount, Value) == 0x000000, "Member 'UIGridLayout_SetLineCount::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetMaxItemCountInOneLine
// 0x0004 (0x0004 - 0x0000)
struct UIGridLayout_SetMaxItemCountInOneLine final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetMaxItemCountInOneLine) == 0x000004, "Wrong alignment on UIGridLayout_SetMaxItemCountInOneLine");
static_assert(sizeof(UIGridLayout_SetMaxItemCountInOneLine) == 0x000004, "Wrong size on UIGridLayout_SetMaxItemCountInOneLine");
static_assert(offsetof(UIGridLayout_SetMaxItemCountInOneLine, Value) == 0x000000, "Member 'UIGridLayout_SetMaxItemCountInOneLine::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetPadding) == 0x000004, "Wrong alignment on UIGridLayout_SetPadding");
static_assert(sizeof(UIGridLayout_SetPadding) == 0x000010, "Wrong size on UIGridLayout_SetPadding");
static_assert(offsetof(UIGridLayout_SetPadding, Value) == 0x000000, "Member 'UIGridLayout_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetSpacing
// 0x0008 (0x0008 - 0x0000)
struct UIGridLayout_SetSpacing final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetSpacing) == 0x000004, "Wrong alignment on UIGridLayout_SetSpacing");
static_assert(sizeof(UIGridLayout_SetSpacing) == 0x000008, "Wrong size on UIGridLayout_SetSpacing");
static_assert(offsetof(UIGridLayout_SetSpacing, Value) == 0x000000, "Member 'UIGridLayout_SetSpacing::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIGridLayout_SetWidthFitToChildren");
static_assert(sizeof(UIGridLayout_SetWidthFitToChildren) == 0x000001, "Wrong size on UIGridLayout_SetWidthFitToChildren");
static_assert(offsetof(UIGridLayout_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIGridLayout_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.GetActuralRange
// 0x0008 (0x0008 - 0x0000)
struct UIGridLayout_GetActuralRange final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetActuralRange) == 0x000004, "Wrong alignment on UIGridLayout_GetActuralRange");
static_assert(sizeof(UIGridLayout_GetActuralRange) == 0x000008, "Wrong size on UIGridLayout_GetActuralRange");
static_assert(offsetof(UIGridLayout_GetActuralRange, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetActuralRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetAlign final
{
public:
	ELGUILayoutAlignmentType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetAlign) == 0x000001, "Wrong alignment on UIGridLayout_GetAlign");
static_assert(sizeof(UIGridLayout_GetAlign) == 0x000001, "Wrong size on UIGridLayout_GetAlign");
static_assert(offsetof(UIGridLayout_GetAlign, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetCellSize
// 0x0008 (0x0008 - 0x0000)
struct UIGridLayout_GetCellSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetCellSize) == 0x000004, "Wrong alignment on UIGridLayout_GetCellSize");
static_assert(sizeof(UIGridLayout_GetCellSize) == 0x000008, "Wrong size on UIGridLayout_GetCellSize");
static_assert(offsetof(UIGridLayout_GetCellSize, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetCellSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetDependOnSizeOrCount
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetDependOnSizeOrCount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetDependOnSizeOrCount) == 0x000001, "Wrong alignment on UIGridLayout_GetDependOnSizeOrCount");
static_assert(sizeof(UIGridLayout_GetDependOnSizeOrCount) == 0x000001, "Wrong size on UIGridLayout_GetDependOnSizeOrCount");
static_assert(offsetof(UIGridLayout_GetDependOnSizeOrCount, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetDependOnSizeOrCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetExpendChildSize
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetExpendChildSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetExpendChildSize) == 0x000001, "Wrong alignment on UIGridLayout_GetExpendChildSize");
static_assert(sizeof(UIGridLayout_GetExpendChildSize) == 0x000001, "Wrong size on UIGridLayout_GetExpendChildSize");
static_assert(offsetof(UIGridLayout_GetExpendChildSize, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetExpendChildSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIGridLayout_GetHeightFitToChildren");
static_assert(sizeof(UIGridLayout_GetHeightFitToChildren) == 0x000001, "Wrong size on UIGridLayout_GetHeightFitToChildren");
static_assert(offsetof(UIGridLayout_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetHorizontalOrVertical
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetHorizontalOrVertical final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetHorizontalOrVertical) == 0x000001, "Wrong alignment on UIGridLayout_GetHorizontalOrVertical");
static_assert(sizeof(UIGridLayout_GetHorizontalOrVertical) == 0x000001, "Wrong size on UIGridLayout_GetHorizontalOrVertical");
static_assert(offsetof(UIGridLayout_GetHorizontalOrVertical, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetHorizontalOrVertical::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetLastLineCanAlign
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetLastLineCanAlign final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetLastLineCanAlign) == 0x000001, "Wrong alignment on UIGridLayout_GetLastLineCanAlign");
static_assert(sizeof(UIGridLayout_GetLastLineCanAlign) == 0x000001, "Wrong size on UIGridLayout_GetLastLineCanAlign");
static_assert(offsetof(UIGridLayout_GetLastLineCanAlign, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetLastLineCanAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetLineCount
// 0x0004 (0x0004 - 0x0000)
struct UIGridLayout_GetLineCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetLineCount) == 0x000004, "Wrong alignment on UIGridLayout_GetLineCount");
static_assert(sizeof(UIGridLayout_GetLineCount) == 0x000004, "Wrong size on UIGridLayout_GetLineCount");
static_assert(offsetof(UIGridLayout_GetLineCount, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetLineCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetMaxItemCountInOneLine
// 0x0004 (0x0004 - 0x0000)
struct UIGridLayout_GetMaxItemCountInOneLine final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetMaxItemCountInOneLine) == 0x000004, "Wrong alignment on UIGridLayout_GetMaxItemCountInOneLine");
static_assert(sizeof(UIGridLayout_GetMaxItemCountInOneLine) == 0x000004, "Wrong size on UIGridLayout_GetMaxItemCountInOneLine");
static_assert(offsetof(UIGridLayout_GetMaxItemCountInOneLine, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetMaxItemCountInOneLine::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetPadding) == 0x000004, "Wrong alignment on UIGridLayout_GetPadding");
static_assert(sizeof(UIGridLayout_GetPadding) == 0x000010, "Wrong size on UIGridLayout_GetPadding");
static_assert(offsetof(UIGridLayout_GetPadding, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetSpacing
// 0x0008 (0x0008 - 0x0000)
struct UIGridLayout_GetSpacing final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetSpacing) == 0x000004, "Wrong alignment on UIGridLayout_GetSpacing");
static_assert(sizeof(UIGridLayout_GetSpacing) == 0x000008, "Wrong size on UIGridLayout_GetSpacing");
static_assert(offsetof(UIGridLayout_GetSpacing, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetSpacing::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIGridLayout_GetWidthFitToChildren");
static_assert(sizeof(UIGridLayout_GetWidthFitToChildren) == 0x000001, "Wrong size on UIGridLayout_GetWidthFitToChildren");
static_assert(offsetof(UIGridLayout_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UINavigationTextChangeListener.OnNotifyTextChangeBP
// 0x0010 (0x0010 - 0x0000)
struct UINavigationTextChangeListener_OnNotifyTextChangeBP final
{
public:
	class FString                                 NotifyText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationTextChangeListener_OnNotifyTextChangeBP) == 0x000008, "Wrong alignment on UINavigationTextChangeListener_OnNotifyTextChangeBP");
static_assert(sizeof(UINavigationTextChangeListener_OnNotifyTextChangeBP) == 0x000010, "Wrong size on UINavigationTextChangeListener_OnNotifyTextChangeBP");
static_assert(offsetof(UINavigationTextChangeListener_OnNotifyTextChangeBP, NotifyText) == 0x000000, "Member 'UINavigationTextChangeListener_OnNotifyTextChangeBP::NotifyText' has a wrong offset!");

// Function LGUI.LGUIPlayTweenComponent.GetPlayTween
// 0x0008 (0x0008 - 0x0000)
struct LGUIPlayTweenComponent_GetPlayTween final
{
public:
	class ULGUIPlayTween*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTweenComponent_GetPlayTween) == 0x000008, "Wrong alignment on LGUIPlayTweenComponent_GetPlayTween");
static_assert(sizeof(LGUIPlayTweenComponent_GetPlayTween) == 0x000008, "Wrong size on LGUIPlayTweenComponent_GetPlayTween");
static_assert(offsetof(LGUIPlayTweenComponent_GetPlayTween, ReturnValue) == 0x000000, "Member 'LGUIPlayTweenComponent_GetPlayTween::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerClickInterface.OnPointerClick
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerClickInterface_OnPointerClick final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1190[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerClickInterface_OnPointerClick) == 0x000008, "Wrong alignment on LGUIPointerClickInterface_OnPointerClick");
static_assert(sizeof(LGUIPointerClickInterface_OnPointerClick) == 0x000010, "Wrong size on LGUIPointerClickInterface_OnPointerClick");
static_assert(offsetof(LGUIPointerClickInterface_OnPointerClick, EventData) == 0x000000, "Member 'LGUIPointerClickInterface_OnPointerClick::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerClickInterface_OnPointerClick, ReturnValue) == 0x000008, "Member 'LGUIPointerClickInterface_OnPointerClick::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDownUpInterface.OnPointerDown
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDownUpInterface_OnPointerDown final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1191[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDownUpInterface_OnPointerDown) == 0x000008, "Wrong alignment on LGUIPointerDownUpInterface_OnPointerDown");
static_assert(sizeof(LGUIPointerDownUpInterface_OnPointerDown) == 0x000010, "Wrong size on LGUIPointerDownUpInterface_OnPointerDown");
static_assert(offsetof(LGUIPointerDownUpInterface_OnPointerDown, EventData) == 0x000000, "Member 'LGUIPointerDownUpInterface_OnPointerDown::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDownUpInterface_OnPointerDown, ReturnValue) == 0x000008, "Member 'LGUIPointerDownUpInterface_OnPointerDown::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDownUpInterface.OnPointerUp
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDownUpInterface_OnPointerUp final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1192[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDownUpInterface_OnPointerUp) == 0x000008, "Wrong alignment on LGUIPointerDownUpInterface_OnPointerUp");
static_assert(sizeof(LGUIPointerDownUpInterface_OnPointerUp) == 0x000010, "Wrong size on LGUIPointerDownUpInterface_OnPointerUp");
static_assert(offsetof(LGUIPointerDownUpInterface_OnPointerUp, EventData) == 0x000000, "Member 'LGUIPointerDownUpInterface_OnPointerUp::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDownUpInterface_OnPointerUp, ReturnValue) == 0x000008, "Member 'LGUIPointerDownUpInterface_OnPointerUp::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragDropInterface.OnPointerDragDrop
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragDropInterface_OnPointerDragDrop final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1193[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragDropInterface_OnPointerDragDrop) == 0x000008, "Wrong alignment on LGUIPointerDragDropInterface_OnPointerDragDrop");
static_assert(sizeof(LGUIPointerDragDropInterface_OnPointerDragDrop) == 0x000010, "Wrong size on LGUIPointerDragDropInterface_OnPointerDragDrop");
static_assert(offsetof(LGUIPointerDragDropInterface_OnPointerDragDrop, EventData) == 0x000000, "Member 'LGUIPointerDragDropInterface_OnPointerDragDrop::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragDropInterface_OnPointerDragDrop, ReturnValue) == 0x000008, "Member 'LGUIPointerDragDropInterface_OnPointerDragDrop::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragEnterExitInterface.OnPointerDragEnter
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragEnterExitInterface_OnPointerDragEnter final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1194[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragEnterExitInterface_OnPointerDragEnter) == 0x000008, "Wrong alignment on LGUIPointerDragEnterExitInterface_OnPointerDragEnter");
static_assert(sizeof(LGUIPointerDragEnterExitInterface_OnPointerDragEnter) == 0x000010, "Wrong size on LGUIPointerDragEnterExitInterface_OnPointerDragEnter");
static_assert(offsetof(LGUIPointerDragEnterExitInterface_OnPointerDragEnter, EventData) == 0x000000, "Member 'LGUIPointerDragEnterExitInterface_OnPointerDragEnter::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragEnterExitInterface_OnPointerDragEnter, ReturnValue) == 0x000008, "Member 'LGUIPointerDragEnterExitInterface_OnPointerDragEnter::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragEnterExitInterface.OnPointerDragExit
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragEnterExitInterface_OnPointerDragExit final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1195[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragEnterExitInterface_OnPointerDragExit) == 0x000008, "Wrong alignment on LGUIPointerDragEnterExitInterface_OnPointerDragExit");
static_assert(sizeof(LGUIPointerDragEnterExitInterface_OnPointerDragExit) == 0x000010, "Wrong size on LGUIPointerDragEnterExitInterface_OnPointerDragExit");
static_assert(offsetof(LGUIPointerDragEnterExitInterface_OnPointerDragExit, EventData) == 0x000000, "Member 'LGUIPointerDragEnterExitInterface_OnPointerDragExit::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragEnterExitInterface_OnPointerDragExit, ReturnValue) == 0x000008, "Member 'LGUIPointerDragEnterExitInterface_OnPointerDragExit::ReturnValue' has a wrong offset!");

// Function LGUI.UINavigationBehaviour.OnCheckCanSetNavigationBP
// 0x0001 (0x0001 - 0x0000)
struct UINavigationBehaviour_OnCheckCanSetNavigationBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationBehaviour_OnCheckCanSetNavigationBP) == 0x000001, "Wrong alignment on UINavigationBehaviour_OnCheckCanSetNavigationBP");
static_assert(sizeof(UINavigationBehaviour_OnCheckCanSetNavigationBP) == 0x000001, "Wrong size on UINavigationBehaviour_OnCheckCanSetNavigationBP");
static_assert(offsetof(UINavigationBehaviour_OnCheckCanSetNavigationBP, ReturnValue) == 0x000000, "Member 'UINavigationBehaviour_OnCheckCanSetNavigationBP::ReturnValue' has a wrong offset!");

// Function LGUI.UINavigationBehaviour.OnCheckLoopScrollChangeNavigationBP
// 0x0001 (0x0001 - 0x0000)
struct UINavigationBehaviour_OnCheckLoopScrollChangeNavigationBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationBehaviour_OnCheckLoopScrollChangeNavigationBP) == 0x000001, "Wrong alignment on UINavigationBehaviour_OnCheckLoopScrollChangeNavigationBP");
static_assert(sizeof(UINavigationBehaviour_OnCheckLoopScrollChangeNavigationBP) == 0x000001, "Wrong size on UINavigationBehaviour_OnCheckLoopScrollChangeNavigationBP");
static_assert(offsetof(UINavigationBehaviour_OnCheckLoopScrollChangeNavigationBP, ReturnValue) == 0x000000, "Member 'UINavigationBehaviour_OnCheckLoopScrollChangeNavigationBP::ReturnValue' has a wrong offset!");

// Function LGUI.UINavigationBehaviour.OnNotifyNavigationEnterBP
// 0x0008 (0x0008 - 0x0000)
struct UINavigationBehaviour_OnNotifyNavigationEnterBP final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationBehaviour_OnNotifyNavigationEnterBP) == 0x000008, "Wrong alignment on UINavigationBehaviour_OnNotifyNavigationEnterBP");
static_assert(sizeof(UINavigationBehaviour_OnNotifyNavigationEnterBP) == 0x000008, "Wrong size on UINavigationBehaviour_OnNotifyNavigationEnterBP");
static_assert(offsetof(UINavigationBehaviour_OnNotifyNavigationEnterBP, EventData) == 0x000000, "Member 'UINavigationBehaviour_OnNotifyNavigationEnterBP::EventData' has a wrong offset!");

// Function LGUI.UINavigationBehaviour.OnNotifyNavigationSelectBP
// 0x0008 (0x0008 - 0x0000)
struct UINavigationBehaviour_OnNotifyNavigationSelectBP final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationBehaviour_OnNotifyNavigationSelectBP) == 0x000008, "Wrong alignment on UINavigationBehaviour_OnNotifyNavigationSelectBP");
static_assert(sizeof(UINavigationBehaviour_OnNotifyNavigationSelectBP) == 0x000008, "Wrong size on UINavigationBehaviour_OnNotifyNavigationSelectBP");
static_assert(offsetof(UINavigationBehaviour_OnNotifyNavigationSelectBP, EventData) == 0x000000, "Member 'UINavigationBehaviour_OnNotifyNavigationSelectBP::EventData' has a wrong offset!");

// Function LGUI.LGUIPointerDragInterface.OnPointerBeginDrag
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragInterface_OnPointerBeginDrag final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1197[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragInterface_OnPointerBeginDrag) == 0x000008, "Wrong alignment on LGUIPointerDragInterface_OnPointerBeginDrag");
static_assert(sizeof(LGUIPointerDragInterface_OnPointerBeginDrag) == 0x000010, "Wrong size on LGUIPointerDragInterface_OnPointerBeginDrag");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerBeginDrag, EventData) == 0x000000, "Member 'LGUIPointerDragInterface_OnPointerBeginDrag::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerBeginDrag, ReturnValue) == 0x000008, "Member 'LGUIPointerDragInterface_OnPointerBeginDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragInterface.OnPointerDrag
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragInterface_OnPointerDrag final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1198[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragInterface_OnPointerDrag) == 0x000008, "Wrong alignment on LGUIPointerDragInterface_OnPointerDrag");
static_assert(sizeof(LGUIPointerDragInterface_OnPointerDrag) == 0x000010, "Wrong size on LGUIPointerDragInterface_OnPointerDrag");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerDrag, EventData) == 0x000000, "Member 'LGUIPointerDragInterface_OnPointerDrag::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerDrag, ReturnValue) == 0x000008, "Member 'LGUIPointerDragInterface_OnPointerDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragInterface.OnPointerEndDrag
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragInterface_OnPointerEndDrag final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1199[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragInterface_OnPointerEndDrag) == 0x000008, "Wrong alignment on LGUIPointerDragInterface_OnPointerEndDrag");
static_assert(sizeof(LGUIPointerDragInterface_OnPointerEndDrag) == 0x000010, "Wrong size on LGUIPointerDragInterface_OnPointerEndDrag");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerEndDrag, EventData) == 0x000000, "Member 'LGUIPointerDragInterface_OnPointerEndDrag::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerEndDrag, ReturnValue) == 0x000008, "Member 'LGUIPointerDragInterface_OnPointerEndDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEnterExitInterface.OnPointerEnter
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerEnterExitInterface_OnPointerEnter final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerEnterExitInterface_OnPointerEnter) == 0x000008, "Wrong alignment on LGUIPointerEnterExitInterface_OnPointerEnter");
static_assert(sizeof(LGUIPointerEnterExitInterface_OnPointerEnter) == 0x000010, "Wrong size on LGUIPointerEnterExitInterface_OnPointerEnter");
static_assert(offsetof(LGUIPointerEnterExitInterface_OnPointerEnter, EventData) == 0x000000, "Member 'LGUIPointerEnterExitInterface_OnPointerEnter::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerEnterExitInterface_OnPointerEnter, ReturnValue) == 0x000008, "Member 'LGUIPointerEnterExitInterface_OnPointerEnter::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEnterExitInterface.OnPointerExit
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerEnterExitInterface_OnPointerExit final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerEnterExitInterface_OnPointerExit) == 0x000008, "Wrong alignment on LGUIPointerEnterExitInterface_OnPointerExit");
static_assert(sizeof(LGUIPointerEnterExitInterface_OnPointerExit) == 0x000010, "Wrong size on LGUIPointerEnterExitInterface_OnPointerExit");
static_assert(offsetof(LGUIPointerEnterExitInterface_OnPointerExit, EventData) == 0x000000, "Member 'LGUIPointerEnterExitInterface_OnPointerExit::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerEnterExitInterface_OnPointerExit, ReturnValue) == 0x000008, "Member 'LGUIPointerEnterExitInterface_OnPointerExit::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetCumulativeMoveDelta
// 0x000C (0x000C - 0x0000)
struct LGUIPointerEventData_GetCumulativeMoveDelta final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetCumulativeMoveDelta) == 0x000004, "Wrong alignment on LGUIPointerEventData_GetCumulativeMoveDelta");
static_assert(sizeof(LGUIPointerEventData_GetCumulativeMoveDelta) == 0x00000C, "Wrong size on LGUIPointerEventData_GetCumulativeMoveDelta");
static_assert(offsetof(LGUIPointerEventData_GetCumulativeMoveDelta, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetCumulativeMoveDelta::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetDragRayDirection
// 0x000C (0x000C - 0x0000)
struct LGUIPointerEventData_GetDragRayDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetDragRayDirection) == 0x000004, "Wrong alignment on LGUIPointerEventData_GetDragRayDirection");
static_assert(sizeof(LGUIPointerEventData_GetDragRayDirection) == 0x00000C, "Wrong size on LGUIPointerEventData_GetDragRayDirection");
static_assert(offsetof(LGUIPointerEventData_GetDragRayDirection, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetDragRayDirection::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetDragRayOrigin
// 0x000C (0x000C - 0x0000)
struct LGUIPointerEventData_GetDragRayOrigin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetDragRayOrigin) == 0x000004, "Wrong alignment on LGUIPointerEventData_GetDragRayOrigin");
static_assert(sizeof(LGUIPointerEventData_GetDragRayOrigin) == 0x00000C, "Wrong size on LGUIPointerEventData_GetDragRayOrigin");
static_assert(offsetof(LGUIPointerEventData_GetDragRayOrigin, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetDragRayOrigin::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetLocalPointInPlane
// 0x000C (0x000C - 0x0000)
struct LGUIPointerEventData_GetLocalPointInPlane final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetLocalPointInPlane) == 0x000004, "Wrong alignment on LGUIPointerEventData_GetLocalPointInPlane");
static_assert(sizeof(LGUIPointerEventData_GetLocalPointInPlane) == 0x00000C, "Wrong size on LGUIPointerEventData_GetLocalPointInPlane");
static_assert(offsetof(LGUIPointerEventData_GetLocalPointInPlane, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetLocalPointInPlane::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetWorldPointInPlane
// 0x000C (0x000C - 0x0000)
struct LGUIPointerEventData_GetWorldPointInPlane final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetWorldPointInPlane) == 0x000004, "Wrong alignment on LGUIPointerEventData_GetWorldPointInPlane");
static_assert(sizeof(LGUIPointerEventData_GetWorldPointInPlane) == 0x00000C, "Wrong size on LGUIPointerEventData_GetWorldPointInPlane");
static_assert(offsetof(LGUIPointerEventData_GetWorldPointInPlane, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetWorldPointInPlane::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetWorldPointSpherical
// 0x000C (0x000C - 0x0000)
struct LGUIPointerEventData_GetWorldPointSpherical final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetWorldPointSpherical) == 0x000004, "Wrong alignment on LGUIPointerEventData_GetWorldPointSpherical");
static_assert(sizeof(LGUIPointerEventData_GetWorldPointSpherical) == 0x00000C, "Wrong size on LGUIPointerEventData_GetWorldPointSpherical");
static_assert(offsetof(LGUIPointerEventData_GetWorldPointSpherical, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetWorldPointSpherical::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerInterruptInterface.NeedInterrupt
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerInterruptInterface_NeedInterrupt final
{
public:
	class ULGUIBaseEventData*                     EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerInterruptInterface_NeedInterrupt) == 0x000008, "Wrong alignment on LGUIPointerInterruptInterface_NeedInterrupt");
static_assert(sizeof(LGUIPointerInterruptInterface_NeedInterrupt) == 0x000010, "Wrong size on LGUIPointerInterruptInterface_NeedInterrupt");
static_assert(offsetof(LGUIPointerInterruptInterface_NeedInterrupt, EventData) == 0x000000, "Member 'LGUIPointerInterruptInterface_NeedInterrupt::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerInterruptInterface_NeedInterrupt, ReturnValue) == 0x000008, "Member 'LGUIPointerInterruptInterface_NeedInterrupt::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerScrollInterface.OnPointerScroll
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerScrollInterface_OnPointerScroll final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerScrollInterface_OnPointerScroll) == 0x000008, "Wrong alignment on LGUIPointerScrollInterface_OnPointerScroll");
static_assert(sizeof(LGUIPointerScrollInterface_OnPointerScroll) == 0x000010, "Wrong size on LGUIPointerScrollInterface_OnPointerScroll");
static_assert(offsetof(LGUIPointerScrollInterface_OnPointerScroll, EventData) == 0x000000, "Member 'LGUIPointerScrollInterface_OnPointerScroll::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerScrollInterface_OnPointerScroll, ReturnValue) == 0x000008, "Member 'LGUIPointerScrollInterface_OnPointerScroll::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerSelectDeselectInterface.OnPointerDeselect
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerSelectDeselectInterface_OnPointerDeselect final
{
public:
	class ULGUIBaseEventData*                     EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerSelectDeselectInterface_OnPointerDeselect) == 0x000008, "Wrong alignment on LGUIPointerSelectDeselectInterface_OnPointerDeselect");
static_assert(sizeof(LGUIPointerSelectDeselectInterface_OnPointerDeselect) == 0x000010, "Wrong size on LGUIPointerSelectDeselectInterface_OnPointerDeselect");
static_assert(offsetof(LGUIPointerSelectDeselectInterface_OnPointerDeselect, EventData) == 0x000000, "Member 'LGUIPointerSelectDeselectInterface_OnPointerDeselect::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerSelectDeselectInterface_OnPointerDeselect, ReturnValue) == 0x000008, "Member 'LGUIPointerSelectDeselectInterface_OnPointerDeselect::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerSelectDeselectInterface.OnPointerSelect
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerSelectDeselectInterface_OnPointerSelect final
{
public:
	class ULGUIBaseEventData*                     EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerSelectDeselectInterface_OnPointerSelect) == 0x000008, "Wrong alignment on LGUIPointerSelectDeselectInterface_OnPointerSelect");
static_assert(sizeof(LGUIPointerSelectDeselectInterface_OnPointerSelect) == 0x000010, "Wrong size on LGUIPointerSelectDeselectInterface_OnPointerSelect");
static_assert(offsetof(LGUIPointerSelectDeselectInterface_OnPointerSelect, EventData) == 0x000000, "Member 'LGUIPointerSelectDeselectInterface_OnPointerSelect::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerSelectDeselectInterface_OnPointerSelect, ReturnValue) == 0x000008, "Member 'LGUIPointerSelectDeselectInterface_OnPointerSelect::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteraction.SetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIScreenSpaceInteraction_SetClickThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteraction_SetClickThreshold) == 0x000004, "Wrong alignment on LGUIScreenSpaceInteraction_SetClickThreshold");
static_assert(sizeof(LGUIScreenSpaceInteraction_SetClickThreshold) == 0x000004, "Wrong size on LGUIScreenSpaceInteraction_SetClickThreshold");
static_assert(offsetof(LGUIScreenSpaceInteraction_SetClickThreshold, Value) == 0x000000, "Member 'LGUIScreenSpaceInteraction_SetClickThreshold::Value' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteraction.SetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIScreenSpaceInteraction_SetHoldToDrag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteraction_SetHoldToDrag) == 0x000001, "Wrong alignment on LGUIScreenSpaceInteraction_SetHoldToDrag");
static_assert(sizeof(LGUIScreenSpaceInteraction_SetHoldToDrag) == 0x000001, "Wrong size on LGUIScreenSpaceInteraction_SetHoldToDrag");
static_assert(offsetof(LGUIScreenSpaceInteraction_SetHoldToDrag, Value) == 0x000000, "Member 'LGUIScreenSpaceInteraction_SetHoldToDrag::Value' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteraction.SetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIScreenSpaceInteraction_SetHoldToDragTime final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteraction_SetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIScreenSpaceInteraction_SetHoldToDragTime");
static_assert(sizeof(LGUIScreenSpaceInteraction_SetHoldToDragTime) == 0x000004, "Wrong size on LGUIScreenSpaceInteraction_SetHoldToDragTime");
static_assert(offsetof(LGUIScreenSpaceInteraction_SetHoldToDragTime, Value) == 0x000000, "Member 'LGUIScreenSpaceInteraction_SetHoldToDragTime::Value' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteraction.GetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIScreenSpaceInteraction_GetClickThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteraction_GetClickThreshold) == 0x000004, "Wrong alignment on LGUIScreenSpaceInteraction_GetClickThreshold");
static_assert(sizeof(LGUIScreenSpaceInteraction_GetClickThreshold) == 0x000004, "Wrong size on LGUIScreenSpaceInteraction_GetClickThreshold");
static_assert(offsetof(LGUIScreenSpaceInteraction_GetClickThreshold, ReturnValue) == 0x000000, "Member 'LGUIScreenSpaceInteraction_GetClickThreshold::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteraction.GetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIScreenSpaceInteraction_GetHoldToDrag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteraction_GetHoldToDrag) == 0x000001, "Wrong alignment on LGUIScreenSpaceInteraction_GetHoldToDrag");
static_assert(sizeof(LGUIScreenSpaceInteraction_GetHoldToDrag) == 0x000001, "Wrong size on LGUIScreenSpaceInteraction_GetHoldToDrag");
static_assert(offsetof(LGUIScreenSpaceInteraction_GetHoldToDrag, ReturnValue) == 0x000000, "Member 'LGUIScreenSpaceInteraction_GetHoldToDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteraction.GetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIScreenSpaceInteraction_GetHoldToDragTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteraction_GetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIScreenSpaceInteraction_GetHoldToDragTime");
static_assert(sizeof(LGUIScreenSpaceInteraction_GetHoldToDragTime) == 0x000004, "Wrong size on LGUIScreenSpaceInteraction_GetHoldToDragTime");
static_assert(offsetof(LGUIScreenSpaceInteraction_GetHoldToDragTime, ReturnValue) == 0x000000, "Member 'LGUIScreenSpaceInteraction_GetHoldToDragTime::ReturnValue' has a wrong offset!");

// Function LGUI.UIButtonComponent.OnPointerDown_Implementation
// 0x0010 (0x0010 - 0x0000)
struct UIButtonComponent_OnPointerDown_Implementation final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIButtonComponent_OnPointerDown_Implementation) == 0x000008, "Wrong alignment on UIButtonComponent_OnPointerDown_Implementation");
static_assert(sizeof(UIButtonComponent_OnPointerDown_Implementation) == 0x000010, "Wrong size on UIButtonComponent_OnPointerDown_Implementation");
static_assert(offsetof(UIButtonComponent_OnPointerDown_Implementation, EventData) == 0x000000, "Member 'UIButtonComponent_OnPointerDown_Implementation::EventData' has a wrong offset!");
static_assert(offsetof(UIButtonComponent_OnPointerDown_Implementation, ReturnValue) == 0x000008, "Member 'UIButtonComponent_OnPointerDown_Implementation::ReturnValue' has a wrong offset!");

// Function LGUI.UIButtonComponent.RegisterClickEvent
// 0x0020 (0x0020 - 0x0000)
struct UIButtonComponent_RegisterClickEvent final
{
public:
	TDelegate<void()>                             InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIButtonComponent_RegisterClickEvent) == 0x000008, "Wrong alignment on UIButtonComponent_RegisterClickEvent");
static_assert(sizeof(UIButtonComponent_RegisterClickEvent) == 0x000020, "Wrong size on UIButtonComponent_RegisterClickEvent");
static_assert(offsetof(UIButtonComponent_RegisterClickEvent, InDelegate) == 0x000000, "Member 'UIButtonComponent_RegisterClickEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIButtonComponent_RegisterClickEvent, ReturnValue) == 0x000018, "Member 'UIButtonComponent_RegisterClickEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIButtonComponent.UnregisterClickEvent
// 0x0008 (0x0008 - 0x0000)
struct UIButtonComponent_UnregisterClickEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIButtonComponent_UnregisterClickEvent) == 0x000008, "Wrong alignment on UIButtonComponent_UnregisterClickEvent");
static_assert(sizeof(UIButtonComponent_UnregisterClickEvent) == 0x000008, "Wrong size on UIButtonComponent_UnregisterClickEvent");
static_assert(offsetof(UIButtonComponent_UnregisterClickEvent, InDelegateHandle) == 0x000000, "Member 'UIButtonComponent_UnregisterClickEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UISelectableButtonComponent.SetForceSelect
// 0x0001 (0x0001 - 0x0000)
struct UISelectableButtonComponent_SetForceSelect final
{
public:
	bool                                          ForceSelect;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableButtonComponent_SetForceSelect) == 0x000001, "Wrong alignment on UISelectableButtonComponent_SetForceSelect");
static_assert(sizeof(UISelectableButtonComponent_SetForceSelect) == 0x000001, "Wrong size on UISelectableButtonComponent_SetForceSelect");
static_assert(offsetof(UISelectableButtonComponent_SetForceSelect, ForceSelect) == 0x000000, "Member 'UISelectableButtonComponent_SetForceSelect::ForceSelect' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.SetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIScreenSpaceInteractionForNoneUI_SetClickThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteractionForNoneUI_SetClickThreshold) == 0x000004, "Wrong alignment on LGUIScreenSpaceInteractionForNoneUI_SetClickThreshold");
static_assert(sizeof(LGUIScreenSpaceInteractionForNoneUI_SetClickThreshold) == 0x000004, "Wrong size on LGUIScreenSpaceInteractionForNoneUI_SetClickThreshold");
static_assert(offsetof(LGUIScreenSpaceInteractionForNoneUI_SetClickThreshold, Value) == 0x000000, "Member 'LGUIScreenSpaceInteractionForNoneUI_SetClickThreshold::Value' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.SetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIScreenSpaceInteractionForNoneUI_SetHoldToDrag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteractionForNoneUI_SetHoldToDrag) == 0x000001, "Wrong alignment on LGUIScreenSpaceInteractionForNoneUI_SetHoldToDrag");
static_assert(sizeof(LGUIScreenSpaceInteractionForNoneUI_SetHoldToDrag) == 0x000001, "Wrong size on LGUIScreenSpaceInteractionForNoneUI_SetHoldToDrag");
static_assert(offsetof(LGUIScreenSpaceInteractionForNoneUI_SetHoldToDrag, Value) == 0x000000, "Member 'LGUIScreenSpaceInteractionForNoneUI_SetHoldToDrag::Value' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.SetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIScreenSpaceInteractionForNoneUI_SetHoldToDragTime final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteractionForNoneUI_SetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIScreenSpaceInteractionForNoneUI_SetHoldToDragTime");
static_assert(sizeof(LGUIScreenSpaceInteractionForNoneUI_SetHoldToDragTime) == 0x000004, "Wrong size on LGUIScreenSpaceInteractionForNoneUI_SetHoldToDragTime");
static_assert(offsetof(LGUIScreenSpaceInteractionForNoneUI_SetHoldToDragTime, Value) == 0x000000, "Member 'LGUIScreenSpaceInteractionForNoneUI_SetHoldToDragTime::Value' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.GetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIScreenSpaceInteractionForNoneUI_GetClickThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteractionForNoneUI_GetClickThreshold) == 0x000004, "Wrong alignment on LGUIScreenSpaceInteractionForNoneUI_GetClickThreshold");
static_assert(sizeof(LGUIScreenSpaceInteractionForNoneUI_GetClickThreshold) == 0x000004, "Wrong size on LGUIScreenSpaceInteractionForNoneUI_GetClickThreshold");
static_assert(offsetof(LGUIScreenSpaceInteractionForNoneUI_GetClickThreshold, ReturnValue) == 0x000000, "Member 'LGUIScreenSpaceInteractionForNoneUI_GetClickThreshold::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.GetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIScreenSpaceInteractionForNoneUI_GetHoldToDrag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteractionForNoneUI_GetHoldToDrag) == 0x000001, "Wrong alignment on LGUIScreenSpaceInteractionForNoneUI_GetHoldToDrag");
static_assert(sizeof(LGUIScreenSpaceInteractionForNoneUI_GetHoldToDrag) == 0x000001, "Wrong size on LGUIScreenSpaceInteractionForNoneUI_GetHoldToDrag");
static_assert(offsetof(LGUIScreenSpaceInteractionForNoneUI_GetHoldToDrag, ReturnValue) == 0x000000, "Member 'LGUIScreenSpaceInteractionForNoneUI_GetHoldToDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIScreenSpaceInteractionForNoneUI.GetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIScreenSpaceInteractionForNoneUI_GetHoldToDragTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIScreenSpaceInteractionForNoneUI_GetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIScreenSpaceInteractionForNoneUI_GetHoldToDragTime");
static_assert(sizeof(LGUIScreenSpaceInteractionForNoneUI_GetHoldToDragTime) == 0x000004, "Wrong size on LGUIScreenSpaceInteractionForNoneUI_GetHoldToDragTime");
static_assert(offsetof(LGUIScreenSpaceInteractionForNoneUI_GetHoldToDragTime, ReturnValue) == 0x000000, "Member 'LGUIScreenSpaceInteractionForNoneUI_GetHoldToDragTime::ReturnValue' has a wrong offset!");

// Function LGUI.UISpineRenderable.AfterSkeletonUpdate
// 0x0008 (0x0008 - 0x0000)
struct UISpineRenderable_AfterSkeletonUpdate final
{
public:
	class USpineSkeletonComponent*                SkeletonComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpineRenderable_AfterSkeletonUpdate) == 0x000008, "Wrong alignment on UISpineRenderable_AfterSkeletonUpdate");
static_assert(sizeof(UISpineRenderable_AfterSkeletonUpdate) == 0x000008, "Wrong size on UISpineRenderable_AfterSkeletonUpdate");
static_assert(offsetof(UISpineRenderable_AfterSkeletonUpdate, SkeletonComponent) == 0x000000, "Member 'UISpineRenderable_AfterSkeletonUpdate::SkeletonComponent' has a wrong offset!");

// Function LGUI.UISpineRenderable.GetMeshesNum
// 0x0004 (0x0004 - 0x0000)
struct UISpineRenderable_GetMeshesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpineRenderable_GetMeshesNum) == 0x000004, "Wrong alignment on UISpineRenderable_GetMeshesNum");
static_assert(sizeof(UISpineRenderable_GetMeshesNum) == 0x000004, "Wrong size on UISpineRenderable_GetMeshesNum");
static_assert(offsetof(UISpineRenderable_GetMeshesNum, ReturnValue) == 0x000000, "Member 'UISpineRenderable_GetMeshesNum::ReturnValue' has a wrong offset!");

// Function LGUI.UISpineRenderable.GetTotalVerticeNum
// 0x0004 (0x0004 - 0x0000)
struct UISpineRenderable_GetTotalVerticeNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpineRenderable_GetTotalVerticeNum) == 0x000004, "Wrong alignment on UISpineRenderable_GetTotalVerticeNum");
static_assert(sizeof(UISpineRenderable_GetTotalVerticeNum) == 0x000004, "Wrong size on UISpineRenderable_GetTotalVerticeNum");
static_assert(offsetof(UISpineRenderable_GetTotalVerticeNum, ReturnValue) == 0x000000, "Member 'UISpineRenderable_GetTotalVerticeNum::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData_BaseObject.GetAtlasTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUISpriteData_BaseObject_GetAtlasTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_BaseObject_GetAtlasTexture) == 0x000008, "Wrong alignment on LGUISpriteData_BaseObject_GetAtlasTexture");
static_assert(sizeof(LGUISpriteData_BaseObject_GetAtlasTexture) == 0x000008, "Wrong size on LGUISpriteData_BaseObject_GetAtlasTexture");
static_assert(offsetof(LGUISpriteData_BaseObject_GetAtlasTexture, ReturnValue) == 0x000000, "Member 'LGUISpriteData_BaseObject_GetAtlasTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData_BaseObject.GetSpriteInfo
// 0x0034 (0x0034 - 0x0000)
struct LGUISpriteData_BaseObject_GetSpriteInfo final
{
public:
	struct FLGUISpriteInfo                        ReturnValue;                                       // 0x0000(0x0034)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_BaseObject_GetSpriteInfo) == 0x000004, "Wrong alignment on LGUISpriteData_BaseObject_GetSpriteInfo");
static_assert(sizeof(LGUISpriteData_BaseObject_GetSpriteInfo) == 0x000034, "Wrong size on LGUISpriteData_BaseObject_GetSpriteInfo");
static_assert(offsetof(LGUISpriteData_BaseObject_GetSpriteInfo, ReturnValue) == 0x000000, "Member 'LGUISpriteData_BaseObject_GetSpriteInfo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData_BaseObject.IsIndividual
// 0x0001 (0x0001 - 0x0000)
struct LGUISpriteData_BaseObject_IsIndividual final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_BaseObject_IsIndividual) == 0x000001, "Wrong alignment on LGUISpriteData_BaseObject_IsIndividual");
static_assert(sizeof(LGUISpriteData_BaseObject_IsIndividual) == 0x000001, "Wrong size on LGUISpriteData_BaseObject_IsIndividual");
static_assert(offsetof(LGUISpriteData_BaseObject_IsIndividual, ReturnValue) == 0x000000, "Member 'LGUISpriteData_BaseObject_IsIndividual::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData.CreateLGUISpriteData
// 0x0038 (0x0038 - 0x0000)
struct LGUISpriteData_CreateLGUISpriteData final
{
public:
	class UObject*                                Param_Outer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             InSpriteTexture;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InHorizontalBorder;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InVerticalBorder;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPackingTag;                                      // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BF[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULGUISpriteData*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_CreateLGUISpriteData) == 0x000008, "Wrong alignment on LGUISpriteData_CreateLGUISpriteData");
static_assert(sizeof(LGUISpriteData_CreateLGUISpriteData) == 0x000038, "Wrong size on LGUISpriteData_CreateLGUISpriteData");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, Param_Outer) == 0x000000, "Member 'LGUISpriteData_CreateLGUISpriteData::Param_Outer' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, InSpriteTexture) == 0x000008, "Member 'LGUISpriteData_CreateLGUISpriteData::InSpriteTexture' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, InHorizontalBorder) == 0x000010, "Member 'LGUISpriteData_CreateLGUISpriteData::InHorizontalBorder' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, InVerticalBorder) == 0x000018, "Member 'LGUISpriteData_CreateLGUISpriteData::InVerticalBorder' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, InPackingTag) == 0x000020, "Member 'LGUISpriteData_CreateLGUISpriteData::InPackingTag' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, ReturnValue) == 0x000030, "Member 'LGUISpriteData_CreateLGUISpriteData::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData.GetPackingTag
// 0x000C (0x000C - 0x0000)
struct LGUISpriteData_GetPackingTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_GetPackingTag) == 0x000004, "Wrong alignment on LGUISpriteData_GetPackingTag");
static_assert(sizeof(LGUISpriteData_GetPackingTag) == 0x00000C, "Wrong size on LGUISpriteData_GetPackingTag");
static_assert(offsetof(LGUISpriteData_GetPackingTag, ReturnValue) == 0x000000, "Member 'LGUISpriteData_GetPackingTag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData.GetSpriteTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUISpriteData_GetSpriteTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_GetSpriteTexture) == 0x000008, "Wrong alignment on LGUISpriteData_GetSpriteTexture");
static_assert(sizeof(LGUISpriteData_GetSpriteTexture) == 0x000008, "Wrong size on LGUISpriteData_GetSpriteTexture");
static_assert(offsetof(LGUISpriteData_GetSpriteTexture, ReturnValue) == 0x000000, "Member 'LGUISpriteData_GetSpriteTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData.HavePackingTag
// 0x0001 (0x0001 - 0x0000)
struct LGUISpriteData_HavePackingTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_HavePackingTag) == 0x000001, "Wrong alignment on LGUISpriteData_HavePackingTag");
static_assert(sizeof(LGUISpriteData_HavePackingTag) == 0x000001, "Wrong size on LGUISpriteData_HavePackingTag");
static_assert(offsetof(LGUISpriteData_HavePackingTag, ReturnValue) == 0x000000, "Member 'LGUISpriteData_HavePackingTag::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteSequencePlayer.SetSpriteSequence
// 0x0010 (0x0010 - 0x0000)
struct UISpriteSequencePlayer_SetSpriteSequence final
{
public:
	TArray<class ULGUISpriteData_BaseObject*>     Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSequencePlayer_SetSpriteSequence) == 0x000008, "Wrong alignment on UISpriteSequencePlayer_SetSpriteSequence");
static_assert(sizeof(UISpriteSequencePlayer_SetSpriteSequence) == 0x000010, "Wrong size on UISpriteSequencePlayer_SetSpriteSequence");
static_assert(offsetof(UISpriteSequencePlayer_SetSpriteSequence, Value) == 0x000000, "Member 'UISpriteSequencePlayer_SetSpriteSequence::Value' has a wrong offset!");

// Function LGUI.UISpriteSequencePlayer.GetSpriteSequence
// 0x0010 (0x0010 - 0x0000)
struct UISpriteSequencePlayer_GetSpriteSequence final
{
public:
	TArray<class ULGUISpriteData_BaseObject*>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSequencePlayer_GetSpriteSequence) == 0x000008, "Wrong alignment on UISpriteSequencePlayer_GetSpriteSequence");
static_assert(sizeof(UISpriteSequencePlayer_GetSpriteSequence) == 0x000010, "Wrong size on UISpriteSequencePlayer_GetSpriteSequence");
static_assert(offsetof(UISpriteSequencePlayer_GetSpriteSequence, ReturnValue) == 0x000000, "Member 'UISpriteSequencePlayer_GetSpriteSequence::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteraction.SetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIWorldSpaceInteraction_SetClickThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteraction_SetClickThreshold) == 0x000004, "Wrong alignment on LGUIWorldSpaceInteraction_SetClickThreshold");
static_assert(sizeof(LGUIWorldSpaceInteraction_SetClickThreshold) == 0x000004, "Wrong size on LGUIWorldSpaceInteraction_SetClickThreshold");
static_assert(offsetof(LGUIWorldSpaceInteraction_SetClickThreshold, Value) == 0x000000, "Member 'LGUIWorldSpaceInteraction_SetClickThreshold::Value' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteraction.SetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIWorldSpaceInteraction_SetHoldToDrag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteraction_SetHoldToDrag) == 0x000001, "Wrong alignment on LGUIWorldSpaceInteraction_SetHoldToDrag");
static_assert(sizeof(LGUIWorldSpaceInteraction_SetHoldToDrag) == 0x000001, "Wrong size on LGUIWorldSpaceInteraction_SetHoldToDrag");
static_assert(offsetof(LGUIWorldSpaceInteraction_SetHoldToDrag, Value) == 0x000000, "Member 'LGUIWorldSpaceInteraction_SetHoldToDrag::Value' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteraction.SetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIWorldSpaceInteraction_SetHoldToDragTime final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteraction_SetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIWorldSpaceInteraction_SetHoldToDragTime");
static_assert(sizeof(LGUIWorldSpaceInteraction_SetHoldToDragTime) == 0x000004, "Wrong size on LGUIWorldSpaceInteraction_SetHoldToDragTime");
static_assert(offsetof(LGUIWorldSpaceInteraction_SetHoldToDragTime, Value) == 0x000000, "Member 'LGUIWorldSpaceInteraction_SetHoldToDragTime::Value' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteraction.SetInteractionSource
// 0x0001 (0x0001 - 0x0000)
struct LGUIWorldSpaceInteraction_SetInteractionSource final
{
public:
	ELGUIWorldSpaceInteractionSource              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteraction_SetInteractionSource) == 0x000001, "Wrong alignment on LGUIWorldSpaceInteraction_SetInteractionSource");
static_assert(sizeof(LGUIWorldSpaceInteraction_SetInteractionSource) == 0x000001, "Wrong size on LGUIWorldSpaceInteraction_SetInteractionSource");
static_assert(offsetof(LGUIWorldSpaceInteraction_SetInteractionSource, Value) == 0x000000, "Member 'LGUIWorldSpaceInteraction_SetInteractionSource::Value' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteraction.GetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIWorldSpaceInteraction_GetClickThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteraction_GetClickThreshold) == 0x000004, "Wrong alignment on LGUIWorldSpaceInteraction_GetClickThreshold");
static_assert(sizeof(LGUIWorldSpaceInteraction_GetClickThreshold) == 0x000004, "Wrong size on LGUIWorldSpaceInteraction_GetClickThreshold");
static_assert(offsetof(LGUIWorldSpaceInteraction_GetClickThreshold, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceInteraction_GetClickThreshold::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteraction.GetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIWorldSpaceInteraction_GetHoldToDrag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteraction_GetHoldToDrag) == 0x000001, "Wrong alignment on LGUIWorldSpaceInteraction_GetHoldToDrag");
static_assert(sizeof(LGUIWorldSpaceInteraction_GetHoldToDrag) == 0x000001, "Wrong size on LGUIWorldSpaceInteraction_GetHoldToDrag");
static_assert(offsetof(LGUIWorldSpaceInteraction_GetHoldToDrag, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceInteraction_GetHoldToDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteraction.GetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIWorldSpaceInteraction_GetHoldToDragTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteraction_GetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIWorldSpaceInteraction_GetHoldToDragTime");
static_assert(sizeof(LGUIWorldSpaceInteraction_GetHoldToDragTime) == 0x000004, "Wrong size on LGUIWorldSpaceInteraction_GetHoldToDragTime");
static_assert(offsetof(LGUIWorldSpaceInteraction_GetHoldToDragTime, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceInteraction_GetHoldToDragTime::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteraction.GetInteractionSource
// 0x0001 (0x0001 - 0x0000)
struct LGUIWorldSpaceInteraction_GetInteractionSource final
{
public:
	ELGUIWorldSpaceInteractionSource              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteraction_GetInteractionSource) == 0x000001, "Wrong alignment on LGUIWorldSpaceInteraction_GetInteractionSource");
static_assert(sizeof(LGUIWorldSpaceInteraction_GetInteractionSource) == 0x000001, "Wrong size on LGUIWorldSpaceInteraction_GetInteractionSource");
static_assert(offsetof(LGUIWorldSpaceInteraction_GetInteractionSource, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceInteraction_GetInteractionSource::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.SetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIWorldSpaceInteractionForNoneUI_SetClickThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteractionForNoneUI_SetClickThreshold) == 0x000004, "Wrong alignment on LGUIWorldSpaceInteractionForNoneUI_SetClickThreshold");
static_assert(sizeof(LGUIWorldSpaceInteractionForNoneUI_SetClickThreshold) == 0x000004, "Wrong size on LGUIWorldSpaceInteractionForNoneUI_SetClickThreshold");
static_assert(offsetof(LGUIWorldSpaceInteractionForNoneUI_SetClickThreshold, Value) == 0x000000, "Member 'LGUIWorldSpaceInteractionForNoneUI_SetClickThreshold::Value' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.SetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIWorldSpaceInteractionForNoneUI_SetHoldToDrag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteractionForNoneUI_SetHoldToDrag) == 0x000001, "Wrong alignment on LGUIWorldSpaceInteractionForNoneUI_SetHoldToDrag");
static_assert(sizeof(LGUIWorldSpaceInteractionForNoneUI_SetHoldToDrag) == 0x000001, "Wrong size on LGUIWorldSpaceInteractionForNoneUI_SetHoldToDrag");
static_assert(offsetof(LGUIWorldSpaceInteractionForNoneUI_SetHoldToDrag, Value) == 0x000000, "Member 'LGUIWorldSpaceInteractionForNoneUI_SetHoldToDrag::Value' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.SetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIWorldSpaceInteractionForNoneUI_SetHoldToDragTime final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteractionForNoneUI_SetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIWorldSpaceInteractionForNoneUI_SetHoldToDragTime");
static_assert(sizeof(LGUIWorldSpaceInteractionForNoneUI_SetHoldToDragTime) == 0x000004, "Wrong size on LGUIWorldSpaceInteractionForNoneUI_SetHoldToDragTime");
static_assert(offsetof(LGUIWorldSpaceInteractionForNoneUI_SetHoldToDragTime, Value) == 0x000000, "Member 'LGUIWorldSpaceInteractionForNoneUI_SetHoldToDragTime::Value' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.SetInteractionSource
// 0x0001 (0x0001 - 0x0000)
struct LGUIWorldSpaceInteractionForNoneUI_SetInteractionSource final
{
public:
	ELGUIWorldSpaceInteractionSource              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteractionForNoneUI_SetInteractionSource) == 0x000001, "Wrong alignment on LGUIWorldSpaceInteractionForNoneUI_SetInteractionSource");
static_assert(sizeof(LGUIWorldSpaceInteractionForNoneUI_SetInteractionSource) == 0x000001, "Wrong size on LGUIWorldSpaceInteractionForNoneUI_SetInteractionSource");
static_assert(offsetof(LGUIWorldSpaceInteractionForNoneUI_SetInteractionSource, Value) == 0x000000, "Member 'LGUIWorldSpaceInteractionForNoneUI_SetInteractionSource::Value' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.GetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIWorldSpaceInteractionForNoneUI_GetClickThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteractionForNoneUI_GetClickThreshold) == 0x000004, "Wrong alignment on LGUIWorldSpaceInteractionForNoneUI_GetClickThreshold");
static_assert(sizeof(LGUIWorldSpaceInteractionForNoneUI_GetClickThreshold) == 0x000004, "Wrong size on LGUIWorldSpaceInteractionForNoneUI_GetClickThreshold");
static_assert(offsetof(LGUIWorldSpaceInteractionForNoneUI_GetClickThreshold, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceInteractionForNoneUI_GetClickThreshold::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.GetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIWorldSpaceInteractionForNoneUI_GetHoldToDrag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteractionForNoneUI_GetHoldToDrag) == 0x000001, "Wrong alignment on LGUIWorldSpaceInteractionForNoneUI_GetHoldToDrag");
static_assert(sizeof(LGUIWorldSpaceInteractionForNoneUI_GetHoldToDrag) == 0x000001, "Wrong size on LGUIWorldSpaceInteractionForNoneUI_GetHoldToDrag");
static_assert(offsetof(LGUIWorldSpaceInteractionForNoneUI_GetHoldToDrag, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceInteractionForNoneUI_GetHoldToDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.GetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIWorldSpaceInteractionForNoneUI_GetHoldToDragTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteractionForNoneUI_GetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIWorldSpaceInteractionForNoneUI_GetHoldToDragTime");
static_assert(sizeof(LGUIWorldSpaceInteractionForNoneUI_GetHoldToDragTime) == 0x000004, "Wrong size on LGUIWorldSpaceInteractionForNoneUI_GetHoldToDragTime");
static_assert(offsetof(LGUIWorldSpaceInteractionForNoneUI_GetHoldToDragTime, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceInteractionForNoneUI_GetHoldToDragTime::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceInteractionForNoneUI.GetInteractionSource
// 0x0001 (0x0001 - 0x0000)
struct LGUIWorldSpaceInteractionForNoneUI_GetInteractionSource final
{
public:
	ELGUIWorldSpaceInteractionSource              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceInteractionForNoneUI_GetInteractionSource) == 0x000001, "Wrong alignment on LGUIWorldSpaceInteractionForNoneUI_GetInteractionSource");
static_assert(sizeof(LGUIWorldSpaceInteractionForNoneUI_GetInteractionSource) == 0x000001, "Wrong size on LGUIWorldSpaceInteractionForNoneUI_GetInteractionSource");
static_assert(offsetof(LGUIWorldSpaceInteractionForNoneUI_GetInteractionSource, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceInteractionForNoneUI_GetInteractionSource::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.RegisterSlideEvent
// 0x0020 (0x0020 - 0x0000)
struct UISliderComponent_RegisterSlideEvent final
{
public:
	TDelegate<void(float InFloat)>                InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C8[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_RegisterSlideEvent) == 0x000008, "Wrong alignment on UISliderComponent_RegisterSlideEvent");
static_assert(sizeof(UISliderComponent_RegisterSlideEvent) == 0x000020, "Wrong size on UISliderComponent_RegisterSlideEvent");
static_assert(offsetof(UISliderComponent_RegisterSlideEvent, InDelegate) == 0x000000, "Member 'UISliderComponent_RegisterSlideEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UISliderComponent_RegisterSlideEvent, ReturnValue) == 0x000018, "Member 'UISliderComponent_RegisterSlideEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.SetMaxValue
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_SetMaxValue final
{
public:
	float                                         InMaxValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepRelativeValue;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireEvent;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C9[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISliderComponent_SetMaxValue) == 0x000004, "Wrong alignment on UISliderComponent_SetMaxValue");
static_assert(sizeof(UISliderComponent_SetMaxValue) == 0x000008, "Wrong size on UISliderComponent_SetMaxValue");
static_assert(offsetof(UISliderComponent_SetMaxValue, InMaxValue) == 0x000000, "Member 'UISliderComponent_SetMaxValue::InMaxValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetMaxValue, KeepRelativeValue) == 0x000004, "Member 'UISliderComponent_SetMaxValue::KeepRelativeValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetMaxValue, FireEvent) == 0x000005, "Member 'UISliderComponent_SetMaxValue::FireEvent' has a wrong offset!");

// Function LGUI.UISliderComponent.SetMinValue
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_SetMinValue final
{
public:
	float                                         InMinValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepRelativeValue;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireEvent;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CA[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISliderComponent_SetMinValue) == 0x000004, "Wrong alignment on UISliderComponent_SetMinValue");
static_assert(sizeof(UISliderComponent_SetMinValue) == 0x000008, "Wrong size on UISliderComponent_SetMinValue");
static_assert(offsetof(UISliderComponent_SetMinValue, InMinValue) == 0x000000, "Member 'UISliderComponent_SetMinValue::InMinValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetMinValue, KeepRelativeValue) == 0x000004, "Member 'UISliderComponent_SetMinValue::KeepRelativeValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetMinValue, FireEvent) == 0x000005, "Member 'UISliderComponent_SetMinValue::FireEvent' has a wrong offset!");

// Function LGUI.UISliderComponent.SetProgressIncrement
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_SetProgressIncrement final
{
public:
	float                                         IncrementValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedRound;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CB[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISliderComponent_SetProgressIncrement) == 0x000004, "Wrong alignment on UISliderComponent_SetProgressIncrement");
static_assert(sizeof(UISliderComponent_SetProgressIncrement) == 0x000008, "Wrong size on UISliderComponent_SetProgressIncrement");
static_assert(offsetof(UISliderComponent_SetProgressIncrement, IncrementValue) == 0x000000, "Member 'UISliderComponent_SetProgressIncrement::IncrementValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetProgressIncrement, NeedRound) == 0x000004, "Member 'UISliderComponent_SetProgressIncrement::NeedRound' has a wrong offset!");

// Function LGUI.UISliderComponent.SetValue
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireEvent;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CC[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISliderComponent_SetValue) == 0x000004, "Wrong alignment on UISliderComponent_SetValue");
static_assert(sizeof(UISliderComponent_SetValue) == 0x000008, "Wrong size on UISliderComponent_SetValue");
static_assert(offsetof(UISliderComponent_SetValue, InValue) == 0x000000, "Member 'UISliderComponent_SetValue::InValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetValue, FireEvent) == 0x000004, "Member 'UISliderComponent_SetValue::FireEvent' has a wrong offset!");

// Function LGUI.UISliderComponent.UnregisterSlideEvent
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_UnregisterSlideEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_UnregisterSlideEvent) == 0x000008, "Wrong alignment on UISliderComponent_UnregisterSlideEvent");
static_assert(sizeof(UISliderComponent_UnregisterSlideEvent) == 0x000008, "Wrong size on UISliderComponent_UnregisterSlideEvent");
static_assert(offsetof(UISliderComponent_UnregisterSlideEvent, InDelegateHandle) == 0x000000, "Member 'UISliderComponent_UnregisterSlideEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UISliderComponent.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct UISliderComponent_GetMaxValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetMaxValue) == 0x000004, "Wrong alignment on UISliderComponent_GetMaxValue");
static_assert(sizeof(UISliderComponent_GetMaxValue) == 0x000004, "Wrong size on UISliderComponent_GetMaxValue");
static_assert(offsetof(UISliderComponent_GetMaxValue, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetMaxValue::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetMinValue
// 0x0004 (0x0004 - 0x0000)
struct UISliderComponent_GetMinValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetMinValue) == 0x000004, "Wrong alignment on UISliderComponent_GetMinValue");
static_assert(sizeof(UISliderComponent_GetMinValue) == 0x000004, "Wrong size on UISliderComponent_GetMinValue");
static_assert(offsetof(UISliderComponent_GetMinValue, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetMinValue::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetValue
// 0x0004 (0x0004 - 0x0000)
struct UISliderComponent_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetValue) == 0x000004, "Wrong alignment on UISliderComponent_GetValue");
static_assert(sizeof(UISliderComponent_GetValue) == 0x000004, "Wrong size on UISliderComponent_GetValue");
static_assert(offsetof(UISliderComponent_GetValue, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetValue::ReturnValue' has a wrong offset!");

// Function LGUI.SequencePlayContext.SetBatchRoots
// 0x0010 (0x0010 - 0x0000)
struct SequencePlayContext_SetBatchRoots final
{
public:
	TArray<class AUIBaseActor*>                   BatchRoots;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencePlayContext_SetBatchRoots) == 0x000008, "Wrong alignment on SequencePlayContext_SetBatchRoots");
static_assert(sizeof(SequencePlayContext_SetBatchRoots) == 0x000010, "Wrong size on SequencePlayContext_SetBatchRoots");
static_assert(offsetof(SequencePlayContext_SetBatchRoots, BatchRoots) == 0x000000, "Member 'SequencePlayContext_SetBatchRoots::BatchRoots' has a wrong offset!");

// Function LGUI.SequencerManager.BatchPlaySequenceOnActors
// 0x0058 (0x0058 - 0x0000)
struct SequencerManager_BatchPlaySequenceOnActors final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SequencePath;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AUIBaseActor*>                   BatchRoots;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMovieSceneSequencePlaybackSettings    PlaySetting;                                       // 0x0038(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D2[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerManager_BatchPlaySequenceOnActors) == 0x000008, "Wrong alignment on SequencerManager_BatchPlaySequenceOnActors");
static_assert(sizeof(SequencerManager_BatchPlaySequenceOnActors) == 0x000058, "Wrong size on SequencerManager_BatchPlaySequenceOnActors");
static_assert(offsetof(SequencerManager_BatchPlaySequenceOnActors, Context) == 0x000000, "Member 'SequencerManager_BatchPlaySequenceOnActors::Context' has a wrong offset!");
static_assert(offsetof(SequencerManager_BatchPlaySequenceOnActors, SequencePath) == 0x000008, "Member 'SequencerManager_BatchPlaySequenceOnActors::SequencePath' has a wrong offset!");
static_assert(offsetof(SequencerManager_BatchPlaySequenceOnActors, BatchRoots) == 0x000028, "Member 'SequencerManager_BatchPlaySequenceOnActors::BatchRoots' has a wrong offset!");
static_assert(offsetof(SequencerManager_BatchPlaySequenceOnActors, PlaySetting) == 0x000038, "Member 'SequencerManager_BatchPlaySequenceOnActors::PlaySetting' has a wrong offset!");
static_assert(offsetof(SequencerManager_BatchPlaySequenceOnActors, ReturnValue) == 0x000050, "Member 'SequencerManager_BatchPlaySequenceOnActors::ReturnValue' has a wrong offset!");

// Function LGUI.SequencerManager.GetBatchPlayContext
// 0x0010 (0x0010 - 0x0000)
struct SequencerManager_GetBatchPlayContext final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USequencePlayContext*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerManager_GetBatchPlayContext) == 0x000008, "Wrong alignment on SequencerManager_GetBatchPlayContext");
static_assert(sizeof(SequencerManager_GetBatchPlayContext) == 0x000010, "Wrong size on SequencerManager_GetBatchPlayContext");
static_assert(offsetof(SequencerManager_GetBatchPlayContext, Context) == 0x000000, "Member 'SequencerManager_GetBatchPlayContext::Context' has a wrong offset!");
static_assert(offsetof(SequencerManager_GetBatchPlayContext, ReturnValue) == 0x000008, "Member 'SequencerManager_GetBatchPlayContext::ReturnValue' has a wrong offset!");

// Function LGUI.SequencerManager.GetSequenceLoadState
// 0x0030 (0x0030 - 0x0000)
struct SequencerManager_GetSequenceLoadState final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Path;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceLoadState                            ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D3[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencerManager_GetSequenceLoadState) == 0x000008, "Wrong alignment on SequencerManager_GetSequenceLoadState");
static_assert(sizeof(SequencerManager_GetSequenceLoadState) == 0x000030, "Wrong size on SequencerManager_GetSequenceLoadState");
static_assert(offsetof(SequencerManager_GetSequenceLoadState, Context) == 0x000000, "Member 'SequencerManager_GetSequenceLoadState::Context' has a wrong offset!");
static_assert(offsetof(SequencerManager_GetSequenceLoadState, Path) == 0x000008, "Member 'SequencerManager_GetSequenceLoadState::Path' has a wrong offset!");
static_assert(offsetof(SequencerManager_GetSequenceLoadState, ReturnValue) == 0x000028, "Member 'SequencerManager_GetSequenceLoadState::ReturnValue' has a wrong offset!");

// Function LGUI.SequencerManager.LoadSequenceAssetAsync
// 0x0040 (0x0040 - 0x0000)
struct SequencerManager_LoadSequenceAssetAsync final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Path;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class ULevelSequence* Sequence)> OnLoad;                                            // 0x0028(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D4[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencerManager_LoadSequenceAssetAsync) == 0x000008, "Wrong alignment on SequencerManager_LoadSequenceAssetAsync");
static_assert(sizeof(SequencerManager_LoadSequenceAssetAsync) == 0x000040, "Wrong size on SequencerManager_LoadSequenceAssetAsync");
static_assert(offsetof(SequencerManager_LoadSequenceAssetAsync, Context) == 0x000000, "Member 'SequencerManager_LoadSequenceAssetAsync::Context' has a wrong offset!");
static_assert(offsetof(SequencerManager_LoadSequenceAssetAsync, Path) == 0x000008, "Member 'SequencerManager_LoadSequenceAssetAsync::Path' has a wrong offset!");
static_assert(offsetof(SequencerManager_LoadSequenceAssetAsync, OnLoad) == 0x000028, "Member 'SequencerManager_LoadSequenceAssetAsync::OnLoad' has a wrong offset!");

// Function LGUI.SequencerManager.ClearInvalidBind
// 0x0008 (0x0008 - 0x0000)
struct SequencerManager_ClearInvalidBind final
{
public:
	class ALevelSequenceActor*                    SeqActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerManager_ClearInvalidBind) == 0x000008, "Wrong alignment on SequencerManager_ClearInvalidBind");
static_assert(sizeof(SequencerManager_ClearInvalidBind) == 0x000008, "Wrong size on SequencerManager_ClearInvalidBind");
static_assert(offsetof(SequencerManager_ClearInvalidBind, SeqActor) == 0x000000, "Member 'SequencerManager_ClearInvalidBind::SeqActor' has a wrong offset!");

// Function LGUI.SpriteTransitionUtil.SetSpriteByTransitionInfo
// 0x0028 (0x0028 - 0x0000)
struct SpriteTransitionUtil_SetSpriteByTransitionInfo final
{
public:
	class UUISprite*                              Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpriteTransitionOfState               Info;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpriteTransitionUtil_SetSpriteByTransitionInfo) == 0x000008, "Wrong alignment on SpriteTransitionUtil_SetSpriteByTransitionInfo");
static_assert(sizeof(SpriteTransitionUtil_SetSpriteByTransitionInfo) == 0x000028, "Wrong size on SpriteTransitionUtil_SetSpriteByTransitionInfo");
static_assert(offsetof(SpriteTransitionUtil_SetSpriteByTransitionInfo, Sprite) == 0x000000, "Member 'SpriteTransitionUtil_SetSpriteByTransitionInfo::Sprite' has a wrong offset!");
static_assert(offsetof(SpriteTransitionUtil_SetSpriteByTransitionInfo, Info) == 0x000008, "Member 'SpriteTransitionUtil_SetSpriteByTransitionInfo::Info' has a wrong offset!");

// Function LGUI.SpriteTransitionUtil.SetSpriteSize
// 0x0018 (0x0018 - 0x0000)
struct SpriteTransitionUtil_SetSpriteSize final
{
public:
	class UUISprite*                              Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapSize;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D6[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpriteTransitionUtil_SetSpriteSize) == 0x000008, "Wrong alignment on SpriteTransitionUtil_SetSpriteSize");
static_assert(sizeof(SpriteTransitionUtil_SetSpriteSize) == 0x000018, "Wrong size on SpriteTransitionUtil_SetSpriteSize");
static_assert(offsetof(SpriteTransitionUtil_SetSpriteSize, Sprite) == 0x000000, "Member 'SpriteTransitionUtil_SetSpriteSize::Sprite' has a wrong offset!");
static_assert(offsetof(SpriteTransitionUtil_SetSpriteSize, bSnapSize) == 0x000008, "Member 'SpriteTransitionUtil_SetSpriteSize::bSnapSize' has a wrong offset!");
static_assert(offsetof(SpriteTransitionUtil_SetSpriteSize, Width) == 0x00000C, "Member 'SpriteTransitionUtil_SetSpriteSize::Width' has a wrong offset!");
static_assert(offsetof(SpriteTransitionUtil_SetSpriteSize, Height) == 0x000010, "Member 'SpriteTransitionUtil_SetSpriteSize::Height' has a wrong offset!");

// Function LGUI.UISpriteBase.SetSprite
// 0x0010 (0x0010 - 0x0000)
struct UISpriteBase_SetSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetSize;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISpriteBase_SetSprite) == 0x000008, "Wrong alignment on UISpriteBase_SetSprite");
static_assert(sizeof(UISpriteBase_SetSprite) == 0x000010, "Wrong size on UISpriteBase_SetSprite");
static_assert(offsetof(UISpriteBase_SetSprite, NewSprite) == 0x000000, "Member 'UISpriteBase_SetSprite::NewSprite' has a wrong offset!");
static_assert(offsetof(UISpriteBase_SetSprite, SetSize) == 0x000008, "Member 'UISpriteBase_SetSprite::SetSize' has a wrong offset!");

// Function LGUI.UISpriteBase.GetSprite
// 0x0008 (0x0008 - 0x0000)
struct UISpriteBase_GetSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteBase_GetSprite) == 0x000008, "Wrong alignment on UISpriteBase_GetSprite");
static_assert(sizeof(UISpriteBase_GetSprite) == 0x000008, "Wrong size on UISpriteBase_GetSprite");
static_assert(offsetof(UISpriteBase_GetSprite, ReturnValue) == 0x000000, "Member 'UISpriteBase_GetSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.SetLocalTextDelegate
// 0x0014 (0x0014 - 0x0000)
struct UIText_SetLocalTextDelegate final
{
public:
	TDelegate<void(class FString& TableName, int32 TextKey, class UUIText* UiText)> Delegate;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetLocalTextDelegate) == 0x000004, "Wrong alignment on UIText_SetLocalTextDelegate");
static_assert(sizeof(UIText_SetLocalTextDelegate) == 0x000014, "Wrong size on UIText_SetLocalTextDelegate");
static_assert(offsetof(UIText_SetLocalTextDelegate, Delegate) == 0x000000, "Member 'UIText_SetLocalTextDelegate::Delegate' has a wrong offset!");

// Function LGUI.UIText.SetLocalTextNewDelegate
// 0x0014 (0x0014 - 0x0000)
struct UIText_SetLocalTextNewDelegate final
{
public:
	TDelegate<void(class FString& TextKey, class UUIText* UiText)> Delegate;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetLocalTextNewDelegate) == 0x000004, "Wrong alignment on UIText_SetLocalTextNewDelegate");
static_assert(sizeof(UIText_SetLocalTextNewDelegate) == 0x000014, "Wrong size on UIText_SetLocalTextNewDelegate");
static_assert(offsetof(UIText_SetLocalTextNewDelegate, Delegate) == 0x000000, "Member 'UIText_SetLocalTextNewDelegate::Delegate' has a wrong offset!");

// Function LGUI.UIText.SetTextTranslateDelegate
// 0x0014 (0x0014 - 0x0000)
struct UIText_SetTextTranslateDelegate final
{
public:
	TDelegate<void(class UUIText* UiText)>        Delegate;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetTextTranslateDelegate) == 0x000004, "Wrong alignment on UIText_SetTextTranslateDelegate");
static_assert(sizeof(UIText_SetTextTranslateDelegate) == 0x000014, "Wrong size on UIText_SetTextTranslateDelegate");
static_assert(offsetof(UIText_SetTextTranslateDelegate, Delegate) == 0x000000, "Member 'UIText_SetTextTranslateDelegate::Delegate' has a wrong offset!");

// Function LGUI.UIText.AddFloatArgs
// 0x0004 (0x0004 - 0x0000)
struct UIText_AddFloatArgs final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_AddFloatArgs) == 0x000004, "Wrong alignment on UIText_AddFloatArgs");
static_assert(sizeof(UIText_AddFloatArgs) == 0x000004, "Wrong size on UIText_AddFloatArgs");
static_assert(offsetof(UIText_AddFloatArgs, Value) == 0x000000, "Member 'UIText_AddFloatArgs::Value' has a wrong offset!");

// Function LGUI.UIText.AddFormatTableInfo
// 0x0018 (0x0018 - 0x0000)
struct UIText_AddFormatTableInfo final
{
public:
	class FString                                 ConfigTableName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E3[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIText_AddFormatTableInfo) == 0x000008, "Wrong alignment on UIText_AddFormatTableInfo");
static_assert(sizeof(UIText_AddFormatTableInfo) == 0x000018, "Wrong size on UIText_AddFormatTableInfo");
static_assert(offsetof(UIText_AddFormatTableInfo, ConfigTableName) == 0x000000, "Member 'UIText_AddFormatTableInfo::ConfigTableName' has a wrong offset!");
static_assert(offsetof(UIText_AddFormatTableInfo, Key) == 0x000010, "Member 'UIText_AddFormatTableInfo::Key' has a wrong offset!");

// Function LGUI.UIText.AddFormatTableInfoNew
// 0x0010 (0x0010 - 0x0000)
struct UIText_AddFormatTableInfoNew final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_AddFormatTableInfoNew) == 0x000008, "Wrong alignment on UIText_AddFormatTableInfoNew");
static_assert(sizeof(UIText_AddFormatTableInfoNew) == 0x000010, "Wrong size on UIText_AddFormatTableInfoNew");
static_assert(offsetof(UIText_AddFormatTableInfoNew, Key) == 0x000000, "Member 'UIText_AddFormatTableInfoNew::Key' has a wrong offset!");

// Function LGUI.UIText.AddInt64Args
// 0x0008 (0x0008 - 0x0000)
struct UIText_AddInt64Args final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_AddInt64Args) == 0x000008, "Wrong alignment on UIText_AddInt64Args");
static_assert(sizeof(UIText_AddInt64Args) == 0x000008, "Wrong size on UIText_AddInt64Args");
static_assert(offsetof(UIText_AddInt64Args, Value) == 0x000000, "Member 'UIText_AddInt64Args::Value' has a wrong offset!");

// Function LGUI.UIText.AddIntArgs
// 0x0004 (0x0004 - 0x0000)
struct UIText_AddIntArgs final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_AddIntArgs) == 0x000004, "Wrong alignment on UIText_AddIntArgs");
static_assert(sizeof(UIText_AddIntArgs) == 0x000004, "Wrong size on UIText_AddIntArgs");
static_assert(offsetof(UIText_AddIntArgs, Value) == 0x000000, "Member 'UIText_AddIntArgs::Value' has a wrong offset!");

// Function LGUI.UIText.AddStringArgs
// 0x0010 (0x0010 - 0x0000)
struct UIText_AddStringArgs final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_AddStringArgs) == 0x000008, "Wrong alignment on UIText_AddStringArgs");
static_assert(sizeof(UIText_AddStringArgs) == 0x000010, "Wrong size on UIText_AddStringArgs");
static_assert(offsetof(UIText_AddStringArgs, Value) == 0x000000, "Member 'UIText_AddStringArgs::Value' has a wrong offset!");

// Function LGUI.UIText.GetDisplayCharLength
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetDisplayCharLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetDisplayCharLength) == 0x000004, "Wrong alignment on UIText_GetDisplayCharLength");
static_assert(sizeof(UIText_GetDisplayCharLength) == 0x000004, "Wrong size on UIText_GetDisplayCharLength");
static_assert(offsetof(UIText_GetDisplayCharLength, ReturnValue) == 0x000000, "Member 'UIText_GetDisplayCharLength::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRealSize
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetRealSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRealSize) == 0x000004, "Wrong alignment on UIText_GetRealSize");
static_assert(sizeof(UIText_GetRealSize) == 0x000008, "Wrong size on UIText_GetRealSize");
static_assert(offsetof(UIText_GetRealSize, ReturnValue) == 0x000000, "Member 'UIText_GetRealSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetTextLineNumArray
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetTextLineNumArray final
{
public:
	TArray<int32>                                 OutArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetTextLineNumArray) == 0x000008, "Wrong alignment on UIText_GetTextLineNumArray");
static_assert(sizeof(UIText_GetTextLineNumArray) == 0x000010, "Wrong size on UIText_GetTextLineNumArray");
static_assert(offsetof(UIText_GetTextLineNumArray, OutArray) == 0x000000, "Member 'UIText_GetTextLineNumArray::OutArray' has a wrong offset!");

// Function LGUI.UIText.GetTextRenderSize
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetTextRenderSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetTextRenderSize) == 0x000004, "Wrong alignment on UIText_GetTextRenderSize");
static_assert(sizeof(UIText_GetTextRenderSize) == 0x000008, "Wrong size on UIText_GetTextRenderSize");
static_assert(offsetof(UIText_GetTextRenderSize, ReturnValue) == 0x000000, "Member 'UIText_GetTextRenderSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.OnTextTextureLoaded
// 0x0010 (0x0010 - 0x0000)
struct UIText_OnTextTextureLoaded final
{
public:
	TArray<struct FDynamicAtlasSlotManagedHandle> ManagedHandle;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_OnTextTextureLoaded) == 0x000008, "Wrong alignment on UIText_OnTextTextureLoaded");
static_assert(sizeof(UIText_OnTextTextureLoaded) == 0x000010, "Wrong size on UIText_OnTextTextureLoaded");
static_assert(offsetof(UIText_OnTextTextureLoaded, ManagedHandle) == 0x000000, "Member 'UIText_OnTextTextureLoaded::ManagedHandle' has a wrong offset!");

// Function LGUI.UIText.SetAdjustHeight
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetAdjustHeight final
{
public:
	bool                                          NewAdjustHeight;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetAdjustHeight) == 0x000001, "Wrong alignment on UIText_SetAdjustHeight");
static_assert(sizeof(UIText_SetAdjustHeight) == 0x000001, "Wrong size on UIText_SetAdjustHeight");
static_assert(offsetof(UIText_SetAdjustHeight, NewAdjustHeight) == 0x000000, "Member 'UIText_SetAdjustHeight::NewAdjustHeight' has a wrong offset!");

// Function LGUI.UIText.SetAdjustWidth
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetAdjustWidth final
{
public:
	bool                                          NewAdjustWidth;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetAdjustWidth) == 0x000001, "Wrong alignment on UIText_SetAdjustWidth");
static_assert(sizeof(UIText_SetAdjustWidth) == 0x000001, "Wrong size on UIText_SetAdjustWidth");
static_assert(offsetof(UIText_SetAdjustWidth, NewAdjustWidth) == 0x000000, "Member 'UIText_SetAdjustWidth::NewAdjustWidth' has a wrong offset!");

// Function LGUI.UIText.SetFont
// 0x0008 (0x0008 - 0x0000)
struct UIText_SetFont final
{
public:
	class ULGUIFontData_BaseObject*               NewFont;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFont) == 0x000008, "Wrong alignment on UIText_SetFont");
static_assert(sizeof(UIText_SetFont) == 0x000008, "Wrong size on UIText_SetFont");
static_assert(offsetof(UIText_SetFont, NewFont) == 0x000000, "Member 'UIText_SetFont::NewFont' has a wrong offset!");

// Function LGUI.UIText.SetFontSize
// 0x0004 (0x0004 - 0x0000)
struct UIText_SetFontSize final
{
public:
	float                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFontSize) == 0x000004, "Wrong alignment on UIText_SetFontSize");
static_assert(sizeof(UIText_SetFontSize) == 0x000004, "Wrong size on UIText_SetFontSize");
static_assert(offsetof(UIText_SetFontSize, NewSize) == 0x000000, "Member 'UIText_SetFontSize::NewSize' has a wrong offset!");

// Function LGUI.UIText.SetFontSpace
// 0x0008 (0x0008 - 0x0000)
struct UIText_SetFontSpace final
{
public:
	struct FVector2D                              NewSpace;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFontSpace) == 0x000004, "Wrong alignment on UIText_SetFontSpace");
static_assert(sizeof(UIText_SetFontSpace) == 0x000008, "Wrong size on UIText_SetFontSpace");
static_assert(offsetof(UIText_SetFontSpace, NewSpace) == 0x000000, "Member 'UIText_SetFontSpace::NewSpace' has a wrong offset!");

// Function LGUI.UIText.SetFontSpacePercentage
// 0x0008 (0x0008 - 0x0000)
struct UIText_SetFontSpacePercentage final
{
public:
	struct FVector2D                              NewSpace;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFontSpacePercentage) == 0x000004, "Wrong alignment on UIText_SetFontSpacePercentage");
static_assert(sizeof(UIText_SetFontSpacePercentage) == 0x000008, "Wrong size on UIText_SetFontSpacePercentage");
static_assert(offsetof(UIText_SetFontSpacePercentage, NewSpace) == 0x000000, "Member 'UIText_SetFontSpacePercentage::NewSpace' has a wrong offset!");

// Function LGUI.UIText.SetFontStyle
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetFontStyle final
{
public:
	EUITextFontStyle                              NewFontStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFontStyle) == 0x000001, "Wrong alignment on UIText_SetFontStyle");
static_assert(sizeof(UIText_SetFontStyle) == 0x000001, "Wrong size on UIText_SetFontStyle");
static_assert(offsetof(UIText_SetFontStyle, NewFontStyle) == 0x000000, "Member 'UIText_SetFontStyle::NewFontStyle' has a wrong offset!");

// Function LGUI.UIText.SetMaxHeight
// 0x0004 (0x0004 - 0x0000)
struct UIText_SetMaxHeight final
{
public:
	int32                                         NewMaxHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetMaxHeight) == 0x000004, "Wrong alignment on UIText_SetMaxHeight");
static_assert(sizeof(UIText_SetMaxHeight) == 0x000004, "Wrong size on UIText_SetMaxHeight");
static_assert(offsetof(UIText_SetMaxHeight, NewMaxHeight) == 0x000000, "Member 'UIText_SetMaxHeight::NewMaxHeight' has a wrong offset!");

// Function LGUI.UIText.SetMaxWidth
// 0x0004 (0x0004 - 0x0000)
struct UIText_SetMaxWidth final
{
public:
	int32                                         NewMaxWidth;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetMaxWidth) == 0x000004, "Wrong alignment on UIText_SetMaxWidth");
static_assert(sizeof(UIText_SetMaxWidth) == 0x000004, "Wrong size on UIText_SetMaxWidth");
static_assert(offsetof(UIText_SetMaxWidth, NewMaxWidth) == 0x000000, "Member 'UIText_SetMaxWidth::NewMaxWidth' has a wrong offset!");

// Function LGUI.UIText.SetOverflowType
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetOverflowType final
{
public:
	EUITextOverflowType                           NewOverflowType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetOverflowType) == 0x000001, "Wrong alignment on UIText_SetOverflowType");
static_assert(sizeof(UIText_SetOverflowType) == 0x000001, "Wrong size on UIText_SetOverflowType");
static_assert(offsetof(UIText_SetOverflowType, NewOverflowType) == 0x000000, "Member 'UIText_SetOverflowType::NewOverflowType' has a wrong offset!");

// Function LGUI.UIText.SetParagraphHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetParagraphHorizontalAlignment final
{
public:
	EUITextParagraphHorizontalAlign               NewHAlign;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetParagraphHorizontalAlignment) == 0x000001, "Wrong alignment on UIText_SetParagraphHorizontalAlignment");
static_assert(sizeof(UIText_SetParagraphHorizontalAlignment) == 0x000001, "Wrong size on UIText_SetParagraphHorizontalAlignment");
static_assert(offsetof(UIText_SetParagraphHorizontalAlignment, NewHAlign) == 0x000000, "Member 'UIText_SetParagraphHorizontalAlignment::NewHAlign' has a wrong offset!");

// Function LGUI.UIText.SetParagraphVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetParagraphVerticalAlignment final
{
public:
	EUITextParagraphVerticalAlign                 NewVAlign;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetParagraphVerticalAlignment) == 0x000001, "Wrong alignment on UIText_SetParagraphVerticalAlignment");
static_assert(sizeof(UIText_SetParagraphVerticalAlignment) == 0x000001, "Wrong size on UIText_SetParagraphVerticalAlignment");
static_assert(offsetof(UIText_SetParagraphVerticalAlignment, NewVAlign) == 0x000000, "Member 'UIText_SetParagraphVerticalAlignment::NewVAlign' has a wrong offset!");

// Function LGUI.UIText.SetRichText
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetRichText final
{
public:
	bool                                          NewRichText;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetRichText) == 0x000001, "Wrong alignment on UIText_SetRichText");
static_assert(sizeof(UIText_SetRichText) == 0x000001, "Wrong size on UIText_SetRichText");
static_assert(offsetof(UIText_SetRichText, NewRichText) == 0x000000, "Member 'UIText_SetRichText::NewRichText' has a wrong offset!");

// Function LGUI.UIText.SetText
// 0x0018 (0x0018 - 0x0000)
struct UIText_SetText final
{
public:
	class FString                                 NewText;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableTranslate;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E4[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIText_SetText) == 0x000008, "Wrong alignment on UIText_SetText");
static_assert(sizeof(UIText_SetText) == 0x000018, "Wrong size on UIText_SetText");
static_assert(offsetof(UIText_SetText, NewText) == 0x000000, "Member 'UIText_SetText::NewText' has a wrong offset!");
static_assert(offsetof(UIText_SetText, DisableTranslate) == 0x000010, "Member 'UIText_SetText::DisableTranslate' has a wrong offset!");

// Function LGUI.UIText.ShowText
// 0x0018 (0x0018 - 0x0000)
struct UIText_ShowText final
{
public:
	class FString                                 ConfigTableName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E5[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIText_ShowText) == 0x000008, "Wrong alignment on UIText_ShowText");
static_assert(sizeof(UIText_ShowText) == 0x000018, "Wrong size on UIText_ShowText");
static_assert(offsetof(UIText_ShowText, ConfigTableName) == 0x000000, "Member 'UIText_ShowText::ConfigTableName' has a wrong offset!");
static_assert(offsetof(UIText_ShowText, Key) == 0x000010, "Member 'UIText_ShowText::Key' has a wrong offset!");

// Function LGUI.UIText.ShowTextNew
// 0x0010 (0x0010 - 0x0000)
struct UIText_ShowTextNew final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_ShowTextNew) == 0x000008, "Wrong alignment on UIText_ShowTextNew");
static_assert(sizeof(UIText_ShowTextNew) == 0x000010, "Wrong size on UIText_ShowTextNew");
static_assert(offsetof(UIText_ShowTextNew, Key) == 0x000000, "Member 'UIText_ShowTextNew::Key' has a wrong offset!");

// Function LGUI.UIText.GetAdjustHeight
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetAdjustHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAdjustHeight) == 0x000001, "Wrong alignment on UIText_GetAdjustHeight");
static_assert(sizeof(UIText_GetAdjustHeight) == 0x000001, "Wrong size on UIText_GetAdjustHeight");
static_assert(offsetof(UIText_GetAdjustHeight, ReturnValue) == 0x000000, "Member 'UIText_GetAdjustHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetAdjustWidth
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetAdjustWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAdjustWidth) == 0x000001, "Wrong alignment on UIText_GetAdjustWidth");
static_assert(sizeof(UIText_GetAdjustWidth) == 0x000001, "Wrong size on UIText_GetAdjustWidth");
static_assert(offsetof(UIText_GetAdjustWidth, ReturnValue) == 0x000000, "Member 'UIText_GetAdjustWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetAlignCenter
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetAlignCenter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAlignCenter) == 0x000001, "Wrong alignment on UIText_GetAlignCenter");
static_assert(sizeof(UIText_GetAlignCenter) == 0x000001, "Wrong size on UIText_GetAlignCenter");
static_assert(offsetof(UIText_GetAlignCenter, ReturnValue) == 0x000000, "Member 'UIText_GetAlignCenter::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetAutoEllipsis
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetAutoEllipsis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAutoEllipsis) == 0x000001, "Wrong alignment on UIText_GetAutoEllipsis");
static_assert(sizeof(UIText_GetAutoEllipsis) == 0x000001, "Wrong size on UIText_GetAutoEllipsis");
static_assert(offsetof(UIText_GetAutoEllipsis, ReturnValue) == 0x000000, "Member 'UIText_GetAutoEllipsis::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetAutoEllipsisSplitWord
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetAutoEllipsisSplitWord final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAutoEllipsisSplitWord) == 0x000001, "Wrong alignment on UIText_GetAutoEllipsisSplitWord");
static_assert(sizeof(UIText_GetAutoEllipsisSplitWord) == 0x000001, "Wrong size on UIText_GetAutoEllipsisSplitWord");
static_assert(offsetof(UIText_GetAutoEllipsisSplitWord, ReturnValue) == 0x000000, "Member 'UIText_GetAutoEllipsisSplitWord::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFont
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetFont final
{
public:
	class ULGUIFontData_BaseObject*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFont) == 0x000008, "Wrong alignment on UIText_GetFont");
static_assert(sizeof(UIText_GetFont) == 0x000008, "Wrong size on UIText_GetFont");
static_assert(offsetof(UIText_GetFont, ReturnValue) == 0x000000, "Member 'UIText_GetFont::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontOutlineColor
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetFontOutlineColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontOutlineColor) == 0x000004, "Wrong alignment on UIText_GetFontOutlineColor");
static_assert(sizeof(UIText_GetFontOutlineColor) == 0x000004, "Wrong size on UIText_GetFontOutlineColor");
static_assert(offsetof(UIText_GetFontOutlineColor, ReturnValue) == 0x000000, "Member 'UIText_GetFontOutlineColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontOutlineSize
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetFontOutlineSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontOutlineSize) == 0x000004, "Wrong alignment on UIText_GetFontOutlineSize");
static_assert(sizeof(UIText_GetFontOutlineSize) == 0x000004, "Wrong size on UIText_GetFontOutlineSize");
static_assert(offsetof(UIText_GetFontOutlineSize, ReturnValue) == 0x000000, "Member 'UIText_GetFontOutlineSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontSpace
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetFontSpace final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontSpace) == 0x000004, "Wrong alignment on UIText_GetFontSpace");
static_assert(sizeof(UIText_GetFontSpace) == 0x000008, "Wrong size on UIText_GetFontSpace");
static_assert(offsetof(UIText_GetFontSpace, ReturnValue) == 0x000000, "Member 'UIText_GetFontSpace::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontSpaceFinal
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetFontSpaceFinal final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontSpaceFinal) == 0x000004, "Wrong alignment on UIText_GetFontSpaceFinal");
static_assert(sizeof(UIText_GetFontSpaceFinal) == 0x000008, "Wrong size on UIText_GetFontSpaceFinal");
static_assert(offsetof(UIText_GetFontSpaceFinal, ReturnValue) == 0x000000, "Member 'UIText_GetFontSpaceFinal::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontSpacePercentage
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetFontSpacePercentage final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontSpacePercentage) == 0x000004, "Wrong alignment on UIText_GetFontSpacePercentage");
static_assert(sizeof(UIText_GetFontSpacePercentage) == 0x000008, "Wrong size on UIText_GetFontSpacePercentage");
static_assert(offsetof(UIText_GetFontSpacePercentage, ReturnValue) == 0x000000, "Member 'UIText_GetFontSpacePercentage::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontStyle
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetFontStyle final
{
public:
	EUITextFontStyle                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontStyle) == 0x000001, "Wrong alignment on UIText_GetFontStyle");
static_assert(sizeof(UIText_GetFontStyle) == 0x000001, "Wrong size on UIText_GetFontStyle");
static_assert(offsetof(UIText_GetFontStyle, ReturnValue) == 0x000000, "Member 'UIText_GetFontStyle::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetHyperlinks
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetHyperlinks final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetHyperlinks) == 0x000008, "Wrong alignment on UIText_GetHyperlinks");
static_assert(sizeof(UIText_GetHyperlinks) == 0x000010, "Wrong size on UIText_GetHyperlinks");
static_assert(offsetof(UIText_GetHyperlinks, ReturnValue) == 0x000000, "Member 'UIText_GetHyperlinks::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetMaxHeight
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetMaxHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetMaxHeight) == 0x000004, "Wrong alignment on UIText_GetMaxHeight");
static_assert(sizeof(UIText_GetMaxHeight) == 0x000004, "Wrong size on UIText_GetMaxHeight");
static_assert(offsetof(UIText_GetMaxHeight, ReturnValue) == 0x000000, "Member 'UIText_GetMaxHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetMaxWidth
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetMaxWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetMaxWidth) == 0x000004, "Wrong alignment on UIText_GetMaxWidth");
static_assert(sizeof(UIText_GetMaxWidth) == 0x000004, "Wrong size on UIText_GetMaxWidth");
static_assert(offsetof(UIText_GetMaxWidth, ReturnValue) == 0x000000, "Member 'UIText_GetMaxWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetOverflowType
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetOverflowType final
{
public:
	EUITextOverflowType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetOverflowType) == 0x000001, "Wrong alignment on UIText_GetOverflowType");
static_assert(sizeof(UIText_GetOverflowType) == 0x000001, "Wrong size on UIText_GetOverflowType");
static_assert(offsetof(UIText_GetOverflowType, ReturnValue) == 0x000000, "Member 'UIText_GetOverflowType::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRichText
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetRichText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRichText) == 0x000001, "Wrong alignment on UIText_GetRichText");
static_assert(sizeof(UIText_GetRichText) == 0x000001, "Wrong size on UIText_GetRichText");
static_assert(offsetof(UIText_GetRichText, ReturnValue) == 0x000000, "Member 'UIText_GetRichText::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetSize
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetSize) == 0x000004, "Wrong alignment on UIText_GetSize");
static_assert(sizeof(UIText_GetSize) == 0x000004, "Wrong size on UIText_GetSize");
static_assert(offsetof(UIText_GetSize, ReturnValue) == 0x000000, "Member 'UIText_GetSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetText
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetText) == 0x000008, "Wrong alignment on UIText_GetText");
static_assert(sizeof(UIText_GetText) == 0x000010, "Wrong size on UIText_GetText");
static_assert(offsetof(UIText_GetText, ReturnValue) == 0x000000, "Member 'UIText_GetText::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.LineWidthTo
// 0x0018 (0x0018 - 0x0000)
struct UI2DLineRendererBase_LineWidthTo final
{
public:
	float                                         EndValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   EaseType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E8[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_LineWidthTo) == 0x000008, "Wrong alignment on UI2DLineRendererBase_LineWidthTo");
static_assert(sizeof(UI2DLineRendererBase_LineWidthTo) == 0x000018, "Wrong size on UI2DLineRendererBase_LineWidthTo");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, EndValue) == 0x000000, "Member 'UI2DLineRendererBase_LineWidthTo::EndValue' has a wrong offset!");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, Duration) == 0x000004, "Member 'UI2DLineRendererBase_LineWidthTo::Duration' has a wrong offset!");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, Delay) == 0x000008, "Member 'UI2DLineRendererBase_LineWidthTo::Delay' has a wrong offset!");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, EaseType) == 0x00000C, "Member 'UI2DLineRendererBase_LineWidthTo::EaseType' has a wrong offset!");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, ReturnValue) == 0x000010, "Member 'UI2DLineRendererBase_LineWidthTo::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.SetEndType
// 0x0001 (0x0001 - 0x0000)
struct UI2DLineRendererBase_SetEndType final
{
public:
	EUI2DLineRenderer_EndType                     NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_SetEndType) == 0x000001, "Wrong alignment on UI2DLineRendererBase_SetEndType");
static_assert(sizeof(UI2DLineRendererBase_SetEndType) == 0x000001, "Wrong size on UI2DLineRendererBase_SetEndType");
static_assert(offsetof(UI2DLineRendererBase_SetEndType, NewValue) == 0x000000, "Member 'UI2DLineRendererBase_SetEndType::NewValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.SetLineWidth
// 0x0004 (0x0004 - 0x0000)
struct UI2DLineRendererBase_SetLineWidth final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_SetLineWidth) == 0x000004, "Wrong alignment on UI2DLineRendererBase_SetLineWidth");
static_assert(sizeof(UI2DLineRendererBase_SetLineWidth) == 0x000004, "Wrong size on UI2DLineRendererBase_SetLineWidth");
static_assert(offsetof(UI2DLineRendererBase_SetLineWidth, NewValue) == 0x000000, "Member 'UI2DLineRendererBase_SetLineWidth::NewValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.SetLineWidthOffset
// 0x0004 (0x0004 - 0x0000)
struct UI2DLineRendererBase_SetLineWidthOffset final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_SetLineWidthOffset) == 0x000004, "Wrong alignment on UI2DLineRendererBase_SetLineWidthOffset");
static_assert(sizeof(UI2DLineRendererBase_SetLineWidthOffset) == 0x000004, "Wrong size on UI2DLineRendererBase_SetLineWidthOffset");
static_assert(offsetof(UI2DLineRendererBase_SetLineWidthOffset, NewValue) == 0x000000, "Member 'UI2DLineRendererBase_SetLineWidthOffset::NewValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.GetEndType
// 0x0001 (0x0001 - 0x0000)
struct UI2DLineRendererBase_GetEndType final
{
public:
	EUI2DLineRenderer_EndType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_GetEndType) == 0x000001, "Wrong alignment on UI2DLineRendererBase_GetEndType");
static_assert(sizeof(UI2DLineRendererBase_GetEndType) == 0x000001, "Wrong size on UI2DLineRendererBase_GetEndType");
static_assert(offsetof(UI2DLineRendererBase_GetEndType, ReturnValue) == 0x000000, "Member 'UI2DLineRendererBase_GetEndType::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.GetLineWidth
// 0x0004 (0x0004 - 0x0000)
struct UI2DLineRendererBase_GetLineWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_GetLineWidth) == 0x000004, "Wrong alignment on UI2DLineRendererBase_GetLineWidth");
static_assert(sizeof(UI2DLineRendererBase_GetLineWidth) == 0x000004, "Wrong size on UI2DLineRendererBase_GetLineWidth");
static_assert(offsetof(UI2DLineRendererBase_GetLineWidth, ReturnValue) == 0x000000, "Member 'UI2DLineRendererBase_GetLineWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.GetLineWidthOffset
// 0x0004 (0x0004 - 0x0000)
struct UI2DLineRendererBase_GetLineWidthOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_GetLineWidthOffset) == 0x000004, "Wrong alignment on UI2DLineRendererBase_GetLineWidthOffset");
static_assert(sizeof(UI2DLineRendererBase_GetLineWidthOffset) == 0x000004, "Wrong size on UI2DLineRendererBase_GetLineWidthOffset");
static_assert(offsetof(UI2DLineRendererBase_GetLineWidthOffset, ReturnValue) == 0x000000, "Member 'UI2DLineRendererBase_GetLineWidthOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRaw.SetPoints
// 0x0018 (0x0018 - 0x0000)
struct UI2DLineRaw_SetPoints final
{
public:
	TArray<struct FVector2D>                      InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAdjustSize;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11ED[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UI2DLineRaw_SetPoints) == 0x000008, "Wrong alignment on UI2DLineRaw_SetPoints");
static_assert(sizeof(UI2DLineRaw_SetPoints) == 0x000018, "Wrong size on UI2DLineRaw_SetPoints");
static_assert(offsetof(UI2DLineRaw_SetPoints, InPoints) == 0x000000, "Member 'UI2DLineRaw_SetPoints::InPoints' has a wrong offset!");
static_assert(offsetof(UI2DLineRaw_SetPoints, bAdjustSize) == 0x000010, "Member 'UI2DLineRaw_SetPoints::bAdjustSize' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetAlign final
{
public:
	ELGUILayoutAlignmentType                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetAlign) == 0x000001, "Wrong alignment on UIVerticalLayout_SetAlign");
static_assert(sizeof(UIVerticalLayout_SetAlign) == 0x000001, "Wrong size on UIVerticalLayout_SetAlign");
static_assert(offsetof(UIVerticalLayout_SetAlign, Value) == 0x000000, "Member 'UIVerticalLayout_SetAlign::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetExpendChildrenHeight
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetExpendChildrenHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetExpendChildrenHeight) == 0x000001, "Wrong alignment on UIVerticalLayout_SetExpendChildrenHeight");
static_assert(sizeof(UIVerticalLayout_SetExpendChildrenHeight) == 0x000001, "Wrong size on UIVerticalLayout_SetExpendChildrenHeight");
static_assert(offsetof(UIVerticalLayout_SetExpendChildrenHeight, Value) == 0x000000, "Member 'UIVerticalLayout_SetExpendChildrenHeight::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetExpendChildrenWidth
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetExpendChildrenWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetExpendChildrenWidth) == 0x000001, "Wrong alignment on UIVerticalLayout_SetExpendChildrenWidth");
static_assert(sizeof(UIVerticalLayout_SetExpendChildrenWidth) == 0x000001, "Wrong size on UIVerticalLayout_SetExpendChildrenWidth");
static_assert(offsetof(UIVerticalLayout_SetExpendChildrenWidth, Value) == 0x000000, "Member 'UIVerticalLayout_SetExpendChildrenWidth::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIVerticalLayout_SetHeightFitToChildren");
static_assert(sizeof(UIVerticalLayout_SetHeightFitToChildren) == 0x000001, "Wrong size on UIVerticalLayout_SetHeightFitToChildren");
static_assert(offsetof(UIVerticalLayout_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIVerticalLayout_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIVerticalLayout_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetPadding) == 0x000004, "Wrong alignment on UIVerticalLayout_SetPadding");
static_assert(sizeof(UIVerticalLayout_SetPadding) == 0x000010, "Wrong size on UIVerticalLayout_SetPadding");
static_assert(offsetof(UIVerticalLayout_SetPadding, Value) == 0x000000, "Member 'UIVerticalLayout_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetSpacing
// 0x0004 (0x0004 - 0x0000)
struct UIVerticalLayout_SetSpacing final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetSpacing) == 0x000004, "Wrong alignment on UIVerticalLayout_SetSpacing");
static_assert(sizeof(UIVerticalLayout_SetSpacing) == 0x000004, "Wrong size on UIVerticalLayout_SetSpacing");
static_assert(offsetof(UIVerticalLayout_SetSpacing, Value) == 0x000000, "Member 'UIVerticalLayout_SetSpacing::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIVerticalLayout_SetWidthFitToChildren");
static_assert(sizeof(UIVerticalLayout_SetWidthFitToChildren) == 0x000001, "Wrong size on UIVerticalLayout_SetWidthFitToChildren");
static_assert(offsetof(UIVerticalLayout_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIVerticalLayout_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetActuralRange
// 0x0004 (0x0004 - 0x0000)
struct UIVerticalLayout_GetActuralRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetActuralRange) == 0x000004, "Wrong alignment on UIVerticalLayout_GetActuralRange");
static_assert(sizeof(UIVerticalLayout_GetActuralRange) == 0x000004, "Wrong size on UIVerticalLayout_GetActuralRange");
static_assert(offsetof(UIVerticalLayout_GetActuralRange, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetActuralRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetAlign final
{
public:
	ELGUILayoutAlignmentType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetAlign) == 0x000001, "Wrong alignment on UIVerticalLayout_GetAlign");
static_assert(sizeof(UIVerticalLayout_GetAlign) == 0x000001, "Wrong size on UIVerticalLayout_GetAlign");
static_assert(offsetof(UIVerticalLayout_GetAlign, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetExpendChildrenHeight
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetExpendChildrenHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetExpendChildrenHeight) == 0x000001, "Wrong alignment on UIVerticalLayout_GetExpendChildrenHeight");
static_assert(sizeof(UIVerticalLayout_GetExpendChildrenHeight) == 0x000001, "Wrong size on UIVerticalLayout_GetExpendChildrenHeight");
static_assert(offsetof(UIVerticalLayout_GetExpendChildrenHeight, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetExpendChildrenHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetExpendChildrenWidth
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetExpendChildrenWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetExpendChildrenWidth) == 0x000001, "Wrong alignment on UIVerticalLayout_GetExpendChildrenWidth");
static_assert(sizeof(UIVerticalLayout_GetExpendChildrenWidth) == 0x000001, "Wrong size on UIVerticalLayout_GetExpendChildrenWidth");
static_assert(offsetof(UIVerticalLayout_GetExpendChildrenWidth, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetExpendChildrenWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIVerticalLayout_GetHeightFitToChildren");
static_assert(sizeof(UIVerticalLayout_GetHeightFitToChildren) == 0x000001, "Wrong size on UIVerticalLayout_GetHeightFitToChildren");
static_assert(offsetof(UIVerticalLayout_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIVerticalLayout_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetPadding) == 0x000004, "Wrong alignment on UIVerticalLayout_GetPadding");
static_assert(sizeof(UIVerticalLayout_GetPadding) == 0x000010, "Wrong size on UIVerticalLayout_GetPadding");
static_assert(offsetof(UIVerticalLayout_GetPadding, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetSpacing
// 0x0004 (0x0004 - 0x0000)
struct UIVerticalLayout_GetSpacing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetSpacing) == 0x000004, "Wrong alignment on UIVerticalLayout_GetSpacing");
static_assert(sizeof(UIVerticalLayout_GetSpacing) == 0x000004, "Wrong size on UIVerticalLayout_GetSpacing");
static_assert(offsetof(UIVerticalLayout_GetSpacing, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetSpacing::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIVerticalLayout_GetWidthFitToChildren");
static_assert(sizeof(UIVerticalLayout_GetWidthFitToChildren) == 0x000001, "Wrong size on UIVerticalLayout_GetWidthFitToChildren");
static_assert(offsetof(UIVerticalLayout_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIAndroidBackComponent.GetActiveAndroidBackComponentSize
// 0x0004 (0x0004 - 0x0000)
struct UIAndroidBackComponent_GetActiveAndroidBackComponentSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAndroidBackComponent_GetActiveAndroidBackComponentSize) == 0x000004, "Wrong alignment on UIAndroidBackComponent_GetActiveAndroidBackComponentSize");
static_assert(sizeof(UIAndroidBackComponent_GetActiveAndroidBackComponentSize) == 0x000004, "Wrong size on UIAndroidBackComponent_GetActiveAndroidBackComponentSize");
static_assert(offsetof(UIAndroidBackComponent_GetActiveAndroidBackComponentSize, ReturnValue) == 0x000000, "Member 'UIAndroidBackComponent_GetActiveAndroidBackComponentSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIAndroidBackComponent.GetTopActiveAndroidBack
// 0x0008 (0x0008 - 0x0000)
struct UIAndroidBackComponent_GetTopActiveAndroidBack final
{
public:
	class UUIAndroidBackComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAndroidBackComponent_GetTopActiveAndroidBack) == 0x000008, "Wrong alignment on UIAndroidBackComponent_GetTopActiveAndroidBack");
static_assert(sizeof(UIAndroidBackComponent_GetTopActiveAndroidBack) == 0x000008, "Wrong size on UIAndroidBackComponent_GetTopActiveAndroidBack");
static_assert(offsetof(UIAndroidBackComponent_GetTopActiveAndroidBack, ReturnValue) == 0x000000, "Member 'UIAndroidBackComponent_GetTopActiveAndroidBack::ReturnValue' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.SetMaskTexture
// 0x0008 (0x0008 - 0x0000)
struct UIPostProcessRenderable_SetMaskTexture final
{
public:
	class UTexture2D*                             NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_SetMaskTexture) == 0x000008, "Wrong alignment on UIPostProcessRenderable_SetMaskTexture");
static_assert(sizeof(UIPostProcessRenderable_SetMaskTexture) == 0x000008, "Wrong size on UIPostProcessRenderable_SetMaskTexture");
static_assert(offsetof(UIPostProcessRenderable_SetMaskTexture, NewValue) == 0x000000, "Member 'UIPostProcessRenderable_SetMaskTexture::NewValue' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.GetMaskTexture
// 0x0008 (0x0008 - 0x0000)
struct UIPostProcessRenderable_GetMaskTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_GetMaskTexture) == 0x000008, "Wrong alignment on UIPostProcessRenderable_GetMaskTexture");
static_assert(sizeof(UIPostProcessRenderable_GetMaskTexture) == 0x000008, "Wrong size on UIPostProcessRenderable_GetMaskTexture");
static_assert(offsetof(UIPostProcessRenderable_GetMaskTexture, ReturnValue) == 0x000000, "Member 'UIPostProcessRenderable_GetMaskTexture::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.SetApplyAlphaToBlur
// 0x0001 (0x0001 - 0x0000)
struct UIBackgroundBlur_SetApplyAlphaToBlur final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_SetApplyAlphaToBlur) == 0x000001, "Wrong alignment on UIBackgroundBlur_SetApplyAlphaToBlur");
static_assert(sizeof(UIBackgroundBlur_SetApplyAlphaToBlur) == 0x000001, "Wrong size on UIBackgroundBlur_SetApplyAlphaToBlur");
static_assert(offsetof(UIBackgroundBlur_SetApplyAlphaToBlur, NewValue) == 0x000000, "Member 'UIBackgroundBlur_SetApplyAlphaToBlur::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.SetBlurStrength
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundBlur_SetBlurStrength final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_SetBlurStrength) == 0x000004, "Wrong alignment on UIBackgroundBlur_SetBlurStrength");
static_assert(sizeof(UIBackgroundBlur_SetBlurStrength) == 0x000004, "Wrong size on UIBackgroundBlur_SetBlurStrength");
static_assert(offsetof(UIBackgroundBlur_SetBlurStrength, NewValue) == 0x000000, "Member 'UIBackgroundBlur_SetBlurStrength::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.SetMaxDownSampleLevel
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundBlur_SetMaxDownSampleLevel final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_SetMaxDownSampleLevel) == 0x000004, "Wrong alignment on UIBackgroundBlur_SetMaxDownSampleLevel");
static_assert(sizeof(UIBackgroundBlur_SetMaxDownSampleLevel) == 0x000004, "Wrong size on UIBackgroundBlur_SetMaxDownSampleLevel");
static_assert(offsetof(UIBackgroundBlur_SetMaxDownSampleLevel, NewValue) == 0x000000, "Member 'UIBackgroundBlur_SetMaxDownSampleLevel::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.SetStrengthTexture
// 0x0008 (0x0008 - 0x0000)
struct UIBackgroundBlur_SetStrengthTexture final
{
public:
	class UTexture2D*                             NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_SetStrengthTexture) == 0x000008, "Wrong alignment on UIBackgroundBlur_SetStrengthTexture");
static_assert(sizeof(UIBackgroundBlur_SetStrengthTexture) == 0x000008, "Wrong size on UIBackgroundBlur_SetStrengthTexture");
static_assert(offsetof(UIBackgroundBlur_SetStrengthTexture, NewValue) == 0x000000, "Member 'UIBackgroundBlur_SetStrengthTexture::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.GetApplyAlphaToBlur
// 0x0001 (0x0001 - 0x0000)
struct UIBackgroundBlur_GetApplyAlphaToBlur final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_GetApplyAlphaToBlur) == 0x000001, "Wrong alignment on UIBackgroundBlur_GetApplyAlphaToBlur");
static_assert(sizeof(UIBackgroundBlur_GetApplyAlphaToBlur) == 0x000001, "Wrong size on UIBackgroundBlur_GetApplyAlphaToBlur");
static_assert(offsetof(UIBackgroundBlur_GetApplyAlphaToBlur, ReturnValue) == 0x000000, "Member 'UIBackgroundBlur_GetApplyAlphaToBlur::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.GetBlurStrength
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundBlur_GetBlurStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_GetBlurStrength) == 0x000004, "Wrong alignment on UIBackgroundBlur_GetBlurStrength");
static_assert(sizeof(UIBackgroundBlur_GetBlurStrength) == 0x000004, "Wrong size on UIBackgroundBlur_GetBlurStrength");
static_assert(offsetof(UIBackgroundBlur_GetBlurStrength, ReturnValue) == 0x000000, "Member 'UIBackgroundBlur_GetBlurStrength::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.GetMaxDownSampleLevel
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundBlur_GetMaxDownSampleLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_GetMaxDownSampleLevel) == 0x000004, "Wrong alignment on UIBackgroundBlur_GetMaxDownSampleLevel");
static_assert(sizeof(UIBackgroundBlur_GetMaxDownSampleLevel) == 0x000004, "Wrong size on UIBackgroundBlur_GetMaxDownSampleLevel");
static_assert(offsetof(UIBackgroundBlur_GetMaxDownSampleLevel, ReturnValue) == 0x000000, "Member 'UIBackgroundBlur_GetMaxDownSampleLevel::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.GetStrengthTexture
// 0x0008 (0x0008 - 0x0000)
struct UIBackgroundBlur_GetStrengthTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_GetStrengthTexture) == 0x000008, "Wrong alignment on UIBackgroundBlur_GetStrengthTexture");
static_assert(sizeof(UIBackgroundBlur_GetStrengthTexture) == 0x000008, "Wrong size on UIBackgroundBlur_GetStrengthTexture");
static_assert(offsetof(UIBackgroundBlur_GetStrengthTexture, ReturnValue) == 0x000000, "Member 'UIBackgroundBlur_GetStrengthTexture::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelate.SetApplyAlphaToStrength
// 0x0001 (0x0001 - 0x0000)
struct UIBackgroundPixelate_SetApplyAlphaToStrength final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelate_SetApplyAlphaToStrength) == 0x000001, "Wrong alignment on UIBackgroundPixelate_SetApplyAlphaToStrength");
static_assert(sizeof(UIBackgroundPixelate_SetApplyAlphaToStrength) == 0x000001, "Wrong size on UIBackgroundPixelate_SetApplyAlphaToStrength");
static_assert(offsetof(UIBackgroundPixelate_SetApplyAlphaToStrength, NewValue) == 0x000000, "Member 'UIBackgroundPixelate_SetApplyAlphaToStrength::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelate.SetPixelateStrength
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundPixelate_SetPixelateStrength final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelate_SetPixelateStrength) == 0x000004, "Wrong alignment on UIBackgroundPixelate_SetPixelateStrength");
static_assert(sizeof(UIBackgroundPixelate_SetPixelateStrength) == 0x000004, "Wrong size on UIBackgroundPixelate_SetPixelateStrength");
static_assert(offsetof(UIBackgroundPixelate_SetPixelateStrength, NewValue) == 0x000000, "Member 'UIBackgroundPixelate_SetPixelateStrength::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelate.GetApplyAlphaToStrength
// 0x0001 (0x0001 - 0x0000)
struct UIBackgroundPixelate_GetApplyAlphaToStrength final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelate_GetApplyAlphaToStrength) == 0x000001, "Wrong alignment on UIBackgroundPixelate_GetApplyAlphaToStrength");
static_assert(sizeof(UIBackgroundPixelate_GetApplyAlphaToStrength) == 0x000001, "Wrong size on UIBackgroundPixelate_GetApplyAlphaToStrength");
static_assert(offsetof(UIBackgroundPixelate_GetApplyAlphaToStrength, ReturnValue) == 0x000000, "Member 'UIBackgroundPixelate_GetApplyAlphaToStrength::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelate.GetPixelateStrength
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundPixelate_GetPixelateStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelate_GetPixelateStrength) == 0x000004, "Wrong alignment on UIBackgroundPixelate_GetPixelateStrength");
static_assert(sizeof(UIBackgroundPixelate_GetPixelateStrength) == 0x000004, "Wrong size on UIBackgroundPixelate_GetPixelateStrength");
static_assert(offsetof(UIBackgroundPixelate_GetPixelateStrength, ReturnValue) == 0x000000, "Member 'UIBackgroundPixelate_GetPixelateStrength::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.RegisterToggleEvent
// 0x0020 (0x0020 - 0x0000)
struct UIToggleComponent_RegisterToggleEvent final
{
public:
	TDelegate<void(bool InBool)>                  InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FA[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_RegisterToggleEvent) == 0x000008, "Wrong alignment on UIToggleComponent_RegisterToggleEvent");
static_assert(sizeof(UIToggleComponent_RegisterToggleEvent) == 0x000020, "Wrong size on UIToggleComponent_RegisterToggleEvent");
static_assert(offsetof(UIToggleComponent_RegisterToggleEvent, InDelegate) == 0x000000, "Member 'UIToggleComponent_RegisterToggleEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIToggleComponent_RegisterToggleEvent, ReturnValue) == 0x000018, "Member 'UIToggleComponent_RegisterToggleEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.SetState
// 0x0002 (0x0002 - 0x0000)
struct UIToggleComponent_SetState final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireEvent;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_SetState) == 0x000001, "Wrong alignment on UIToggleComponent_SetState");
static_assert(sizeof(UIToggleComponent_SetState) == 0x000002, "Wrong size on UIToggleComponent_SetState");
static_assert(offsetof(UIToggleComponent_SetState, NewState) == 0x000000, "Member 'UIToggleComponent_SetState::NewState' has a wrong offset!");
static_assert(offsetof(UIToggleComponent_SetState, FireEvent) == 0x000001, "Member 'UIToggleComponent_SetState::FireEvent' has a wrong offset!");

// Function LGUI.UIToggleComponent.SetToggleGroup
// 0x0008 (0x0008 - 0x0000)
struct UIToggleComponent_SetToggleGroup final
{
public:
	class UUIToggleGroupComponent*                InGroupComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_SetToggleGroup) == 0x000008, "Wrong alignment on UIToggleComponent_SetToggleGroup");
static_assert(sizeof(UIToggleComponent_SetToggleGroup) == 0x000008, "Wrong size on UIToggleComponent_SetToggleGroup");
static_assert(offsetof(UIToggleComponent_SetToggleGroup, InGroupComp) == 0x000000, "Member 'UIToggleComponent_SetToggleGroup::InGroupComp' has a wrong offset!");

// Function LGUI.UIToggleComponent.SetValue
// 0x0002 (0x0002 - 0x0000)
struct UIToggleComponent_SetValue final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireEvent;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_SetValue) == 0x000001, "Wrong alignment on UIToggleComponent_SetValue");
static_assert(sizeof(UIToggleComponent_SetValue) == 0x000002, "Wrong size on UIToggleComponent_SetValue");
static_assert(offsetof(UIToggleComponent_SetValue, NewValue) == 0x000000, "Member 'UIToggleComponent_SetValue::NewValue' has a wrong offset!");
static_assert(offsetof(UIToggleComponent_SetValue, FireEvent) == 0x000001, "Member 'UIToggleComponent_SetValue::FireEvent' has a wrong offset!");

// Function LGUI.UIToggleComponent.UnregisterToggleEvent
// 0x0008 (0x0008 - 0x0000)
struct UIToggleComponent_UnregisterToggleEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_UnregisterToggleEvent) == 0x000008, "Wrong alignment on UIToggleComponent_UnregisterToggleEvent");
static_assert(sizeof(UIToggleComponent_UnregisterToggleEvent) == 0x000008, "Wrong size on UIToggleComponent_UnregisterToggleEvent");
static_assert(offsetof(UIToggleComponent_UnregisterToggleEvent, InDelegateHandle) == 0x000000, "Member 'UIToggleComponent_UnregisterToggleEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIToggleComponent.GetIndexInGroup
// 0x0004 (0x0004 - 0x0000)
struct UIToggleComponent_GetIndexInGroup final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_GetIndexInGroup) == 0x000004, "Wrong alignment on UIToggleComponent_GetIndexInGroup");
static_assert(sizeof(UIToggleComponent_GetIndexInGroup) == 0x000004, "Wrong size on UIToggleComponent_GetIndexInGroup");
static_assert(offsetof(UIToggleComponent_GetIndexInGroup, ReturnValue) == 0x000000, "Member 'UIToggleComponent_GetIndexInGroup::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.GetState
// 0x0001 (0x0001 - 0x0000)
struct UIToggleComponent_GetState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_GetState) == 0x000001, "Wrong alignment on UIToggleComponent_GetState");
static_assert(sizeof(UIToggleComponent_GetState) == 0x000001, "Wrong size on UIToggleComponent_GetState");
static_assert(offsetof(UIToggleComponent_GetState, ReturnValue) == 0x000000, "Member 'UIToggleComponent_GetState::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.GetToggleGroupActor
// 0x0008 (0x0008 - 0x0000)
struct UIToggleComponent_GetToggleGroupActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_GetToggleGroupActor) == 0x000008, "Wrong alignment on UIToggleComponent_GetToggleGroupActor");
static_assert(sizeof(UIToggleComponent_GetToggleGroupActor) == 0x000008, "Wrong size on UIToggleComponent_GetToggleGroupActor");
static_assert(offsetof(UIToggleComponent_GetToggleGroupActor, ReturnValue) == 0x000000, "Member 'UIToggleComponent_GetToggleGroupActor::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.GetValue
// 0x0001 (0x0001 - 0x0000)
struct UIToggleComponent_GetValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_GetValue) == 0x000001, "Wrong alignment on UIToggleComponent_GetValue");
static_assert(sizeof(UIToggleComponent_GetValue) == 0x000001, "Wrong size on UIToggleComponent_GetValue");
static_assert(offsetof(UIToggleComponent_GetValue, ReturnValue) == 0x000000, "Member 'UIToggleComponent_GetValue::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICreateGeometryHelper.AddTriangle
// 0x000C (0x000C - 0x0000)
struct LGUICreateGeometryHelper_AddTriangle final
{
public:
	int32                                         Index0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICreateGeometryHelper_AddTriangle) == 0x000004, "Wrong alignment on LGUICreateGeometryHelper_AddTriangle");
static_assert(sizeof(LGUICreateGeometryHelper_AddTriangle) == 0x00000C, "Wrong size on LGUICreateGeometryHelper_AddTriangle");
static_assert(offsetof(LGUICreateGeometryHelper_AddTriangle, Index0) == 0x000000, "Member 'LGUICreateGeometryHelper_AddTriangle::Index0' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddTriangle, Index1) == 0x000004, "Member 'LGUICreateGeometryHelper_AddTriangle::Index1' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddTriangle, Index2) == 0x000008, "Member 'LGUICreateGeometryHelper_AddTriangle::Index2' has a wrong offset!");

// Function LGUI.LGUICreateGeometryHelper.AddVertexFull
// 0x0048 (0x0048 - 0x0000)
struct LGUICreateGeometryHelper_AddVertexFull final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Uv0;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Uv1;                                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Uv2;                                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Uv3;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Tangent;                                           // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICreateGeometryHelper_AddVertexFull) == 0x000004, "Wrong alignment on LGUICreateGeometryHelper_AddVertexFull");
static_assert(sizeof(LGUICreateGeometryHelper_AddVertexFull) == 0x000048, "Wrong size on LGUICreateGeometryHelper_AddVertexFull");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexFull, Position) == 0x000000, "Member 'LGUICreateGeometryHelper_AddVertexFull::Position' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexFull, Color) == 0x00000C, "Member 'LGUICreateGeometryHelper_AddVertexFull::Color' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexFull, Uv0) == 0x000010, "Member 'LGUICreateGeometryHelper_AddVertexFull::Uv0' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexFull, Uv1) == 0x000018, "Member 'LGUICreateGeometryHelper_AddVertexFull::Uv1' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexFull, Uv2) == 0x000020, "Member 'LGUICreateGeometryHelper_AddVertexFull::Uv2' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexFull, Uv3) == 0x000028, "Member 'LGUICreateGeometryHelper_AddVertexFull::Uv3' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexFull, Normal) == 0x000030, "Member 'LGUICreateGeometryHelper_AddVertexFull::Normal' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexFull, Tangent) == 0x00003C, "Member 'LGUICreateGeometryHelper_AddVertexFull::Tangent' has a wrong offset!");

// Function LGUI.LGUICreateGeometryHelper.AddVertexSimple
// 0x0018 (0x0018 - 0x0000)
struct LGUICreateGeometryHelper_AddVertexSimple final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Uv0;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICreateGeometryHelper_AddVertexSimple) == 0x000004, "Wrong alignment on LGUICreateGeometryHelper_AddVertexSimple");
static_assert(sizeof(LGUICreateGeometryHelper_AddVertexSimple) == 0x000018, "Wrong size on LGUICreateGeometryHelper_AddVertexSimple");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexSimple, Position) == 0x000000, "Member 'LGUICreateGeometryHelper_AddVertexSimple::Position' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexSimple, Color) == 0x00000C, "Member 'LGUICreateGeometryHelper_AddVertexSimple::Color' has a wrong offset!");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexSimple, Uv0) == 0x000010, "Member 'LGUICreateGeometryHelper_AddVertexSimple::Uv0' has a wrong offset!");

// Function LGUI.LGUICreateGeometryHelper.AddVertexStruct
// 0x0048 (0x0048 - 0x0000)
struct LGUICreateGeometryHelper_AddVertexStruct final
{
public:
	struct FLGUIGeometryVertex                    Vertex;                                            // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICreateGeometryHelper_AddVertexStruct) == 0x000004, "Wrong alignment on LGUICreateGeometryHelper_AddVertexStruct");
static_assert(sizeof(LGUICreateGeometryHelper_AddVertexStruct) == 0x000048, "Wrong size on LGUICreateGeometryHelper_AddVertexStruct");
static_assert(offsetof(LGUICreateGeometryHelper_AddVertexStruct, Vertex) == 0x000000, "Member 'LGUICreateGeometryHelper_AddVertexStruct::Vertex' has a wrong offset!");

// Function LGUI.UIViewTweenParams.GetTweenAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIViewTweenParams_GetTweenAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIViewTweenParams_GetTweenAlpha) == 0x000004, "Wrong alignment on UIViewTweenParams_GetTweenAlpha");
static_assert(sizeof(UIViewTweenParams_GetTweenAlpha) == 0x000004, "Wrong size on UIViewTweenParams_GetTweenAlpha");
static_assert(offsetof(UIViewTweenParams_GetTweenAlpha, ReturnValue) == 0x000000, "Member 'UIViewTweenParams_GetTweenAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.UIViewTweenParams.GetTweenSize
// 0x0004 (0x0004 - 0x0000)
struct UIViewTweenParams_GetTweenSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIViewTweenParams_GetTweenSize) == 0x000004, "Wrong alignment on UIViewTweenParams_GetTweenSize");
static_assert(sizeof(UIViewTweenParams_GetTweenSize) == 0x000004, "Wrong size on UIViewTweenParams_GetTweenSize");
static_assert(offsetof(UIViewTweenParams_GetTweenSize, ReturnValue) == 0x000000, "Member 'UIViewTweenParams_GetTweenSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIViewTweenParams.GetTweenTime
// 0x0004 (0x0004 - 0x0000)
struct UIViewTweenParams_GetTweenTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIViewTweenParams_GetTweenTime) == 0x000004, "Wrong alignment on UIViewTweenParams_GetTweenTime");
static_assert(sizeof(UIViewTweenParams_GetTweenTime) == 0x000004, "Wrong size on UIViewTweenParams_GetTweenTime");
static_assert(offsetof(UIViewTweenParams_GetTweenTime, ReturnValue) == 0x000000, "Member 'UIViewTweenParams_GetTweenTime::ReturnValue' has a wrong offset!");

// Function LGUI.UIViewTweenParams.GetViewNameBlackList
// 0x0010 (0x0010 - 0x0000)
struct UIViewTweenParams_GetViewNameBlackList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIViewTweenParams_GetViewNameBlackList) == 0x000008, "Wrong alignment on UIViewTweenParams_GetViewNameBlackList");
static_assert(sizeof(UIViewTweenParams_GetViewNameBlackList) == 0x000010, "Wrong size on UIViewTweenParams_GetViewNameBlackList");
static_assert(offsetof(UIViewTweenParams_GetViewNameBlackList, ReturnValue) == 0x000000, "Member 'UIViewTweenParams_GetViewNameBlackList::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable_BP.OnCreateGeometry_BP
// 0x0008 (0x0008 - 0x0000)
struct UIBatchGeometryRenderable_BP_OnCreateGeometry_BP final
{
public:
	class ULGUICreateGeometryHelper*              InCreateGeometryHelper;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchGeometryRenderable_BP_OnCreateGeometry_BP) == 0x000008, "Wrong alignment on UIBatchGeometryRenderable_BP_OnCreateGeometry_BP");
static_assert(sizeof(UIBatchGeometryRenderable_BP_OnCreateGeometry_BP) == 0x000008, "Wrong size on UIBatchGeometryRenderable_BP_OnCreateGeometry_BP");
static_assert(offsetof(UIBatchGeometryRenderable_BP_OnCreateGeometry_BP, InCreateGeometryHelper) == 0x000000, "Member 'UIBatchGeometryRenderable_BP_OnCreateGeometry_BP::InCreateGeometryHelper' has a wrong offset!");

// Function LGUI.UIBatchGeometryRenderable_BP.OnUpdateGeometry_BP
// 0x0010 (0x0010 - 0x0000)
struct UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP final
{
public:
	class ULGUIUpdateGeometryHelper*              InUpdateGoemetryHelper;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexPositionChanged;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexUVChanged;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexColorChanged;                              // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FE[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP) == 0x000008, "Wrong alignment on UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP");
static_assert(sizeof(UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP) == 0x000010, "Wrong size on UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP");
static_assert(offsetof(UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP, InUpdateGoemetryHelper) == 0x000000, "Member 'UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP::InUpdateGoemetryHelper' has a wrong offset!");
static_assert(offsetof(UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP, InVertexPositionChanged) == 0x000008, "Member 'UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP::InVertexPositionChanged' has a wrong offset!");
static_assert(offsetof(UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP, InVertexUVChanged) == 0x000009, "Member 'UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP::InVertexUVChanged' has a wrong offset!");
static_assert(offsetof(UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP, InVertexColorChanged) == 0x00000A, "Member 'UIBatchGeometryRenderable_BP_OnUpdateGeometry_BP::InVertexColorChanged' has a wrong offset!");

// Function LGUI.UITextureTransitionComponent.SetAllStateTexture
// 0x0008 (0x0008 - 0x0000)
struct UITextureTransitionComponent_SetAllStateTexture final
{
public:
	class UTexture*                               NewTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureTransitionComponent_SetAllStateTexture) == 0x000008, "Wrong alignment on UITextureTransitionComponent_SetAllStateTexture");
static_assert(sizeof(UITextureTransitionComponent_SetAllStateTexture) == 0x000008, "Wrong size on UITextureTransitionComponent_SetAllStateTexture");
static_assert(offsetof(UITextureTransitionComponent_SetAllStateTexture, NewTexture) == 0x000000, "Member 'UITextureTransitionComponent_SetAllStateTexture::NewTexture' has a wrong offset!");

// Function LGUI.UITextureTransitionComponent.SetStateTexture
// 0x0010 (0x0010 - 0x0000)
struct UITextureTransitionComponent_SetStateTexture final
{
public:
	EUISelectableSelectionState                   State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               NewTexture;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureTransitionComponent_SetStateTexture) == 0x000008, "Wrong alignment on UITextureTransitionComponent_SetStateTexture");
static_assert(sizeof(UITextureTransitionComponent_SetStateTexture) == 0x000010, "Wrong size on UITextureTransitionComponent_SetStateTexture");
static_assert(offsetof(UITextureTransitionComponent_SetStateTexture, State) == 0x000000, "Member 'UITextureTransitionComponent_SetStateTexture::State' has a wrong offset!");
static_assert(offsetof(UITextureTransitionComponent_SetStateTexture, NewTexture) == 0x000008, "Member 'UITextureTransitionComponent_SetStateTexture::NewTexture' has a wrong offset!");

// Function LGUI.WwiseAudioComponent.GetAudioStateSystemLevel
// 0x0004 (0x0004 - 0x0000)
struct WwiseAudioComponent_GetAudioStateSystemLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WwiseAudioComponent_GetAudioStateSystemLevel) == 0x000004, "Wrong alignment on WwiseAudioComponent_GetAudioStateSystemLevel");
static_assert(sizeof(WwiseAudioComponent_GetAudioStateSystemLevel) == 0x000004, "Wrong size on WwiseAudioComponent_GetAudioStateSystemLevel");
static_assert(offsetof(WwiseAudioComponent_GetAudioStateSystemLevel, ReturnValue) == 0x000000, "Member 'WwiseAudioComponent_GetAudioStateSystemLevel::ReturnValue' has a wrong offset!");

// Function LGUI.UIComboBox.CreateComboBoxFromArray
// 0x0040 (0x0040 - 0x0000)
struct UIComboBox_CreateComboBoxFromArray final
{
public:
	TArray<class FString>                         InItemNameArray;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(int32 InSelectIndex, const class FString& InSelectItem)> InCallback;                                        // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1203[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AUIBaseActor*                           InParentActor;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectedItemIndex;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComboBoxPosition                             InPosition;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1204[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIComboBox*                            ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIComboBox_CreateComboBoxFromArray) == 0x000008, "Wrong alignment on UIComboBox_CreateComboBoxFromArray");
static_assert(sizeof(UIComboBox_CreateComboBoxFromArray) == 0x000040, "Wrong size on UIComboBox_CreateComboBoxFromArray");
static_assert(offsetof(UIComboBox_CreateComboBoxFromArray, InItemNameArray) == 0x000000, "Member 'UIComboBox_CreateComboBoxFromArray::InItemNameArray' has a wrong offset!");
static_assert(offsetof(UIComboBox_CreateComboBoxFromArray, InCallback) == 0x000010, "Member 'UIComboBox_CreateComboBoxFromArray::InCallback' has a wrong offset!");
static_assert(offsetof(UIComboBox_CreateComboBoxFromArray, InParentActor) == 0x000028, "Member 'UIComboBox_CreateComboBoxFromArray::InParentActor' has a wrong offset!");
static_assert(offsetof(UIComboBox_CreateComboBoxFromArray, InSelectedItemIndex) == 0x000030, "Member 'UIComboBox_CreateComboBoxFromArray::InSelectedItemIndex' has a wrong offset!");
static_assert(offsetof(UIComboBox_CreateComboBoxFromArray, InPosition) == 0x000034, "Member 'UIComboBox_CreateComboBoxFromArray::InPosition' has a wrong offset!");
static_assert(offsetof(UIComboBox_CreateComboBoxFromArray, ReturnValue) == 0x000038, "Member 'UIComboBox_CreateComboBoxFromArray::ReturnValue' has a wrong offset!");

// Function LGUI.UICustomDepthStencilMask.SetFullScreen
// 0x0001 (0x0001 - 0x0000)
struct UICustomDepthStencilMask_SetFullScreen final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomDepthStencilMask_SetFullScreen) == 0x000001, "Wrong alignment on UICustomDepthStencilMask_SetFullScreen");
static_assert(sizeof(UICustomDepthStencilMask_SetFullScreen) == 0x000001, "Wrong size on UICustomDepthStencilMask_SetFullScreen");
static_assert(offsetof(UICustomDepthStencilMask_SetFullScreen, Value) == 0x000000, "Member 'UICustomDepthStencilMask_SetFullScreen::Value' has a wrong offset!");

// Function LGUI.UICustomDepthStencilMask.SetSourceType
// 0x0001 (0x0001 - 0x0000)
struct UICustomDepthStencilMask_SetSourceType final
{
public:
	EUICustomDepthStencilMaskSourceType           Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomDepthStencilMask_SetSourceType) == 0x000001, "Wrong alignment on UICustomDepthStencilMask_SetSourceType");
static_assert(sizeof(UICustomDepthStencilMask_SetSourceType) == 0x000001, "Wrong size on UICustomDepthStencilMask_SetSourceType");
static_assert(offsetof(UICustomDepthStencilMask_SetSourceType, Value) == 0x000000, "Member 'UICustomDepthStencilMask_SetSourceType::Value' has a wrong offset!");

// Function LGUI.UICustomDepthStencilMask.SetStencilValue
// 0x0004 (0x0004 - 0x0000)
struct UICustomDepthStencilMask_SetStencilValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomDepthStencilMask_SetStencilValue) == 0x000004, "Wrong alignment on UICustomDepthStencilMask_SetStencilValue");
static_assert(sizeof(UICustomDepthStencilMask_SetStencilValue) == 0x000004, "Wrong size on UICustomDepthStencilMask_SetStencilValue");
static_assert(offsetof(UICustomDepthStencilMask_SetStencilValue, Value) == 0x000000, "Member 'UICustomDepthStencilMask_SetStencilValue::Value' has a wrong offset!");

// Function LGUI.UICustomDepthStencilMask.GetFullScreen
// 0x0001 (0x0001 - 0x0000)
struct UICustomDepthStencilMask_GetFullScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomDepthStencilMask_GetFullScreen) == 0x000001, "Wrong alignment on UICustomDepthStencilMask_GetFullScreen");
static_assert(sizeof(UICustomDepthStencilMask_GetFullScreen) == 0x000001, "Wrong size on UICustomDepthStencilMask_GetFullScreen");
static_assert(offsetof(UICustomDepthStencilMask_GetFullScreen, ReturnValue) == 0x000000, "Member 'UICustomDepthStencilMask_GetFullScreen::ReturnValue' has a wrong offset!");

// Function LGUI.UICustomDepthStencilMask.GetSourceType
// 0x0001 (0x0001 - 0x0000)
struct UICustomDepthStencilMask_GetSourceType final
{
public:
	EUICustomDepthStencilMaskSourceType           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomDepthStencilMask_GetSourceType) == 0x000001, "Wrong alignment on UICustomDepthStencilMask_GetSourceType");
static_assert(sizeof(UICustomDepthStencilMask_GetSourceType) == 0x000001, "Wrong size on UICustomDepthStencilMask_GetSourceType");
static_assert(offsetof(UICustomDepthStencilMask_GetSourceType, ReturnValue) == 0x000000, "Member 'UICustomDepthStencilMask_GetSourceType::ReturnValue' has a wrong offset!");

// Function LGUI.UICustomDepthStencilMask.GetStencilValue
// 0x0004 (0x0004 - 0x0000)
struct UICustomDepthStencilMask_GetStencilValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomDepthStencilMask_GetStencilValue) == 0x000004, "Wrong alignment on UICustomDepthStencilMask_GetStencilValue");
static_assert(sizeof(UICustomDepthStencilMask_GetStencilValue) == 0x000004, "Wrong size on UICustomDepthStencilMask_GetStencilValue");
static_assert(offsetof(UICustomDepthStencilMask_GetStencilValue, ReturnValue) == 0x000000, "Member 'UICustomDepthStencilMask_GetStencilValue::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.SetCurFrame
// 0x0004 (0x0004 - 0x0000)
struct UITexture_SetCurFrame final
{
public:
	float                                         NewCurFrame;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetCurFrame) == 0x000004, "Wrong alignment on UITexture_SetCurFrame");
static_assert(sizeof(UITexture_SetCurFrame) == 0x000004, "Wrong size on UITexture_SetCurFrame");
static_assert(offsetof(UITexture_SetCurFrame, NewCurFrame) == 0x000000, "Member 'UITexture_SetCurFrame::NewCurFrame' has a wrong offset!");

// Function LGUI.UITexture.SetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct UITexture_SetFillAmount final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetFillAmount) == 0x000004, "Wrong alignment on UITexture_SetFillAmount");
static_assert(sizeof(UITexture_SetFillAmount) == 0x000004, "Wrong size on UITexture_SetFillAmount");
static_assert(offsetof(UITexture_SetFillAmount, NewValue) == 0x000000, "Member 'UITexture_SetFillAmount::NewValue' has a wrong offset!");

// Function LGUI.UITexture.SetFillDirectionFlip
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetFillDirectionFlip final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetFillDirectionFlip) == 0x000001, "Wrong alignment on UITexture_SetFillDirectionFlip");
static_assert(sizeof(UITexture_SetFillDirectionFlip) == 0x000001, "Wrong size on UITexture_SetFillDirectionFlip");
static_assert(offsetof(UITexture_SetFillDirectionFlip, NewValue) == 0x000000, "Member 'UITexture_SetFillDirectionFlip::NewValue' has a wrong offset!");

// Function LGUI.UITexture.SetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetFillMethod final
{
public:
	EUISpriteFillMethod                           NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetFillMethod) == 0x000001, "Wrong alignment on UITexture_SetFillMethod");
static_assert(sizeof(UITexture_SetFillMethod) == 0x000001, "Wrong size on UITexture_SetFillMethod");
static_assert(offsetof(UITexture_SetFillMethod, NewValue) == 0x000000, "Member 'UITexture_SetFillMethod::NewValue' has a wrong offset!");

// Function LGUI.UITexture.SetFillOrigin
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetFillOrigin final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetFillOrigin) == 0x000001, "Wrong alignment on UITexture_SetFillOrigin");
static_assert(sizeof(UITexture_SetFillOrigin) == 0x000001, "Wrong size on UITexture_SetFillOrigin");
static_assert(offsetof(UITexture_SetFillOrigin, NewValue) == 0x000000, "Member 'UITexture_SetFillOrigin::NewValue' has a wrong offset!");

// Function LGUI.UITexture.SetSpriteData
// 0x0034 (0x0034 - 0x0000)
struct UITexture_SetSpriteData final
{
public:
	struct FLGUISpriteInfo                        NewSpriteData;                                     // 0x0000(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetSpriteData) == 0x000004, "Wrong alignment on UITexture_SetSpriteData");
static_assert(sizeof(UITexture_SetSpriteData) == 0x000034, "Wrong size on UITexture_SetSpriteData");
static_assert(offsetof(UITexture_SetSpriteData, NewSpriteData) == 0x000000, "Member 'UITexture_SetSpriteData::NewSpriteData' has a wrong offset!");

// Function LGUI.UITexture.SetTextureType
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetTextureType final
{
public:
	EUITextureType                                NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetTextureType) == 0x000001, "Wrong alignment on UITexture_SetTextureType");
static_assert(sizeof(UITexture_SetTextureType) == 0x000001, "Wrong size on UITexture_SetTextureType");
static_assert(offsetof(UITexture_SetTextureType, NewType) == 0x000000, "Member 'UITexture_SetTextureType::NewType' has a wrong offset!");

// Function LGUI.UITexture.SetUVRect
// 0x0010 (0x0010 - 0x0000)
struct UITexture_SetUVRect final
{
public:
	struct FVector4                               NewUVRect;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetUVRect) == 0x000010, "Wrong alignment on UITexture_SetUVRect");
static_assert(sizeof(UITexture_SetUVRect) == 0x000010, "Wrong size on UITexture_SetUVRect");
static_assert(offsetof(UITexture_SetUVRect, NewUVRect) == 0x000000, "Member 'UITexture_SetUVRect::NewUVRect' has a wrong offset!");

// Function LGUI.UITexture.GetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct UITexture_GetFillAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetFillAmount) == 0x000004, "Wrong alignment on UITexture_GetFillAmount");
static_assert(sizeof(UITexture_GetFillAmount) == 0x000004, "Wrong size on UITexture_GetFillAmount");
static_assert(offsetof(UITexture_GetFillAmount, ReturnValue) == 0x000000, "Member 'UITexture_GetFillAmount::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetFillDirectionFlip
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetFillDirectionFlip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetFillDirectionFlip) == 0x000001, "Wrong alignment on UITexture_GetFillDirectionFlip");
static_assert(sizeof(UITexture_GetFillDirectionFlip) == 0x000001, "Wrong size on UITexture_GetFillDirectionFlip");
static_assert(offsetof(UITexture_GetFillDirectionFlip, ReturnValue) == 0x000000, "Member 'UITexture_GetFillDirectionFlip::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetFillMethod final
{
public:
	EUISpriteFillMethod                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetFillMethod) == 0x000001, "Wrong alignment on UITexture_GetFillMethod");
static_assert(sizeof(UITexture_GetFillMethod) == 0x000001, "Wrong size on UITexture_GetFillMethod");
static_assert(offsetof(UITexture_GetFillMethod, ReturnValue) == 0x000000, "Member 'UITexture_GetFillMethod::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetFillOrigin
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetFillOrigin final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetFillOrigin) == 0x000001, "Wrong alignment on UITexture_GetFillOrigin");
static_assert(sizeof(UITexture_GetFillOrigin) == 0x000001, "Wrong size on UITexture_GetFillOrigin");
static_assert(offsetof(UITexture_GetFillOrigin, ReturnValue) == 0x000000, "Member 'UITexture_GetFillOrigin::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetSpriteData
// 0x0034 (0x0034 - 0x0000)
struct UITexture_GetSpriteData final
{
public:
	struct FLGUISpriteInfo                        ReturnValue;                                       // 0x0000(0x0034)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetSpriteData) == 0x000004, "Wrong alignment on UITexture_GetSpriteData");
static_assert(sizeof(UITexture_GetSpriteData) == 0x000034, "Wrong size on UITexture_GetSpriteData");
static_assert(offsetof(UITexture_GetSpriteData, ReturnValue) == 0x000000, "Member 'UITexture_GetSpriteData::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetTextureType
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetTextureType final
{
public:
	EUITextureType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetTextureType) == 0x000001, "Wrong alignment on UITexture_GetTextureType");
static_assert(sizeof(UITexture_GetTextureType) == 0x000001, "Wrong size on UITexture_GetTextureType");
static_assert(offsetof(UITexture_GetTextureType, ReturnValue) == 0x000000, "Member 'UITexture_GetTextureType::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetUVRect
// 0x0010 (0x0010 - 0x0000)
struct UITexture_GetUVRect final
{
public:
	struct FVector4                               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetUVRect) == 0x000010, "Wrong alignment on UITexture_GetUVRect");
static_assert(sizeof(UITexture_GetUVRect) == 0x000010, "Wrong size on UITexture_GetUVRect");
static_assert(offsetof(UITexture_GetUVRect, ReturnValue) == 0x000000, "Member 'UITexture_GetUVRect::ReturnValue' has a wrong offset!");

// Function LGUI.ViewportUITexture.GetSceneCapture
// 0x0008 (0x0008 - 0x0000)
struct ViewportUITexture_GetSceneCapture final
{
public:
	class USceneCaptureComponent2D*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ViewportUITexture_GetSceneCapture) == 0x000008, "Wrong alignment on ViewportUITexture_GetSceneCapture");
static_assert(sizeof(ViewportUITexture_GetSceneCapture) == 0x000008, "Wrong size on ViewportUITexture_GetSceneCapture");
static_assert(offsetof(ViewportUITexture_GetSceneCapture, ReturnValue) == 0x000000, "Member 'ViewportUITexture_GetSceneCapture::ReturnValue' has a wrong offset!");

// Function LGUI.ViewportUITexture.ViewPointToWorld
// 0x0020 (0x0020 - 0x0000)
struct ViewportUITexture_ViewPointToWorld final
{
public:
	struct FVector2D                              InViewPoint;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldLocation;                                  // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ViewportUITexture_ViewPointToWorld) == 0x000004, "Wrong alignment on ViewportUITexture_ViewPointToWorld");
static_assert(sizeof(ViewportUITexture_ViewPointToWorld) == 0x000020, "Wrong size on ViewportUITexture_ViewPointToWorld");
static_assert(offsetof(ViewportUITexture_ViewPointToWorld, InViewPoint) == 0x000000, "Member 'ViewportUITexture_ViewPointToWorld::InViewPoint' has a wrong offset!");
static_assert(offsetof(ViewportUITexture_ViewPointToWorld, OutWorldLocation) == 0x000008, "Member 'ViewportUITexture_ViewPointToWorld::OutWorldLocation' has a wrong offset!");
static_assert(offsetof(ViewportUITexture_ViewPointToWorld, OutWorldDirection) == 0x000014, "Member 'ViewportUITexture_ViewPointToWorld::OutWorldDirection' has a wrong offset!");

// Function LGUI.ViewportUITexture.WorldToViewPoint
// 0x0018 (0x0018 - 0x0000)
struct ViewportUITexture_WorldToViewPoint final
{
public:
	struct FVector                                InWorldLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutViewPoint;                                      // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120E[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ViewportUITexture_WorldToViewPoint) == 0x000004, "Wrong alignment on ViewportUITexture_WorldToViewPoint");
static_assert(sizeof(ViewportUITexture_WorldToViewPoint) == 0x000018, "Wrong size on ViewportUITexture_WorldToViewPoint");
static_assert(offsetof(ViewportUITexture_WorldToViewPoint, InWorldLocation) == 0x000000, "Member 'ViewportUITexture_WorldToViewPoint::InWorldLocation' has a wrong offset!");
static_assert(offsetof(ViewportUITexture_WorldToViewPoint, OutViewPoint) == 0x00000C, "Member 'ViewportUITexture_WorldToViewPoint::OutViewPoint' has a wrong offset!");
static_assert(offsetof(ViewportUITexture_WorldToViewPoint, ReturnValue) == 0x000014, "Member 'ViewportUITexture_WorldToViewPoint::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.AddOptions
// 0x0010 (0x0010 - 0x0000)
struct UIDropdownComponent_AddOptions final
{
public:
	TArray<struct FUIDropdownOptionData>          InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_AddOptions) == 0x000008, "Wrong alignment on UIDropdownComponent_AddOptions");
static_assert(sizeof(UIDropdownComponent_AddOptions) == 0x000010, "Wrong size on UIDropdownComponent_AddOptions");
static_assert(offsetof(UIDropdownComponent_AddOptions, InOptions) == 0x000000, "Member 'UIDropdownComponent_AddOptions::InOptions' has a wrong offset!");

// Function LGUI.UIDropdownComponent.RegisterSelectionChangeEvent
// 0x0020 (0x0020 - 0x0000)
struct UIDropdownComponent_RegisterSelectionChangeEvent final
{
public:
	TDelegate<void(int32 InSelectIndex)>          InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1214[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_RegisterSelectionChangeEvent) == 0x000008, "Wrong alignment on UIDropdownComponent_RegisterSelectionChangeEvent");
static_assert(sizeof(UIDropdownComponent_RegisterSelectionChangeEvent) == 0x000020, "Wrong size on UIDropdownComponent_RegisterSelectionChangeEvent");
static_assert(offsetof(UIDropdownComponent_RegisterSelectionChangeEvent, InDelegate) == 0x000000, "Member 'UIDropdownComponent_RegisterSelectionChangeEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIDropdownComponent_RegisterSelectionChangeEvent, ReturnValue) == 0x000018, "Member 'UIDropdownComponent_RegisterSelectionChangeEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetHorizontalPosition
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_SetHorizontalPosition final
{
public:
	EUIDropdownHorizontalPosition                 InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetHorizontalPosition) == 0x000001, "Wrong alignment on UIDropdownComponent_SetHorizontalPosition");
static_assert(sizeof(UIDropdownComponent_SetHorizontalPosition) == 0x000001, "Wrong size on UIDropdownComponent_SetHorizontalPosition");
static_assert(offsetof(UIDropdownComponent_SetHorizontalPosition, InValue) == 0x000000, "Member 'UIDropdownComponent_SetHorizontalPosition::InValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetMaxHeight
// 0x0004 (0x0004 - 0x0000)
struct UIDropdownComponent_SetMaxHeight final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetMaxHeight) == 0x000004, "Wrong alignment on UIDropdownComponent_SetMaxHeight");
static_assert(sizeof(UIDropdownComponent_SetMaxHeight) == 0x000004, "Wrong size on UIDropdownComponent_SetMaxHeight");
static_assert(offsetof(UIDropdownComponent_SetMaxHeight, NewValue) == 0x000000, "Member 'UIDropdownComponent_SetMaxHeight::NewValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetOptions
// 0x0010 (0x0010 - 0x0000)
struct UIDropdownComponent_SetOptions final
{
public:
	TArray<struct FUIDropdownOptionData>          InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetOptions) == 0x000008, "Wrong alignment on UIDropdownComponent_SetOptions");
static_assert(sizeof(UIDropdownComponent_SetOptions) == 0x000010, "Wrong size on UIDropdownComponent_SetOptions");
static_assert(offsetof(UIDropdownComponent_SetOptions, InOptions) == 0x000000, "Member 'UIDropdownComponent_SetOptions::InOptions' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetValue
// 0x0008 (0x0008 - 0x0000)
struct UIDropdownComponent_SetValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireEvent;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1215[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDropdownComponent_SetValue) == 0x000004, "Wrong alignment on UIDropdownComponent_SetValue");
static_assert(sizeof(UIDropdownComponent_SetValue) == 0x000008, "Wrong size on UIDropdownComponent_SetValue");
static_assert(offsetof(UIDropdownComponent_SetValue, NewValue) == 0x000000, "Member 'UIDropdownComponent_SetValue::NewValue' has a wrong offset!");
static_assert(offsetof(UIDropdownComponent_SetValue, FireEvent) == 0x000004, "Member 'UIDropdownComponent_SetValue::FireEvent' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetVerticalOverlap
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_SetVerticalOverlap final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetVerticalOverlap) == 0x000001, "Wrong alignment on UIDropdownComponent_SetVerticalOverlap");
static_assert(sizeof(UIDropdownComponent_SetVerticalOverlap) == 0x000001, "Wrong size on UIDropdownComponent_SetVerticalOverlap");
static_assert(offsetof(UIDropdownComponent_SetVerticalOverlap, NewValue) == 0x000000, "Member 'UIDropdownComponent_SetVerticalOverlap::NewValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetVerticalPosition
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_SetVerticalPosition final
{
public:
	EUIDropdownVerticalPosition                   InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetVerticalPosition) == 0x000001, "Wrong alignment on UIDropdownComponent_SetVerticalPosition");
static_assert(sizeof(UIDropdownComponent_SetVerticalPosition) == 0x000001, "Wrong size on UIDropdownComponent_SetVerticalPosition");
static_assert(offsetof(UIDropdownComponent_SetVerticalPosition, InValue) == 0x000000, "Member 'UIDropdownComponent_SetVerticalPosition::InValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.UnregisterSelectionChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct UIDropdownComponent_UnregisterSelectionChangeEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_UnregisterSelectionChangeEvent) == 0x000008, "Wrong alignment on UIDropdownComponent_UnregisterSelectionChangeEvent");
static_assert(sizeof(UIDropdownComponent_UnregisterSelectionChangeEvent) == 0x000008, "Wrong size on UIDropdownComponent_UnregisterSelectionChangeEvent");
static_assert(offsetof(UIDropdownComponent_UnregisterSelectionChangeEvent, InDelegateHandle) == 0x000000, "Member 'UIDropdownComponent_UnregisterSelectionChangeEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetCurrentOption
// 0x0030 (0x0030 - 0x0000)
struct UIDropdownComponent_GetCurrentOption final
{
public:
	struct FUIDropdownOptionData                  ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetCurrentOption) == 0x000008, "Wrong alignment on UIDropdownComponent_GetCurrentOption");
static_assert(sizeof(UIDropdownComponent_GetCurrentOption) == 0x000030, "Wrong size on UIDropdownComponent_GetCurrentOption");
static_assert(offsetof(UIDropdownComponent_GetCurrentOption, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetCurrentOption::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetHorizontalPosition
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_GetHorizontalPosition final
{
public:
	EUIDropdownHorizontalPosition                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetHorizontalPosition) == 0x000001, "Wrong alignment on UIDropdownComponent_GetHorizontalPosition");
static_assert(sizeof(UIDropdownComponent_GetHorizontalPosition) == 0x000001, "Wrong size on UIDropdownComponent_GetHorizontalPosition");
static_assert(offsetof(UIDropdownComponent_GetHorizontalPosition, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetHorizontalPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetMaxHeight
// 0x0004 (0x0004 - 0x0000)
struct UIDropdownComponent_GetMaxHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetMaxHeight) == 0x000004, "Wrong alignment on UIDropdownComponent_GetMaxHeight");
static_assert(sizeof(UIDropdownComponent_GetMaxHeight) == 0x000004, "Wrong size on UIDropdownComponent_GetMaxHeight");
static_assert(offsetof(UIDropdownComponent_GetMaxHeight, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetMaxHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetOption
// 0x0038 (0x0038 - 0x0000)
struct UIDropdownComponent_GetOption final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1216[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIDropdownOptionData                  ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetOption) == 0x000008, "Wrong alignment on UIDropdownComponent_GetOption");
static_assert(sizeof(UIDropdownComponent_GetOption) == 0x000038, "Wrong size on UIDropdownComponent_GetOption");
static_assert(offsetof(UIDropdownComponent_GetOption, Param_Index) == 0x000000, "Member 'UIDropdownComponent_GetOption::Param_Index' has a wrong offset!");
static_assert(offsetof(UIDropdownComponent_GetOption, ReturnValue) == 0x000008, "Member 'UIDropdownComponent_GetOption::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct UIDropdownComponent_GetOptions final
{
public:
	TArray<struct FUIDropdownOptionData>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetOptions) == 0x000008, "Wrong alignment on UIDropdownComponent_GetOptions");
static_assert(sizeof(UIDropdownComponent_GetOptions) == 0x000010, "Wrong size on UIDropdownComponent_GetOptions");
static_assert(offsetof(UIDropdownComponent_GetOptions, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetOptions::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetValue
// 0x0004 (0x0004 - 0x0000)
struct UIDropdownComponent_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetValue) == 0x000004, "Wrong alignment on UIDropdownComponent_GetValue");
static_assert(sizeof(UIDropdownComponent_GetValue) == 0x000004, "Wrong size on UIDropdownComponent_GetValue");
static_assert(offsetof(UIDropdownComponent_GetValue, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetValue::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetVerticalOverlap
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_GetVerticalOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetVerticalOverlap) == 0x000001, "Wrong alignment on UIDropdownComponent_GetVerticalOverlap");
static_assert(sizeof(UIDropdownComponent_GetVerticalOverlap) == 0x000001, "Wrong size on UIDropdownComponent_GetVerticalOverlap");
static_assert(offsetof(UIDropdownComponent_GetVerticalOverlap, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetVerticalOverlap::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetVerticalPosition
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_GetVerticalPosition final
{
public:
	EUIDropdownVerticalPosition                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetVerticalPosition) == 0x000001, "Wrong alignment on UIDropdownComponent_GetVerticalPosition");
static_assert(sizeof(UIDropdownComponent_GetVerticalPosition) == 0x000001, "Wrong size on UIDropdownComponent_GetVerticalPosition");
static_assert(offsetof(UIDropdownComponent_GetVerticalPosition, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetVerticalPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetDecelerationRateDegbug
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_GetDecelerationRateDegbug final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetDecelerationRateDegbug) == 0x000004, "Wrong alignment on UIScrollViewComponent_GetDecelerationRateDegbug");
static_assert(sizeof(UIScrollViewComponent_GetDecelerationRateDegbug) == 0x000004, "Wrong size on UIScrollViewComponent_GetDecelerationRateDegbug");
static_assert(offsetof(UIScrollViewComponent_GetDecelerationRateDegbug, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetDecelerationRateDegbug::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetElasticityDegbug
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_GetElasticityDegbug final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetElasticityDegbug) == 0x000004, "Wrong alignment on UIScrollViewComponent_GetElasticityDegbug");
static_assert(sizeof(UIScrollViewComponent_GetElasticityDegbug) == 0x000004, "Wrong size on UIScrollViewComponent_GetElasticityDegbug");
static_assert(offsetof(UIScrollViewComponent_GetElasticityDegbug, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetElasticityDegbug::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetScrollOutOfRangeModulusDebug
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_GetScrollOutOfRangeModulusDebug final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetScrollOutOfRangeModulusDebug) == 0x000004, "Wrong alignment on UIScrollViewComponent_GetScrollOutOfRangeModulusDebug");
static_assert(sizeof(UIScrollViewComponent_GetScrollOutOfRangeModulusDebug) == 0x000004, "Wrong size on UIScrollViewComponent_GetScrollOutOfRangeModulusDebug");
static_assert(offsetof(UIScrollViewComponent_GetScrollOutOfRangeModulusDebug, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetScrollOutOfRangeModulusDebug::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetScrollSensitivityDebug
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_GetScrollSensitivityDebug final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetScrollSensitivityDebug) == 0x000004, "Wrong alignment on UIScrollViewComponent_GetScrollSensitivityDebug");
static_assert(sizeof(UIScrollViewComponent_GetScrollSensitivityDebug) == 0x000004, "Wrong size on UIScrollViewComponent_GetScrollSensitivityDebug");
static_assert(offsetof(UIScrollViewComponent_GetScrollSensitivityDebug, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetScrollSensitivityDebug::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetScrollUseDebug
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetScrollUseDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetScrollUseDebug) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetScrollUseDebug");
static_assert(sizeof(UIScrollViewComponent_GetScrollUseDebug) == 0x000001, "Wrong size on UIScrollViewComponent_GetScrollUseDebug");
static_assert(offsetof(UIScrollViewComponent_GetScrollUseDebug, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetScrollUseDebug::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetDecelerationRateDebug
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetDecelerationRateDebug final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetDecelerationRateDebug) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetDecelerationRateDebug");
static_assert(sizeof(UIScrollViewComponent_SetDecelerationRateDebug) == 0x000004, "Wrong size on UIScrollViewComponent_SetDecelerationRateDebug");
static_assert(offsetof(UIScrollViewComponent_SetDecelerationRateDebug, Value) == 0x000000, "Member 'UIScrollViewComponent_SetDecelerationRateDebug::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetElasticityDebug
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetElasticityDebug final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetElasticityDebug) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetElasticityDebug");
static_assert(sizeof(UIScrollViewComponent_SetElasticityDebug) == 0x000004, "Wrong size on UIScrollViewComponent_SetElasticityDebug");
static_assert(offsetof(UIScrollViewComponent_SetElasticityDebug, Value) == 0x000000, "Member 'UIScrollViewComponent_SetElasticityDebug::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollOutOfRangeModulusDebug
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetScrollOutOfRangeModulusDebug final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollOutOfRangeModulusDebug) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetScrollOutOfRangeModulusDebug");
static_assert(sizeof(UIScrollViewComponent_SetScrollOutOfRangeModulusDebug) == 0x000004, "Wrong size on UIScrollViewComponent_SetScrollOutOfRangeModulusDebug");
static_assert(offsetof(UIScrollViewComponent_SetScrollOutOfRangeModulusDebug, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollOutOfRangeModulusDebug::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollSensitivityDebug
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetScrollSensitivityDebug final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollSensitivityDebug) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetScrollSensitivityDebug");
static_assert(sizeof(UIScrollViewComponent_SetScrollSensitivityDebug) == 0x000004, "Wrong size on UIScrollViewComponent_SetScrollSensitivityDebug");
static_assert(offsetof(UIScrollViewComponent_SetScrollSensitivityDebug, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollSensitivityDebug::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollUseDebug
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetScrollUseDebug final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollUseDebug) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetScrollUseDebug");
static_assert(sizeof(UIScrollViewComponent_SetScrollUseDebug) == 0x000001, "Wrong size on UIScrollViewComponent_SetScrollUseDebug");
static_assert(offsetof(UIScrollViewComponent_SetScrollUseDebug, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollUseDebug::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetHorizontal
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetHorizontal final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetHorizontal) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetHorizontal");
static_assert(sizeof(UIScrollViewComponent_SetHorizontal) == 0x000001, "Wrong size on UIScrollViewComponent_SetHorizontal");
static_assert(offsetof(UIScrollViewComponent_SetHorizontal, Value) == 0x000000, "Member 'UIScrollViewComponent_SetHorizontal::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollProgress
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetScrollProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollProgress) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetScrollProgress");
static_assert(sizeof(UIScrollViewComponent_SetScrollProgress) == 0x000004, "Wrong size on UIScrollViewComponent_SetScrollProgress");
static_assert(offsetof(UIScrollViewComponent_SetScrollProgress, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollProgress::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollProgressIncrement
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetScrollProgressIncrement final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollProgressIncrement) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetScrollProgressIncrement");
static_assert(sizeof(UIScrollViewComponent_SetScrollProgressIncrement) == 0x000004, "Wrong size on UIScrollViewComponent_SetScrollProgressIncrement");
static_assert(offsetof(UIScrollViewComponent_SetScrollProgressIncrement, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollProgressIncrement::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollValue
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewComponent_SetScrollValue final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollValue) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetScrollValue");
static_assert(sizeof(UIScrollViewComponent_SetScrollValue) == 0x000008, "Wrong size on UIScrollViewComponent_SetScrollValue");
static_assert(offsetof(UIScrollViewComponent_SetScrollValue, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollValue::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetUnderSizeScrollEnabled
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetUnderSizeScrollEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetUnderSizeScrollEnabled) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetUnderSizeScrollEnabled");
static_assert(sizeof(UIScrollViewComponent_SetUnderSizeScrollEnabled) == 0x000001, "Wrong size on UIScrollViewComponent_SetUnderSizeScrollEnabled");
static_assert(offsetof(UIScrollViewComponent_SetUnderSizeScrollEnabled, bEnabled) == 0x000000, "Member 'UIScrollViewComponent_SetUnderSizeScrollEnabled::bEnabled' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetVertical
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetVertical final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetVertical) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetVertical");
static_assert(sizeof(UIScrollViewComponent_SetVertical) == 0x000001, "Wrong size on UIScrollViewComponent_SetVertical");
static_assert(offsetof(UIScrollViewComponent_SetVertical, Value) == 0x000000, "Member 'UIScrollViewComponent_SetVertical::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetContent
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewComponent_GetContent final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetContent) == 0x000008, "Wrong alignment on UIScrollViewComponent_GetContent");
static_assert(sizeof(UIScrollViewComponent_GetContent) == 0x000008, "Wrong size on UIScrollViewComponent_GetContent");
static_assert(offsetof(UIScrollViewComponent_GetContent, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetContent::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetHorizontal
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetHorizontal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetHorizontal) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetHorizontal");
static_assert(sizeof(UIScrollViewComponent_GetHorizontal) == 0x000001, "Wrong size on UIScrollViewComponent_GetHorizontal");
static_assert(offsetof(UIScrollViewComponent_GetHorizontal, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetHorizontal::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetUnderSizeScrollEnabled
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetUnderSizeScrollEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetUnderSizeScrollEnabled) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetUnderSizeScrollEnabled");
static_assert(sizeof(UIScrollViewComponent_GetUnderSizeScrollEnabled) == 0x000001, "Wrong size on UIScrollViewComponent_GetUnderSizeScrollEnabled");
static_assert(offsetof(UIScrollViewComponent_GetUnderSizeScrollEnabled, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetUnderSizeScrollEnabled::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetVertical
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetVertical final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetVertical) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetVertical");
static_assert(sizeof(UIScrollViewComponent_GetVertical) == 0x000001, "Wrong size on UIScrollViewComponent_GetVertical");
static_assert(offsetof(UIScrollViewComponent_GetVertical, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetVertical::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.BindParentUIItem
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_BindParentUIItem final
{
public:
	class UUISelectableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_BindParentUIItem) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_BindParentUIItem");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_BindParentUIItem) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_BindParentUIItem");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_BindParentUIItem, Component) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_BindParentUIItem::Component' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.FindNavigationComponent
// 0x0020 (0x0020 - 0x0000)
struct UIScrollViewWithScrollbarComponent_FindNavigationComponent final
{
public:
	class UUISelectableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigationWrapMode                         Mode;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasOtherNode;                                     // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1223[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_FindNavigationComponent) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_FindNavigationComponent");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_FindNavigationComponent) == 0x000020, "Wrong size on UIScrollViewWithScrollbarComponent_FindNavigationComponent");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_FindNavigationComponent, Component) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_FindNavigationComponent::Component' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_FindNavigationComponent, Direction) == 0x000008, "Member 'UIScrollViewWithScrollbarComponent_FindNavigationComponent::Direction' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_FindNavigationComponent, Mode) == 0x000014, "Member 'UIScrollViewWithScrollbarComponent_FindNavigationComponent::Mode' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_FindNavigationComponent, bHasOtherNode) == 0x000015, "Member 'UIScrollViewWithScrollbarComponent_FindNavigationComponent::bHasOtherNode' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_FindNavigationComponent, ReturnValue) == 0x000018, "Member 'UIScrollViewWithScrollbarComponent_FindNavigationComponent::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetOutOfBottomBoundsType
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType final
{
public:
	class UUIItem*                                UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutOfBoundsType                              OutOfTopOrBottomType;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutOfBoundsType                              OutOfLeftOrRightType;                              // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1224[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType) == 0x000010, "Wrong size on UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType, UIItem) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType::UIItem' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType, OutOfTopOrBottomType) == 0x000008, "Member 'UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType::OutOfTopOrBottomType' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType, OutOfLeftOrRightType) == 0x000009, "Member 'UIScrollViewWithScrollbarComponent_GetOutOfBottomBoundsType::OutOfLeftOrRightType' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollTo
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_ScrollTo final
{
public:
	class UUIItem*                                UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_ScrollTo) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_ScrollTo");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_ScrollTo) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_ScrollTo");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollTo, UIItem) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_ScrollTo::UIItem' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToBottom
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewWithScrollbarComponent_ScrollToBottom final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                UIItem;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_ScrollToBottom) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_ScrollToBottom");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_ScrollToBottom) == 0x000010, "Wrong size on UIScrollViewWithScrollbarComponent_ScrollToBottom");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToBottom, NewPosition) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_ScrollToBottom::NewPosition' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToBottom, UIItem) == 0x000008, "Member 'UIScrollViewWithScrollbarComponent_ScrollToBottom::UIItem' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToLeft
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewWithScrollbarComponent_ScrollToLeft final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                UIItem;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_ScrollToLeft) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_ScrollToLeft");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_ScrollToLeft) == 0x000010, "Wrong size on UIScrollViewWithScrollbarComponent_ScrollToLeft");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToLeft, NewPosition) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_ScrollToLeft::NewPosition' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToLeft, UIItem) == 0x000008, "Member 'UIScrollViewWithScrollbarComponent_ScrollToLeft::UIItem' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToRight
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewWithScrollbarComponent_ScrollToRight final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                UIItem;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_ScrollToRight) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_ScrollToRight");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_ScrollToRight) == 0x000010, "Wrong size on UIScrollViewWithScrollbarComponent_ScrollToRight");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToRight, NewPosition) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_ScrollToRight::NewPosition' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToRight, UIItem) == 0x000008, "Member 'UIScrollViewWithScrollbarComponent_ScrollToRight::UIItem' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToSelectableComponent
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_ScrollToSelectableComponent final
{
public:
	class UUISelectableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_ScrollToSelectableComponent) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_ScrollToSelectableComponent");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_ScrollToSelectableComponent) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_ScrollToSelectableComponent");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToSelectableComponent, Component) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_ScrollToSelectableComponent::Component' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.ScrollToTop
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewWithScrollbarComponent_ScrollToTop final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                UIItem;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_ScrollToTop) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_ScrollToTop");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_ScrollToTop) == 0x000010, "Wrong size on UIScrollViewWithScrollbarComponent_ScrollToTop");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToTop, NewPosition) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_ScrollToTop::NewPosition' has a wrong offset!");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_ScrollToTop, UIItem) == 0x000008, "Member 'UIScrollViewWithScrollbarComponent_ScrollToTop::UIItem' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.SetHorizontalScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility final
{
public:
	EScrollViewScrollbarVisibility                Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility) == 0x000001, "Wrong alignment on UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility) == 0x000001, "Wrong size on UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility, Value) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility::Value' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.SetVerticalScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility final
{
public:
	EScrollViewScrollbarVisibility                Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility) == 0x000001, "Wrong alignment on UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility) == 0x000001, "Wrong size on UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility, Value) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility::Value' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.UnBindParentUIItem
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_UnBindParentUIItem final
{
public:
	class UUISelectableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_UnBindParentUIItem) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_UnBindParentUIItem");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_UnBindParentUIItem) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_UnBindParentUIItem");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_UnBindParentUIItem, Component) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_UnBindParentUIItem::Component' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetHorizontalScrollbar
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetHorizontalScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility final
{
public:
	EScrollViewScrollbarVisibility                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility) == 0x000001, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility) == 0x000001, "Wrong size on UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetVerticalScrollbar
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetVerticalScrollbar final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbar) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetVerticalScrollbar");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbar) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_GetVerticalScrollbar");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbar, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetVerticalScrollbar::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetVerticalScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility final
{
public:
	EScrollViewScrollbarVisibility                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility) == 0x000001, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility) == 0x000001, "Wrong size on UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetViewport
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetViewport final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetViewport) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetViewport");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetViewport) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_GetViewport");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetViewport, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetViewport::ReturnValue' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.GetRealUsingItem
// 0x0010 (0x0010 - 0x0000)
struct UIDynScrollViewComponent_GetRealUsingItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AUIBaseActor*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_GetRealUsingItem) == 0x000008, "Wrong alignment on UIDynScrollViewComponent_GetRealUsingItem");
static_assert(sizeof(UIDynScrollViewComponent_GetRealUsingItem) == 0x000010, "Wrong size on UIDynScrollViewComponent_GetRealUsingItem");
static_assert(offsetof(UIDynScrollViewComponent_GetRealUsingItem, ItemIndex) == 0x000000, "Member 'UIDynScrollViewComponent_GetRealUsingItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_GetRealUsingItem, ReturnValue) == 0x000008, "Member 'UIDynScrollViewComponent_GetRealUsingItem::ReturnValue' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.NavigateScrollToUIItem
// 0x0010 (0x0010 - 0x0000)
struct UIDynScrollViewComponent_NavigateScrollToUIItem final
{
public:
	class UUIItem*                                UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReversed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigationWrapMode                         Mode;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122B[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDynScrollViewComponent_NavigateScrollToUIItem) == 0x000008, "Wrong alignment on UIDynScrollViewComponent_NavigateScrollToUIItem");
static_assert(sizeof(UIDynScrollViewComponent_NavigateScrollToUIItem) == 0x000010, "Wrong size on UIDynScrollViewComponent_NavigateScrollToUIItem");
static_assert(offsetof(UIDynScrollViewComponent_NavigateScrollToUIItem, UIItem) == 0x000000, "Member 'UIDynScrollViewComponent_NavigateScrollToUIItem::UIItem' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_NavigateScrollToUIItem, bReversed) == 0x000008, "Member 'UIDynScrollViewComponent_NavigateScrollToUIItem::bReversed' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_NavigateScrollToUIItem, Mode) == 0x000009, "Member 'UIDynScrollViewComponent_NavigateScrollToUIItem::Mode' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.RefreshByData
// 0x0010 (0x0010 - 0x0000)
struct UIDynScrollViewComponent_RefreshByData final
{
public:
	class AUIBaseActor*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepContentPosition;                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122C[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDynScrollViewComponent_RefreshByData) == 0x000008, "Wrong alignment on UIDynScrollViewComponent_RefreshByData");
static_assert(sizeof(UIDynScrollViewComponent_RefreshByData) == 0x000010, "Wrong size on UIDynScrollViewComponent_RefreshByData");
static_assert(offsetof(UIDynScrollViewComponent_RefreshByData, Item) == 0x000000, "Member 'UIDynScrollViewComponent_RefreshByData::Item' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_RefreshByData, ItemNum) == 0x000008, "Member 'UIDynScrollViewComponent_RefreshByData::ItemNum' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_RefreshByData, KeepContentPosition) == 0x00000C, "Member 'UIDynScrollViewComponent_RefreshByData::KeepContentPosition' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.ScrollToEndItemIndex
// 0x0008 (0x0008 - 0x0000)
struct UIDynScrollViewComponent_ScrollToEndItemIndex final
{
public:
	bool                                          bScrollToTop;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_ScrollToEndItemIndex) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_ScrollToEndItemIndex");
static_assert(sizeof(UIDynScrollViewComponent_ScrollToEndItemIndex) == 0x000008, "Wrong size on UIDynScrollViewComponent_ScrollToEndItemIndex");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToEndItemIndex, bScrollToTop) == 0x000000, "Member 'UIDynScrollViewComponent_ScrollToEndItemIndex::bScrollToTop' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToEndItemIndex, Offset) == 0x000004, "Member 'UIDynScrollViewComponent_ScrollToEndItemIndex::Offset' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.ScrollToItemIndex
// 0x000C (0x000C - 0x0000)
struct UIDynScrollViewComponent_ScrollToItemIndex final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollToTop;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_ScrollToItemIndex) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_ScrollToItemIndex");
static_assert(sizeof(UIDynScrollViewComponent_ScrollToItemIndex) == 0x00000C, "Wrong size on UIDynScrollViewComponent_ScrollToItemIndex");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToItemIndex, ItemIndex) == 0x000000, "Member 'UIDynScrollViewComponent_ScrollToItemIndex::ItemIndex' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToItemIndex, bScrollToTop) == 0x000004, "Member 'UIDynScrollViewComponent_ScrollToItemIndex::bScrollToTop' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToItemIndex, Offset) == 0x000008, "Member 'UIDynScrollViewComponent_ScrollToItemIndex::Offset' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.ScrollToNextLine
// 0x0001 (0x0001 - 0x0000)
struct UIDynScrollViewComponent_ScrollToNextLine final
{
public:
	bool                                          bReversed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_ScrollToNextLine) == 0x000001, "Wrong alignment on UIDynScrollViewComponent_ScrollToNextLine");
static_assert(sizeof(UIDynScrollViewComponent_ScrollToNextLine) == 0x000001, "Wrong size on UIDynScrollViewComponent_ScrollToNextLine");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToNextLine, bReversed) == 0x000000, "Member 'UIDynScrollViewComponent_ScrollToNextLine::bReversed' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.ScrollToStartItemIndex
// 0x0008 (0x0008 - 0x0000)
struct UIDynScrollViewComponent_ScrollToStartItemIndex final
{
public:
	bool                                          bScrollToTop;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_ScrollToStartItemIndex) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_ScrollToStartItemIndex");
static_assert(sizeof(UIDynScrollViewComponent_ScrollToStartItemIndex) == 0x000008, "Wrong size on UIDynScrollViewComponent_ScrollToStartItemIndex");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToStartItemIndex, bScrollToTop) == 0x000000, "Member 'UIDynScrollViewComponent_ScrollToStartItemIndex::bScrollToTop' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToStartItemIndex, Offset) == 0x000004, "Member 'UIDynScrollViewComponent_ScrollToStartItemIndex::Offset' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.ScrollToUIItem
// 0x0010 (0x0010 - 0x0000)
struct UIDynScrollViewComponent_ScrollToUIItem final
{
public:
	class UUIItem*                                UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollToTop;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1230[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDynScrollViewComponent_ScrollToUIItem) == 0x000008, "Wrong alignment on UIDynScrollViewComponent_ScrollToUIItem");
static_assert(sizeof(UIDynScrollViewComponent_ScrollToUIItem) == 0x000010, "Wrong size on UIDynScrollViewComponent_ScrollToUIItem");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToUIItem, UIItem) == 0x000000, "Member 'UIDynScrollViewComponent_ScrollToUIItem::UIItem' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_ScrollToUIItem, bScrollToTop) == 0x000008, "Member 'UIDynScrollViewComponent_ScrollToUIItem::bScrollToTop' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.SetGridAnimationInterval
// 0x0004 (0x0004 - 0x0000)
struct UIDynScrollViewComponent_SetGridAnimationInterval final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_SetGridAnimationInterval) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_SetGridAnimationInterval");
static_assert(sizeof(UIDynScrollViewComponent_SetGridAnimationInterval) == 0x000004, "Wrong size on UIDynScrollViewComponent_SetGridAnimationInterval");
static_assert(offsetof(UIDynScrollViewComponent_SetGridAnimationInterval, Value) == 0x000000, "Member 'UIDynScrollViewComponent_SetGridAnimationInterval::Value' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.SetGridAnimationStartTime
// 0x0004 (0x0004 - 0x0000)
struct UIDynScrollViewComponent_SetGridAnimationStartTime final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_SetGridAnimationStartTime) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_SetGridAnimationStartTime");
static_assert(sizeof(UIDynScrollViewComponent_SetGridAnimationStartTime) == 0x000004, "Wrong size on UIDynScrollViewComponent_SetGridAnimationStartTime");
static_assert(offsetof(UIDynScrollViewComponent_SetGridAnimationStartTime, Value) == 0x000000, "Member 'UIDynScrollViewComponent_SetGridAnimationStartTime::Value' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.SetInAnimation
// 0x0001 (0x0001 - 0x0000)
struct UIDynScrollViewComponent_SetInAnimation final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_SetInAnimation) == 0x000001, "Wrong alignment on UIDynScrollViewComponent_SetInAnimation");
static_assert(sizeof(UIDynScrollViewComponent_SetInAnimation) == 0x000001, "Wrong size on UIDynScrollViewComponent_SetInAnimation");
static_assert(offsetof(UIDynScrollViewComponent_SetInAnimation, State) == 0x000000, "Member 'UIDynScrollViewComponent_SetInAnimation::State' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.GetGridAnimationInterval
// 0x0004 (0x0004 - 0x0000)
struct UIDynScrollViewComponent_GetGridAnimationInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_GetGridAnimationInterval) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_GetGridAnimationInterval");
static_assert(sizeof(UIDynScrollViewComponent_GetGridAnimationInterval) == 0x000004, "Wrong size on UIDynScrollViewComponent_GetGridAnimationInterval");
static_assert(offsetof(UIDynScrollViewComponent_GetGridAnimationInterval, ReturnValue) == 0x000000, "Member 'UIDynScrollViewComponent_GetGridAnimationInterval::ReturnValue' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.GetGridAnimationStartTime
// 0x0004 (0x0004 - 0x0000)
struct UIDynScrollViewComponent_GetGridAnimationStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_GetGridAnimationStartTime) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_GetGridAnimationStartTime");
static_assert(sizeof(UIDynScrollViewComponent_GetGridAnimationStartTime) == 0x000004, "Wrong size on UIDynScrollViewComponent_GetGridAnimationStartTime");
static_assert(offsetof(UIDynScrollViewComponent_GetGridAnimationStartTime, ReturnValue) == 0x000000, "Member 'UIDynScrollViewComponent_GetGridAnimationStartTime::ReturnValue' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.GetInAnimation
// 0x0001 (0x0001 - 0x0000)
struct UIDynScrollViewComponent_GetInAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_GetInAnimation) == 0x000001, "Wrong alignment on UIDynScrollViewComponent_GetInAnimation");
static_assert(sizeof(UIDynScrollViewComponent_GetInAnimation) == 0x000001, "Wrong size on UIDynScrollViewComponent_GetInAnimation");
static_assert(offsetof(UIDynScrollViewComponent_GetInAnimation, ReturnValue) == 0x000000, "Member 'UIDynScrollViewComponent_GetInAnimation::ReturnValue' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.GetItem
// 0x0010 (0x0010 - 0x0000)
struct UIDynScrollViewComponent_GetItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1231[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AUIBaseActor*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDynScrollViewComponent_GetItem) == 0x000008, "Wrong alignment on UIDynScrollViewComponent_GetItem");
static_assert(sizeof(UIDynScrollViewComponent_GetItem) == 0x000010, "Wrong size on UIDynScrollViewComponent_GetItem");
static_assert(offsetof(UIDynScrollViewComponent_GetItem, ItemIndex) == 0x000000, "Member 'UIDynScrollViewComponent_GetItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_GetItem, ReturnValue) == 0x000008, "Member 'UIDynScrollViewComponent_GetItem::ReturnValue' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.GetItemDisplayIndex
// 0x000C (0x000C - 0x0000)
struct UIDynScrollViewComponent_GetItemDisplayIndex final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayIndex;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1232[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDynScrollViewComponent_GetItemDisplayIndex) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_GetItemDisplayIndex");
static_assert(sizeof(UIDynScrollViewComponent_GetItemDisplayIndex) == 0x00000C, "Wrong size on UIDynScrollViewComponent_GetItemDisplayIndex");
static_assert(offsetof(UIDynScrollViewComponent_GetItemDisplayIndex, ItemIndex) == 0x000000, "Member 'UIDynScrollViewComponent_GetItemDisplayIndex::ItemIndex' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_GetItemDisplayIndex, DisplayIndex) == 0x000004, "Member 'UIDynScrollViewComponent_GetItemDisplayIndex::DisplayIndex' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_GetItemDisplayIndex, ReturnValue) == 0x000008, "Member 'UIDynScrollViewComponent_GetItemDisplayIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIDynScrollViewComponent.GetItemIndex
// 0x000C (0x000C - 0x0000)
struct UIDynScrollViewComponent_GetItemIndex final
{
public:
	int32                                         DisplayIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1233[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDynScrollViewComponent_GetItemIndex) == 0x000004, "Wrong alignment on UIDynScrollViewComponent_GetItemIndex");
static_assert(sizeof(UIDynScrollViewComponent_GetItemIndex) == 0x00000C, "Wrong size on UIDynScrollViewComponent_GetItemIndex");
static_assert(offsetof(UIDynScrollViewComponent_GetItemIndex, DisplayIndex) == 0x000000, "Member 'UIDynScrollViewComponent_GetItemIndex::DisplayIndex' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_GetItemIndex, ItemIndex) == 0x000004, "Member 'UIDynScrollViewComponent_GetItemIndex::ItemIndex' has a wrong offset!");
static_assert(offsetof(UIDynScrollViewComponent_GetItemIndex, ReturnValue) == 0x000008, "Member 'UIDynScrollViewComponent_GetItemIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetGradientColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectLongShadow_SetGradientColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetGradientColor) == 0x000004, "Wrong alignment on UIEffectLongShadow_SetGradientColor");
static_assert(sizeof(UIEffectLongShadow_SetGradientColor) == 0x000004, "Wrong size on UIEffectLongShadow_SetGradientColor");
static_assert(offsetof(UIEffectLongShadow_SetGradientColor, NewColor) == 0x000000, "Member 'UIEffectLongShadow_SetGradientColor::NewColor' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectLongShadow_SetShadowColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetShadowColor) == 0x000004, "Wrong alignment on UIEffectLongShadow_SetShadowColor");
static_assert(sizeof(UIEffectLongShadow_SetShadowColor) == 0x000004, "Wrong size on UIEffectLongShadow_SetShadowColor");
static_assert(offsetof(UIEffectLongShadow_SetShadowColor, NewColor) == 0x000000, "Member 'UIEffectLongShadow_SetShadowColor::NewColor' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetShadowSegment
// 0x0001 (0x0001 - 0x0000)
struct UIEffectLongShadow_SetShadowSegment final
{
public:
	uint8                                         NewSegment;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetShadowSegment) == 0x000001, "Wrong alignment on UIEffectLongShadow_SetShadowSegment");
static_assert(sizeof(UIEffectLongShadow_SetShadowSegment) == 0x000001, "Wrong size on UIEffectLongShadow_SetShadowSegment");
static_assert(offsetof(UIEffectLongShadow_SetShadowSegment, NewSegment) == 0x000000, "Member 'UIEffectLongShadow_SetShadowSegment::NewSegment' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetShadowSize
// 0x000C (0x000C - 0x0000)
struct UIEffectLongShadow_SetShadowSize final
{
public:
	struct FVector                                NewSize;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetShadowSize) == 0x000004, "Wrong alignment on UIEffectLongShadow_SetShadowSize");
static_assert(sizeof(UIEffectLongShadow_SetShadowSize) == 0x00000C, "Wrong size on UIEffectLongShadow_SetShadowSize");
static_assert(offsetof(UIEffectLongShadow_SetShadowSize, NewSize) == 0x000000, "Member 'UIEffectLongShadow_SetShadowSize::NewSize' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetUseGradientColor
// 0x0001 (0x0001 - 0x0000)
struct UIEffectLongShadow_SetUseGradientColor final
{
public:
	bool                                          NewBool;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetUseGradientColor) == 0x000001, "Wrong alignment on UIEffectLongShadow_SetUseGradientColor");
static_assert(sizeof(UIEffectLongShadow_SetUseGradientColor) == 0x000001, "Wrong size on UIEffectLongShadow_SetUseGradientColor");
static_assert(offsetof(UIEffectLongShadow_SetUseGradientColor, NewBool) == 0x000000, "Member 'UIEffectLongShadow_SetUseGradientColor::NewBool' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetGradientColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectLongShadow_GetGradientColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetGradientColor) == 0x000004, "Wrong alignment on UIEffectLongShadow_GetGradientColor");
static_assert(sizeof(UIEffectLongShadow_GetGradientColor) == 0x000004, "Wrong size on UIEffectLongShadow_GetGradientColor");
static_assert(offsetof(UIEffectLongShadow_GetGradientColor, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetGradientColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectLongShadow_GetShadowColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetShadowColor) == 0x000004, "Wrong alignment on UIEffectLongShadow_GetShadowColor");
static_assert(sizeof(UIEffectLongShadow_GetShadowColor) == 0x000004, "Wrong size on UIEffectLongShadow_GetShadowColor");
static_assert(offsetof(UIEffectLongShadow_GetShadowColor, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetShadowColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetShadowSegments
// 0x0001 (0x0001 - 0x0000)
struct UIEffectLongShadow_GetShadowSegments final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetShadowSegments) == 0x000001, "Wrong alignment on UIEffectLongShadow_GetShadowSegments");
static_assert(sizeof(UIEffectLongShadow_GetShadowSegments) == 0x000001, "Wrong size on UIEffectLongShadow_GetShadowSegments");
static_assert(offsetof(UIEffectLongShadow_GetShadowSegments, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetShadowSegments::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetShadowSize
// 0x000C (0x000C - 0x0000)
struct UIEffectLongShadow_GetShadowSize final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetShadowSize) == 0x000004, "Wrong alignment on UIEffectLongShadow_GetShadowSize");
static_assert(sizeof(UIEffectLongShadow_GetShadowSize) == 0x00000C, "Wrong size on UIEffectLongShadow_GetShadowSize");
static_assert(offsetof(UIEffectLongShadow_GetShadowSize, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetShadowSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetUseGradientColor
// 0x0001 (0x0001 - 0x0000)
struct UIEffectLongShadow_GetUseGradientColor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetUseGradientColor) == 0x000001, "Wrong alignment on UIEffectLongShadow_GetUseGradientColor");
static_assert(sizeof(UIEffectLongShadow_GetUseGradientColor) == 0x000001, "Wrong size on UIEffectLongShadow_GetUseGradientColor");
static_assert(offsetof(UIEffectLongShadow_GetUseGradientColor, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetUseGradientColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.EndAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIRing_EndAngleTo final
{
public:
	float                                         EndValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   EaseType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123B[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_EndAngleTo) == 0x000008, "Wrong alignment on UIRing_EndAngleTo");
static_assert(sizeof(UIRing_EndAngleTo) == 0x000018, "Wrong size on UIRing_EndAngleTo");
static_assert(offsetof(UIRing_EndAngleTo, EndValue) == 0x000000, "Member 'UIRing_EndAngleTo::EndValue' has a wrong offset!");
static_assert(offsetof(UIRing_EndAngleTo, Duration) == 0x000004, "Member 'UIRing_EndAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIRing_EndAngleTo, Delay) == 0x000008, "Member 'UIRing_EndAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIRing_EndAngleTo, EaseType) == 0x00000C, "Member 'UIRing_EndAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(UIRing_EndAngleTo, ReturnValue) == 0x000010, "Member 'UIRing_EndAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIRing_SetEndAngle final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_SetEndAngle) == 0x000004, "Wrong alignment on UIRing_SetEndAngle");
static_assert(sizeof(UIRing_SetEndAngle) == 0x000004, "Wrong size on UIRing_SetEndAngle");
static_assert(offsetof(UIRing_SetEndAngle, NewValue) == 0x000000, "Member 'UIRing_SetEndAngle::NewValue' has a wrong offset!");

// Function LGUI.UIRing.SetSegment
// 0x0004 (0x0004 - 0x0000)
struct UIRing_SetSegment final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_SetSegment) == 0x000004, "Wrong alignment on UIRing_SetSegment");
static_assert(sizeof(UIRing_SetSegment) == 0x000004, "Wrong size on UIRing_SetSegment");
static_assert(offsetof(UIRing_SetSegment, NewValue) == 0x000000, "Member 'UIRing_SetSegment::NewValue' has a wrong offset!");

// Function LGUI.UIRing.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIRing_SetStartAngle final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_SetStartAngle) == 0x000004, "Wrong alignment on UIRing_SetStartAngle");
static_assert(sizeof(UIRing_SetStartAngle) == 0x000004, "Wrong size on UIRing_SetStartAngle");
static_assert(offsetof(UIRing_SetStartAngle, NewValue) == 0x000000, "Member 'UIRing_SetStartAngle::NewValue' has a wrong offset!");

// Function LGUI.UIRing.StartAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIRing_StartAngleTo final
{
public:
	float                                         EndValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   EaseType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_StartAngleTo) == 0x000008, "Wrong alignment on UIRing_StartAngleTo");
static_assert(sizeof(UIRing_StartAngleTo) == 0x000018, "Wrong size on UIRing_StartAngleTo");
static_assert(offsetof(UIRing_StartAngleTo, EndValue) == 0x000000, "Member 'UIRing_StartAngleTo::EndValue' has a wrong offset!");
static_assert(offsetof(UIRing_StartAngleTo, Duration) == 0x000004, "Member 'UIRing_StartAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIRing_StartAngleTo, Delay) == 0x000008, "Member 'UIRing_StartAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIRing_StartAngleTo, EaseType) == 0x00000C, "Member 'UIRing_StartAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(UIRing_StartAngleTo, ReturnValue) == 0x000010, "Member 'UIRing_StartAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.GetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIRing_GetEndAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_GetEndAngle) == 0x000004, "Wrong alignment on UIRing_GetEndAngle");
static_assert(sizeof(UIRing_GetEndAngle) == 0x000004, "Wrong size on UIRing_GetEndAngle");
static_assert(offsetof(UIRing_GetEndAngle, ReturnValue) == 0x000000, "Member 'UIRing_GetEndAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.GetSegment
// 0x0004 (0x0004 - 0x0000)
struct UIRing_GetSegment final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_GetSegment) == 0x000004, "Wrong alignment on UIRing_GetSegment");
static_assert(sizeof(UIRing_GetSegment) == 0x000004, "Wrong size on UIRing_GetSegment");
static_assert(offsetof(UIRing_GetSegment, ReturnValue) == 0x000000, "Member 'UIRing_GetSegment::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.GetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIRing_GetStartAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_GetStartAngle) == 0x000004, "Wrong alignment on UIRing_GetStartAngle");
static_assert(sizeof(UIRing_GetStartAngle) == 0x000004, "Wrong size on UIRing_GetStartAngle");
static_assert(offsetof(UIRing_GetStartAngle, ReturnValue) == 0x000000, "Member 'UIRing_GetStartAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectOutline.SetOutlineColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectOutline_SetOutlineColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_SetOutlineColor) == 0x000004, "Wrong alignment on UIEffectOutline_SetOutlineColor");
static_assert(sizeof(UIEffectOutline_SetOutlineColor) == 0x000004, "Wrong size on UIEffectOutline_SetOutlineColor");
static_assert(offsetof(UIEffectOutline_SetOutlineColor, NewColor) == 0x000000, "Member 'UIEffectOutline_SetOutlineColor::NewColor' has a wrong offset!");

// Function LGUI.UIEffectOutline.SetOutlineSize
// 0x0008 (0x0008 - 0x0000)
struct UIEffectOutline_SetOutlineSize final
{
public:
	struct FVector2D                              NewSize;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_SetOutlineSize) == 0x000004, "Wrong alignment on UIEffectOutline_SetOutlineSize");
static_assert(sizeof(UIEffectOutline_SetOutlineSize) == 0x000008, "Wrong size on UIEffectOutline_SetOutlineSize");
static_assert(offsetof(UIEffectOutline_SetOutlineSize, NewSize) == 0x000000, "Member 'UIEffectOutline_SetOutlineSize::NewSize' has a wrong offset!");

// Function LGUI.UIEffectOutline.SetUse8Direction
// 0x0001 (0x0001 - 0x0000)
struct UIEffectOutline_SetUse8Direction final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_SetUse8Direction) == 0x000001, "Wrong alignment on UIEffectOutline_SetUse8Direction");
static_assert(sizeof(UIEffectOutline_SetUse8Direction) == 0x000001, "Wrong size on UIEffectOutline_SetUse8Direction");
static_assert(offsetof(UIEffectOutline_SetUse8Direction, NewValue) == 0x000000, "Member 'UIEffectOutline_SetUse8Direction::NewValue' has a wrong offset!");

// Function LGUI.UIEffectOutline.GetOutlineColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectOutline_GetOutlineColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_GetOutlineColor) == 0x000004, "Wrong alignment on UIEffectOutline_GetOutlineColor");
static_assert(sizeof(UIEffectOutline_GetOutlineColor) == 0x000004, "Wrong size on UIEffectOutline_GetOutlineColor");
static_assert(offsetof(UIEffectOutline_GetOutlineColor, ReturnValue) == 0x000000, "Member 'UIEffectOutline_GetOutlineColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectOutline.GetOutlineSize
// 0x0008 (0x0008 - 0x0000)
struct UIEffectOutline_GetOutlineSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_GetOutlineSize) == 0x000004, "Wrong alignment on UIEffectOutline_GetOutlineSize");
static_assert(sizeof(UIEffectOutline_GetOutlineSize) == 0x000008, "Wrong size on UIEffectOutline_GetOutlineSize");
static_assert(offsetof(UIEffectOutline_GetOutlineSize, ReturnValue) == 0x000000, "Member 'UIEffectOutline_GetOutlineSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectOutline.GetUse8Direction
// 0x0001 (0x0001 - 0x0000)
struct UIEffectOutline_GetUse8Direction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_GetUse8Direction) == 0x000001, "Wrong alignment on UIEffectOutline_GetUse8Direction");
static_assert(sizeof(UIEffectOutline_GetUse8Direction) == 0x000001, "Wrong size on UIEffectOutline_GetUse8Direction");
static_assert(offsetof(UIEffectOutline_GetUse8Direction, ReturnValue) == 0x000000, "Member 'UIEffectOutline_GetUse8Direction::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectShadow.SetShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectShadow_SetShadowColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectShadow_SetShadowColor) == 0x000004, "Wrong alignment on UIEffectShadow_SetShadowColor");
static_assert(sizeof(UIEffectShadow_SetShadowColor) == 0x000004, "Wrong size on UIEffectShadow_SetShadowColor");
static_assert(offsetof(UIEffectShadow_SetShadowColor, NewColor) == 0x000000, "Member 'UIEffectShadow_SetShadowColor::NewColor' has a wrong offset!");

// Function LGUI.UIEffectShadow.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct UIEffectShadow_SetShadowOffset final
{
public:
	struct FVector2D                              NewOffset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectShadow_SetShadowOffset) == 0x000004, "Wrong alignment on UIEffectShadow_SetShadowOffset");
static_assert(sizeof(UIEffectShadow_SetShadowOffset) == 0x000008, "Wrong size on UIEffectShadow_SetShadowOffset");
static_assert(offsetof(UIEffectShadow_SetShadowOffset, NewOffset) == 0x000000, "Member 'UIEffectShadow_SetShadowOffset::NewOffset' has a wrong offset!");

// Function LGUI.UIEffectShadow.GetShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectShadow_GetShadowColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectShadow_GetShadowColor) == 0x000004, "Wrong alignment on UIEffectShadow_GetShadowColor");
static_assert(sizeof(UIEffectShadow_GetShadowColor) == 0x000004, "Wrong size on UIEffectShadow_GetShadowColor");
static_assert(offsetof(UIEffectShadow_GetShadowColor, ReturnValue) == 0x000000, "Member 'UIEffectShadow_GetShadowColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectShadow.GetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct UIEffectShadow_GetShadowOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectShadow_GetShadowOffset) == 0x000004, "Wrong alignment on UIEffectShadow_GetShadowOffset");
static_assert(sizeof(UIEffectShadow_GetShadowOffset) == 0x000008, "Wrong size on UIEffectShadow_GetShadowOffset");
static_assert(offsetof(UIEffectShadow_GetShadowOffset, ReturnValue) == 0x000000, "Member 'UIEffectShadow_GetShadowOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_Selector.SetOffset
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_Selector_SetOffset final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_Selector_SetOffset) == 0x000004, "Wrong alignment on UIEffectTextAnimation_Selector_SetOffset");
static_assert(sizeof(UIEffectTextAnimation_Selector_SetOffset) == 0x000004, "Wrong size on UIEffectTextAnimation_Selector_SetOffset");
static_assert(offsetof(UIEffectTextAnimation_Selector_SetOffset, Value) == 0x000000, "Member 'UIEffectTextAnimation_Selector_SetOffset::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_Selector.GetOffset
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_Selector_GetOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_Selector_GetOffset) == 0x000004, "Wrong alignment on UIEffectTextAnimation_Selector_GetOffset");
static_assert(sizeof(UIEffectTextAnimation_Selector_GetOffset) == 0x000004, "Wrong size on UIEffectTextAnimation_Selector_GetOffset");
static_assert(offsetof(UIEffectTextAnimation_Selector_GetOffset, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_Selector_GetOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.SetScrollbarDelegate
// 0x0014 (0x0014 - 0x0000)
struct UIScrollbarComponent_SetScrollbarDelegate final
{
public:
	TDelegate<void(class UUIScrollbarComponent* ScrollbarComponent, bool AtiveOrInactive)> Delegate;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_SetScrollbarDelegate) == 0x000004, "Wrong alignment on UIScrollbarComponent_SetScrollbarDelegate");
static_assert(sizeof(UIScrollbarComponent_SetScrollbarDelegate) == 0x000014, "Wrong size on UIScrollbarComponent_SetScrollbarDelegate");
static_assert(offsetof(UIScrollbarComponent_SetScrollbarDelegate, Delegate) == 0x000000, "Member 'UIScrollbarComponent_SetScrollbarDelegate::Delegate' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.ChangeSchedule
// 0x0001 (0x0001 - 0x0000)
struct UIScrollbarComponent_ChangeSchedule final
{
public:
	ELGUINavigationDirection                      InDirection;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_ChangeSchedule) == 0x000001, "Wrong alignment on UIScrollbarComponent_ChangeSchedule");
static_assert(sizeof(UIScrollbarComponent_ChangeSchedule) == 0x000001, "Wrong size on UIScrollbarComponent_ChangeSchedule");
static_assert(offsetof(UIScrollbarComponent_ChangeSchedule, InDirection) == 0x000000, "Member 'UIScrollbarComponent_ChangeSchedule::InDirection' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.RegisterSlideEvent
// 0x0020 (0x0020 - 0x0000)
struct UIScrollbarComponent_RegisterSlideEvent final
{
public:
	TDelegate<void(float InFloat)>                InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1246[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_RegisterSlideEvent) == 0x000008, "Wrong alignment on UIScrollbarComponent_RegisterSlideEvent");
static_assert(sizeof(UIScrollbarComponent_RegisterSlideEvent) == 0x000020, "Wrong size on UIScrollbarComponent_RegisterSlideEvent");
static_assert(offsetof(UIScrollbarComponent_RegisterSlideEvent, InDelegate) == 0x000000, "Member 'UIScrollbarComponent_RegisterSlideEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIScrollbarComponent_RegisterSlideEvent, ReturnValue) == 0x000018, "Member 'UIScrollbarComponent_RegisterSlideEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.SetSize
// 0x0004 (0x0004 - 0x0000)
struct UIScrollbarComponent_SetSize final
{
public:
	float                                         InSize;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_SetSize) == 0x000004, "Wrong alignment on UIScrollbarComponent_SetSize");
static_assert(sizeof(UIScrollbarComponent_SetSize) == 0x000004, "Wrong size on UIScrollbarComponent_SetSize");
static_assert(offsetof(UIScrollbarComponent_SetSize, InSize) == 0x000000, "Member 'UIScrollbarComponent_SetSize::InSize' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.SetValue
// 0x0008 (0x0008 - 0x0000)
struct UIScrollbarComponent_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireEvent;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1247[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIScrollbarComponent_SetValue) == 0x000004, "Wrong alignment on UIScrollbarComponent_SetValue");
static_assert(sizeof(UIScrollbarComponent_SetValue) == 0x000008, "Wrong size on UIScrollbarComponent_SetValue");
static_assert(offsetof(UIScrollbarComponent_SetValue, InValue) == 0x000000, "Member 'UIScrollbarComponent_SetValue::InValue' has a wrong offset!");
static_assert(offsetof(UIScrollbarComponent_SetValue, FireEvent) == 0x000004, "Member 'UIScrollbarComponent_SetValue::FireEvent' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.SetValueAndSize
// 0x000C (0x000C - 0x0000)
struct UIScrollbarComponent_SetValueAndSize final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSize;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireEvent;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1248[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIScrollbarComponent_SetValueAndSize) == 0x000004, "Wrong alignment on UIScrollbarComponent_SetValueAndSize");
static_assert(sizeof(UIScrollbarComponent_SetValueAndSize) == 0x00000C, "Wrong size on UIScrollbarComponent_SetValueAndSize");
static_assert(offsetof(UIScrollbarComponent_SetValueAndSize, InValue) == 0x000000, "Member 'UIScrollbarComponent_SetValueAndSize::InValue' has a wrong offset!");
static_assert(offsetof(UIScrollbarComponent_SetValueAndSize, InSize) == 0x000004, "Member 'UIScrollbarComponent_SetValueAndSize::InSize' has a wrong offset!");
static_assert(offsetof(UIScrollbarComponent_SetValueAndSize, FireEvent) == 0x000008, "Member 'UIScrollbarComponent_SetValueAndSize::FireEvent' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.UnregisterSlideEvent
// 0x0008 (0x0008 - 0x0000)
struct UIScrollbarComponent_UnregisterSlideEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_UnregisterSlideEvent) == 0x000008, "Wrong alignment on UIScrollbarComponent_UnregisterSlideEvent");
static_assert(sizeof(UIScrollbarComponent_UnregisterSlideEvent) == 0x000008, "Wrong size on UIScrollbarComponent_UnregisterSlideEvent");
static_assert(offsetof(UIScrollbarComponent_UnregisterSlideEvent, InDelegateHandle) == 0x000000, "Member 'UIScrollbarComponent_UnregisterSlideEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.GetSize
// 0x0004 (0x0004 - 0x0000)
struct UIScrollbarComponent_GetSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_GetSize) == 0x000004, "Wrong alignment on UIScrollbarComponent_GetSize");
static_assert(sizeof(UIScrollbarComponent_GetSize) == 0x000004, "Wrong size on UIScrollbarComponent_GetSize");
static_assert(offsetof(UIScrollbarComponent_GetSize, ReturnValue) == 0x000000, "Member 'UIScrollbarComponent_GetSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.GetValue
// 0x0004 (0x0004 - 0x0000)
struct UIScrollbarComponent_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_GetValue) == 0x000004, "Wrong alignment on UIScrollbarComponent_GetValue");
static_assert(sizeof(UIScrollbarComponent_GetValue) == 0x000004, "Wrong size on UIScrollbarComponent_GetValue");
static_assert(offsetof(UIScrollbarComponent_GetValue, ReturnValue) == 0x000000, "Member 'UIScrollbarComponent_GetValue::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.SetProperties
// 0x0010 (0x0010 - 0x0000)
struct UIEffectTextAnimation_SetProperties final
{
public:
	TArray<class UUIEffectTextAnimation_Property*> Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_SetProperties) == 0x000008, "Wrong alignment on UIEffectTextAnimation_SetProperties");
static_assert(sizeof(UIEffectTextAnimation_SetProperties) == 0x000010, "Wrong size on UIEffectTextAnimation_SetProperties");
static_assert(offsetof(UIEffectTextAnimation_SetProperties, Value) == 0x000000, "Member 'UIEffectTextAnimation_SetProperties::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.SetProperty
// 0x0010 (0x0010 - 0x0000)
struct UIEffectTextAnimation_SetProperty final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIEffectTextAnimation_Property*        Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_SetProperty) == 0x000008, "Wrong alignment on UIEffectTextAnimation_SetProperty");
static_assert(sizeof(UIEffectTextAnimation_SetProperty) == 0x000010, "Wrong size on UIEffectTextAnimation_SetProperty");
static_assert(offsetof(UIEffectTextAnimation_SetProperty, Param_Index) == 0x000000, "Member 'UIEffectTextAnimation_SetProperty::Param_Index' has a wrong offset!");
static_assert(offsetof(UIEffectTextAnimation_SetProperty, Value) == 0x000008, "Member 'UIEffectTextAnimation_SetProperty::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.SetSelector
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_SetSelector final
{
public:
	class UUIEffectTextAnimation_Selector*        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_SetSelector) == 0x000008, "Wrong alignment on UIEffectTextAnimation_SetSelector");
static_assert(sizeof(UIEffectTextAnimation_SetSelector) == 0x000008, "Wrong size on UIEffectTextAnimation_SetSelector");
static_assert(offsetof(UIEffectTextAnimation_SetSelector, Value) == 0x000000, "Member 'UIEffectTextAnimation_SetSelector::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.SetSelectorOffset
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_SetSelectorOffset final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_SetSelectorOffset) == 0x000004, "Wrong alignment on UIEffectTextAnimation_SetSelectorOffset");
static_assert(sizeof(UIEffectTextAnimation_SetSelectorOffset) == 0x000004, "Wrong size on UIEffectTextAnimation_SetSelectorOffset");
static_assert(offsetof(UIEffectTextAnimation_SetSelectorOffset, Value) == 0x000000, "Member 'UIEffectTextAnimation_SetSelectorOffset::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.GetProperties
// 0x0010 (0x0010 - 0x0000)
struct UIEffectTextAnimation_GetProperties final
{
public:
	TArray<class UUIEffectTextAnimation_Property*> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_GetProperties) == 0x000008, "Wrong alignment on UIEffectTextAnimation_GetProperties");
static_assert(sizeof(UIEffectTextAnimation_GetProperties) == 0x000010, "Wrong size on UIEffectTextAnimation_GetProperties");
static_assert(offsetof(UIEffectTextAnimation_GetProperties, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_GetProperties::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.GetProperty
// 0x0010 (0x0010 - 0x0000)
struct UIEffectTextAnimation_GetProperty final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIEffectTextAnimation_Property*        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_GetProperty) == 0x000008, "Wrong alignment on UIEffectTextAnimation_GetProperty");
static_assert(sizeof(UIEffectTextAnimation_GetProperty) == 0x000010, "Wrong size on UIEffectTextAnimation_GetProperty");
static_assert(offsetof(UIEffectTextAnimation_GetProperty, Param_Index) == 0x000000, "Member 'UIEffectTextAnimation_GetProperty::Param_Index' has a wrong offset!");
static_assert(offsetof(UIEffectTextAnimation_GetProperty, ReturnValue) == 0x000008, "Member 'UIEffectTextAnimation_GetProperty::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.GetSelector
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_GetSelector final
{
public:
	class UUIEffectTextAnimation_Selector*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_GetSelector) == 0x000008, "Wrong alignment on UIEffectTextAnimation_GetSelector");
static_assert(sizeof(UIEffectTextAnimation_GetSelector) == 0x000008, "Wrong size on UIEffectTextAnimation_GetSelector");
static_assert(offsetof(UIEffectTextAnimation_GetSelector, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_GetSelector::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.GetSelectorOffset
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_GetSelectorOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_GetSelectorOffset) == 0x000004, "Wrong alignment on UIEffectTextAnimation_GetSelectorOffset");
static_assert(sizeof(UIEffectTextAnimation_GetSelectorOffset) == 0x000004, "Wrong size on UIEffectTextAnimation_GetSelectorOffset");
static_assert(offsetof(UIEffectTextAnimation_GetSelectorOffset, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_GetSelectorOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithEase.SetEaseCurve
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_PropertyWithEase_SetEaseCurve final
{
public:
	class UCurveFloat*                            Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithEase_SetEaseCurve) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PropertyWithEase_SetEaseCurve");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithEase_SetEaseCurve) == 0x000008, "Wrong size on UIEffectTextAnimation_PropertyWithEase_SetEaseCurve");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithEase_SetEaseCurve, Value) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithEase_SetEaseCurve::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithEase.SetEaseType
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_PropertyWithEase_SetEaseType final
{
public:
	ELTweenEase                                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithEase_SetEaseType) == 0x000001, "Wrong alignment on UIEffectTextAnimation_PropertyWithEase_SetEaseType");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithEase_SetEaseType) == 0x000001, "Wrong size on UIEffectTextAnimation_PropertyWithEase_SetEaseType");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithEase_SetEaseType, Value) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithEase_SetEaseType::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithEase.GetCurveFloat
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_PropertyWithEase_GetCurveFloat final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithEase_GetCurveFloat) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PropertyWithEase_GetCurveFloat");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithEase_GetCurveFloat) == 0x000008, "Wrong size on UIEffectTextAnimation_PropertyWithEase_GetCurveFloat");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithEase_GetCurveFloat, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithEase_GetCurveFloat::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithEase.GetEaseType
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_PropertyWithEase_GetEaseType final
{
public:
	ELTweenEase                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithEase_GetEaseType) == 0x000001, "Wrong alignment on UIEffectTextAnimation_PropertyWithEase_GetEaseType");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithEase_GetEaseType) == 0x000001, "Wrong size on UIEffectTextAnimation_PropertyWithEase_GetEaseType");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithEase_GetEaseType, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithEase_GetEaseType::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionProperty.SetPosition
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_PositionProperty_SetPosition final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionProperty_SetPosition) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionProperty_SetPosition");
static_assert(sizeof(UIEffectTextAnimation_PositionProperty_SetPosition) == 0x00000C, "Wrong size on UIEffectTextAnimation_PositionProperty_SetPosition");
static_assert(offsetof(UIEffectTextAnimation_PositionProperty_SetPosition, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionProperty_SetPosition::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionProperty.GetPosition
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_PositionProperty_GetPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionProperty_GetPosition) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionProperty_GetPosition");
static_assert(sizeof(UIEffectTextAnimation_PositionProperty_GetPosition) == 0x00000C, "Wrong size on UIEffectTextAnimation_PositionProperty_GetPosition");
static_assert(offsetof(UIEffectTextAnimation_PositionProperty_GetPosition, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionProperty_GetPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetMax
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_SetMax final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_SetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_SetMax");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_SetMax) == 0x00000C, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_SetMax");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_SetMax, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_SetMax::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetMin
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_SetMin final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_SetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_SetMin");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_SetMin) == 0x00000C, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_SetMin");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_SetMin, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_SetMin::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetMax
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_GetMax final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_GetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_GetMax");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_GetMax) == 0x00000C, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_GetMax");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_GetMax, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_GetMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetMin
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_GetMin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_GetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_GetMin");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_GetMin) == 0x00000C, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_GetMin");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_GetMin, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_GetMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationProperty.SetRotator
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RotationProperty_SetRotator final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationProperty_SetRotator) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationProperty_SetRotator");
static_assert(sizeof(UIEffectTextAnimation_RotationProperty_SetRotator) == 0x00000C, "Wrong size on UIEffectTextAnimation_RotationProperty_SetRotator");
static_assert(offsetof(UIEffectTextAnimation_RotationProperty_SetRotator, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationProperty_SetRotator::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationProperty.GetRotator
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RotationProperty_GetRotator final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationProperty_GetRotator) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationProperty_GetRotator");
static_assert(sizeof(UIEffectTextAnimation_RotationProperty_GetRotator) == 0x00000C, "Wrong size on UIEffectTextAnimation_RotationProperty_GetRotator");
static_assert(offsetof(UIEffectTextAnimation_RotationProperty_GetRotator, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationProperty_GetRotator::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetMax
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_SetMax final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_SetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_SetMax");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_SetMax) == 0x00000C, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_SetMax");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_SetMax, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_SetMax::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetMin
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_SetMin final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_SetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_SetMin");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_SetMin) == 0x00000C, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_SetMin");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_SetMin, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_SetMin::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetMax
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_GetMax final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_GetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_GetMax");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_GetMax) == 0x00000C, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_GetMax");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_GetMax, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_GetMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetMin
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_GetMin final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_GetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_GetMin");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_GetMin) == 0x00000C, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_GetMin");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_GetMin, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_GetMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleProperty.SetScale
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_ScaleProperty_SetScale final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleProperty_SetScale) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleProperty_SetScale");
static_assert(sizeof(UIEffectTextAnimation_ScaleProperty_SetScale) == 0x00000C, "Wrong size on UIEffectTextAnimation_ScaleProperty_SetScale");
static_assert(offsetof(UIEffectTextAnimation_ScaleProperty_SetScale, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleProperty_SetScale::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleProperty.GetScale
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_ScaleProperty_GetScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleProperty_GetScale) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleProperty_GetScale");
static_assert(sizeof(UIEffectTextAnimation_ScaleProperty_GetScale) == 0x00000C, "Wrong size on UIEffectTextAnimation_ScaleProperty_GetScale");
static_assert(offsetof(UIEffectTextAnimation_ScaleProperty_GetScale, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleProperty_GetScale::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetMax
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_SetMax final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_SetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_SetMax");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_SetMax) == 0x00000C, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_SetMax");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_SetMax, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_SetMax::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetMin
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_SetMin final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_SetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_SetMin");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_SetMin) == 0x00000C, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_SetMin");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_SetMin, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_SetMin::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetMax
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_GetMax final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_GetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_GetMax");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_GetMax) == 0x00000C, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_GetMax");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_GetMax, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_GetMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetMin
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_GetMin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_GetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_GetMin");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_GetMin) == 0x00000C, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_GetMin");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_GetMin, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_GetMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_AlphaProperty.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_AlphaProperty_SetAlpha final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_AlphaProperty_SetAlpha) == 0x000004, "Wrong alignment on UIEffectTextAnimation_AlphaProperty_SetAlpha");
static_assert(sizeof(UIEffectTextAnimation_AlphaProperty_SetAlpha) == 0x000004, "Wrong size on UIEffectTextAnimation_AlphaProperty_SetAlpha");
static_assert(offsetof(UIEffectTextAnimation_AlphaProperty_SetAlpha, Value) == 0x000000, "Member 'UIEffectTextAnimation_AlphaProperty_SetAlpha::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_AlphaProperty.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_AlphaProperty_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_AlphaProperty_GetAlpha) == 0x000004, "Wrong alignment on UIEffectTextAnimation_AlphaProperty_GetAlpha");
static_assert(sizeof(UIEffectTextAnimation_AlphaProperty_GetAlpha) == 0x000004, "Wrong size on UIEffectTextAnimation_AlphaProperty_GetAlpha");
static_assert(offsetof(UIEffectTextAnimation_AlphaProperty_GetAlpha, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_AlphaProperty_GetAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorProperty.SetColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorProperty_SetColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorProperty_SetColor) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorProperty_SetColor");
static_assert(sizeof(UIEffectTextAnimation_ColorProperty_SetColor) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorProperty_SetColor");
static_assert(offsetof(UIEffectTextAnimation_ColorProperty_SetColor, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorProperty_SetColor::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorProperty.SetUseHSV
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_ColorProperty_SetUseHSV final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorProperty_SetUseHSV) == 0x000001, "Wrong alignment on UIEffectTextAnimation_ColorProperty_SetUseHSV");
static_assert(sizeof(UIEffectTextAnimation_ColorProperty_SetUseHSV) == 0x000001, "Wrong size on UIEffectTextAnimation_ColorProperty_SetUseHSV");
static_assert(offsetof(UIEffectTextAnimation_ColorProperty_SetUseHSV, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorProperty_SetUseHSV::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorProperty.GetColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorProperty_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorProperty_GetColor) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorProperty_GetColor");
static_assert(sizeof(UIEffectTextAnimation_ColorProperty_GetColor) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorProperty_GetColor");
static_assert(offsetof(UIEffectTextAnimation_ColorProperty_GetColor, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorProperty_GetColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorProperty.GetUseHSV
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_ColorProperty_GetUseHSV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorProperty_GetUseHSV) == 0x000001, "Wrong alignment on UIEffectTextAnimation_ColorProperty_GetUseHSV");
static_assert(sizeof(UIEffectTextAnimation_ColorProperty_GetUseHSV) == 0x000001, "Wrong size on UIEffectTextAnimation_ColorProperty_GetUseHSV");
static_assert(offsetof(UIEffectTextAnimation_ColorProperty_GetUseHSV, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorProperty_GetUseHSV::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetMax
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_SetMax final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_SetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_SetMax");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_SetMax) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_SetMax");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_SetMax, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_SetMax::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetMin
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_SetMin final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_SetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_SetMin");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_SetMin) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_SetMin");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_SetMin, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_SetMin::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetUseHSV
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_SetUseHSV final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_SetUseHSV) == 0x000001, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_SetUseHSV");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_SetUseHSV) == 0x000001, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_SetUseHSV");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_SetUseHSV, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_SetUseHSV::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetMax
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_GetMax final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_GetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_GetMax");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_GetMax) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_GetMax");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_GetMax, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_GetMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetMin
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_GetMin final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_GetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_GetMin");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_GetMin) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_GetMin");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_GetMin, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_GetMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetUseHSV
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_GetUseHSV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_GetUseHSV) == 0x000001, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_GetUseHSV");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_GetUseHSV) == 0x000001, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_GetUseHSV");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_GetUseHSV, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_GetUseHSV::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithWave.SetFrequency
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_PropertyWithWave_SetFrequency final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithWave_SetFrequency) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PropertyWithWave_SetFrequency");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithWave_SetFrequency) == 0x000004, "Wrong size on UIEffectTextAnimation_PropertyWithWave_SetFrequency");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithWave_SetFrequency, Value) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithWave_SetFrequency::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithWave.GetFrequency
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_PropertyWithWave_GetFrequency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithWave_GetFrequency) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PropertyWithWave_GetFrequency");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithWave_GetFrequency) == 0x000004, "Wrong size on UIEffectTextAnimation_PropertyWithWave_GetFrequency");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithWave_GetFrequency, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithWave_GetFrequency::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionWaveProperty.SetPosition
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_PositionWaveProperty_SetPosition final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionWaveProperty_SetPosition) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionWaveProperty_SetPosition");
static_assert(sizeof(UIEffectTextAnimation_PositionWaveProperty_SetPosition) == 0x00000C, "Wrong size on UIEffectTextAnimation_PositionWaveProperty_SetPosition");
static_assert(offsetof(UIEffectTextAnimation_PositionWaveProperty_SetPosition, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionWaveProperty_SetPosition::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionWaveProperty.GetPosition
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_PositionWaveProperty_GetPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionWaveProperty_GetPosition) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionWaveProperty_GetPosition");
static_assert(sizeof(UIEffectTextAnimation_PositionWaveProperty_GetPosition) == 0x00000C, "Wrong size on UIEffectTextAnimation_PositionWaveProperty_GetPosition");
static_assert(offsetof(UIEffectTextAnimation_PositionWaveProperty_GetPosition, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionWaveProperty_GetPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationWaveProperty.SetRotator
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RotationWaveProperty_SetRotator final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationWaveProperty_SetRotator) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationWaveProperty_SetRotator");
static_assert(sizeof(UIEffectTextAnimation_RotationWaveProperty_SetRotator) == 0x00000C, "Wrong size on UIEffectTextAnimation_RotationWaveProperty_SetRotator");
static_assert(offsetof(UIEffectTextAnimation_RotationWaveProperty_SetRotator, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationWaveProperty_SetRotator::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationWaveProperty.GetRotator
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RotationWaveProperty_GetRotator final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationWaveProperty_GetRotator) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationWaveProperty_GetRotator");
static_assert(sizeof(UIEffectTextAnimation_RotationWaveProperty_GetRotator) == 0x00000C, "Wrong size on UIEffectTextAnimation_RotationWaveProperty_GetRotator");
static_assert(offsetof(UIEffectTextAnimation_RotationWaveProperty_GetRotator, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationWaveProperty_GetRotator::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleWaveProperty.SetScale
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_ScaleWaveProperty_SetScale final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleWaveProperty_SetScale) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleWaveProperty_SetScale");
static_assert(sizeof(UIEffectTextAnimation_ScaleWaveProperty_SetScale) == 0x00000C, "Wrong size on UIEffectTextAnimation_ScaleWaveProperty_SetScale");
static_assert(offsetof(UIEffectTextAnimation_ScaleWaveProperty_SetScale, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleWaveProperty_SetScale::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleWaveProperty.GetScale
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_ScaleWaveProperty_GetScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleWaveProperty_GetScale) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleWaveProperty_GetScale");
static_assert(sizeof(UIEffectTextAnimation_ScaleWaveProperty_GetScale) == 0x00000C, "Wrong size on UIEffectTextAnimation_ScaleWaveProperty_GetScale");
static_assert(offsetof(UIEffectTextAnimation_ScaleWaveProperty_GetScale, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleWaveProperty_GetScale::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.SetEnd
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_SetEnd final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_SetEnd) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_SetEnd");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_SetEnd) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_SetEnd");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_SetEnd, Value) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_SetEnd::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.SetFlipDirection
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_SetFlipDirection final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_SetFlipDirection) == 0x000001, "Wrong alignment on UIEffectTextAnimation_RangeSelector_SetFlipDirection");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_SetFlipDirection) == 0x000001, "Wrong size on UIEffectTextAnimation_RangeSelector_SetFlipDirection");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_SetFlipDirection, Value) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_SetFlipDirection::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.SetRange
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_SetRange final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_SetRange) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_SetRange");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_SetRange) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_SetRange");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_SetRange, Value) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_SetRange::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.SetStart
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_SetStart final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_SetStart) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_SetStart");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_SetStart) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_SetStart");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_SetStart, Value) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_SetStart::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.GetEnd
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_GetEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_GetEnd) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_GetEnd");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_GetEnd) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_GetEnd");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_GetEnd, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_GetEnd::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.GetFlipDirection
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_GetFlipDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_GetFlipDirection) == 0x000001, "Wrong alignment on UIEffectTextAnimation_RangeSelector_GetFlipDirection");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_GetFlipDirection) == 0x000001, "Wrong size on UIEffectTextAnimation_RangeSelector_GetFlipDirection");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_GetFlipDirection, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_GetFlipDirection::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.GetRange
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_GetRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_GetRange) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_GetRange");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_GetRange) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_GetRange");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_GetRange, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_GetRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.GetStart
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_GetStart final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_GetStart) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_GetStart");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_GetStart) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_GetStart");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_GetStart, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_GetStart::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.SetEnd
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_SetEnd final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_SetEnd) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_SetEnd");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_SetEnd) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_SetEnd");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_SetEnd, Value) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_SetEnd::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.SetStart
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_SetStart final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_SetStart) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_SetStart");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_SetStart) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_SetStart");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_SetStart, Value) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_SetStart::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.GetEnd
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_GetEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_GetEnd) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_GetEnd");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_GetEnd) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_GetEnd");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_GetEnd, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_GetEnd::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.GetStart
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_GetStart final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_GetStart) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_GetStart");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_GetStart) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_GetStart");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_GetStart, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_GetStart::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetFlipDirection
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection) == 0x000001, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection) == 0x000001, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection, Value) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetRange
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_SetRange final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_SetRange) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_SetRange");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_SetRange) == 0x000004, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_SetRange");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_SetRange, Value) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_SetRange::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetTagName
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_SetTagName final
{
public:
	class FName                                   Value;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_SetTagName) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_SetTagName");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_SetTagName) == 0x00000C, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_SetTagName");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_SetTagName, Value) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_SetTagName::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetFlipDirection
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection) == 0x000001, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection) == 0x000001, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetRange
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_GetRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_GetRange) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_GetRange");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_GetRange) == 0x000004, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_GetRange");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_GetRange, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_GetRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetTagName
// 0x000C (0x000C - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_GetTagName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_GetTagName) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_GetTagName");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_GetTagName) == 0x00000C, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_GetTagName");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_GetTagName, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_GetTagName::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerBeginDrag
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerBeginDrag final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1265[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerBeginDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerBeginDrag");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerBeginDrag) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerBeginDrag");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerBeginDrag, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerBeginDrag::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerBeginDrag, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerBeginDrag::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerClick
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerClick final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1266[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerClick) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerClick");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerClick) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerClick");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerClick, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerClick::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerClick, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerClick::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDeselect
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDeselect final
{
public:
	TDelegate<void(class ULGUIBaseEventData* EventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1267[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDeselect) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDeselect");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDeselect) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDeselect");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDeselect, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDeselect::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDeselect, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerDeselect::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDown
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDown final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1268[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDown) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDown");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDown) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDown");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDown, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDown::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDown, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerDown::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDrag
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDrag final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1269[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDrag");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDrag) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDrag");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDrag, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDrag::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDrag, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerDrag::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDragDrop
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDragDrop final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_126A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDragDrop) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDragDrop");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDragDrop) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDragDrop");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDragDrop, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDragDrop::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDragDrop, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerDragDrop::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDragEnter
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDragEnter final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_126B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDragEnter) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDragEnter");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDragEnter) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDragEnter");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDragEnter, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDragEnter::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDragEnter, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerDragEnter::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDragExit
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDragExit final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_126C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDragExit) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDragExit");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDragExit) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDragExit");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDragExit, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDragExit::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDragExit, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerDragExit::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerEndDrag
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerEndDrag final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_126D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerEndDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerEndDrag");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerEndDrag) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerEndDrag");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerEndDrag, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerEndDrag::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerEndDrag, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerEndDrag::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerEnter
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerEnter final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_126E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerEnter) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerEnter");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerEnter) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerEnter");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerEnter, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerEnter::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerEnter, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerEnter::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerExit
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerExit final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_126F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerExit) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerExit");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerExit) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerExit");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerExit, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerExit::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerExit, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerExit::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerScroll
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerScroll final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1270[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerScroll) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerScroll");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerScroll) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerScroll");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerScroll, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerScroll::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerScroll, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerScroll::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerSelect
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerSelect final
{
public:
	TDelegate<void(class ULGUIBaseEventData* EventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1271[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerSelect) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerSelect");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerSelect) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerSelect");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerSelect, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerSelect::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerSelect, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerSelect::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerUp
// 0x0020 (0x0020 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerUp final
{
public:
	TDelegate<void(class ULGUIPointerEventData* PointerEventData)> InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1272[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerUp) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerUp");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerUp) == 0x000020, "Wrong size on UIEventTriggerComponent_RegisterOnPointerUp");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerUp, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerUp::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerUp, ReturnValue) == 0x000018, "Member 'UIEventTriggerComponent_RegisterOnPointerUp::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerBeginDrag
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerBeginDrag final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerBeginDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerBeginDrag");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerBeginDrag) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerBeginDrag");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerBeginDrag, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerBeginDrag::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerClick
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerClick final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerClick) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerClick");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerClick) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerClick");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerClick, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerClick::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDeselect
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDeselect final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDeselect) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDeselect");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDeselect) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDeselect");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDeselect, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDeselect::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDown
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDown final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDown) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDown");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDown) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDown");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDown, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDown::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDrag
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDrag final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDrag");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDrag) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDrag");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDrag, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDrag::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDragDrop
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDragDrop final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDragDrop) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDragDrop");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDragDrop) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDragDrop");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDragDrop, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDragDrop::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDragEnter
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDragEnter final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDragEnter) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDragEnter");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDragEnter) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDragEnter");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDragEnter, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDragEnter::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDragExit
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDragExit final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDragExit) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDragExit");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDragExit) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDragExit");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDragExit, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDragExit::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerEndDrag
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerEndDrag final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerEndDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerEndDrag");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerEndDrag) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerEndDrag");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerEndDrag, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerEndDrag::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerEnter
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerEnter final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerEnter) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerEnter");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerEnter) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerEnter");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerEnter, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerEnter::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerExit
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerExit final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerExit) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerExit");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerExit) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerExit");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerExit, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerExit::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerScroll
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerScroll final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerScroll) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerScroll");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerScroll) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerScroll");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerScroll, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerScroll::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerSelect
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerSelect final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerSelect) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerSelect");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerSelect) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerSelect");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerSelect, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerSelect::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerUp
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerUp final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerUp) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerUp");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerUp) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerUp");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerUp, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerUp::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIExtendButtonComponent.SetDelegateForHelpClick
// 0x0014 (0x0014 - 0x0000)
struct UIExtendButtonComponent_SetDelegateForHelpClick final
{
public:
	TDelegate<void(int32 HelpGroupId)>            DelegateObj;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendButtonComponent_SetDelegateForHelpClick) == 0x000004, "Wrong alignment on UIExtendButtonComponent_SetDelegateForHelpClick");
static_assert(sizeof(UIExtendButtonComponent_SetDelegateForHelpClick) == 0x000014, "Wrong size on UIExtendButtonComponent_SetDelegateForHelpClick");
static_assert(offsetof(UIExtendButtonComponent_SetDelegateForHelpClick, DelegateObj) == 0x000000, "Member 'UIExtendButtonComponent_SetDelegateForHelpClick::DelegateObj' has a wrong offset!");

// Function LGUI.UIExtendToggle.SetAllTransitionsEnable
// 0x0001 (0x0001 - 0x0000)
struct UIExtendToggle_SetAllTransitionsEnable final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggle_SetAllTransitionsEnable) == 0x000001, "Wrong alignment on UIExtendToggle_SetAllTransitionsEnable");
static_assert(sizeof(UIExtendToggle_SetAllTransitionsEnable) == 0x000001, "Wrong size on UIExtendToggle_SetAllTransitionsEnable");
static_assert(offsetof(UIExtendToggle_SetAllTransitionsEnable, bIsEnable) == 0x000000, "Member 'UIExtendToggle_SetAllTransitionsEnable::bIsEnable' has a wrong offset!");

// Function LGUI.UIExtendToggle.SetToggleGroup
// 0x0008 (0x0008 - 0x0000)
struct UIExtendToggle_SetToggleGroup final
{
public:
	class AActor*                                 TogGroupActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggle_SetToggleGroup) == 0x000008, "Wrong alignment on UIExtendToggle_SetToggleGroup");
static_assert(sizeof(UIExtendToggle_SetToggleGroup) == 0x000008, "Wrong size on UIExtendToggle_SetToggleGroup");
static_assert(offsetof(UIExtendToggle_SetToggleGroup, TogGroupActor) == 0x000000, "Member 'UIExtendToggle_SetToggleGroup::TogGroupActor' has a wrong offset!");

// Function LGUI.UIExtendToggle.SetToggleState
// 0x0003 (0x0003 - 0x0000)
struct UIExtendToggle_SetToggleState final
{
public:
	EToggleState                                  State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireEvent;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EToggleChangeStateResult                      ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggle_SetToggleState) == 0x000001, "Wrong alignment on UIExtendToggle_SetToggleState");
static_assert(sizeof(UIExtendToggle_SetToggleState) == 0x000003, "Wrong size on UIExtendToggle_SetToggleState");
static_assert(offsetof(UIExtendToggle_SetToggleState, State) == 0x000000, "Member 'UIExtendToggle_SetToggleState::State' has a wrong offset!");
static_assert(offsetof(UIExtendToggle_SetToggleState, bFireEvent) == 0x000001, "Member 'UIExtendToggle_SetToggleState::bFireEvent' has a wrong offset!");
static_assert(offsetof(UIExtendToggle_SetToggleState, ReturnValue) == 0x000002, "Member 'UIExtendToggle_SetToggleState::ReturnValue' has a wrong offset!");

// Function LGUI.UIExtendToggle.SetToggleStateForce
// 0x0003 (0x0003 - 0x0000)
struct UIExtendToggle_SetToggleStateForce final
{
public:
	EToggleState                                  State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireEvent;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngnoreAnim;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggle_SetToggleStateForce) == 0x000001, "Wrong alignment on UIExtendToggle_SetToggleStateForce");
static_assert(sizeof(UIExtendToggle_SetToggleStateForce) == 0x000003, "Wrong size on UIExtendToggle_SetToggleStateForce");
static_assert(offsetof(UIExtendToggle_SetToggleStateForce, State) == 0x000000, "Member 'UIExtendToggle_SetToggleStateForce::State' has a wrong offset!");
static_assert(offsetof(UIExtendToggle_SetToggleStateForce, bFireEvent) == 0x000001, "Member 'UIExtendToggle_SetToggleStateForce::bFireEvent' has a wrong offset!");
static_assert(offsetof(UIExtendToggle_SetToggleStateForce, bIngnoreAnim) == 0x000002, "Member 'UIExtendToggle_SetToggleStateForce::bIngnoreAnim' has a wrong offset!");

// Function LGUI.UIExtendToggle.GetToggleGroup
// 0x0008 (0x0008 - 0x0000)
struct UIExtendToggle_GetToggleGroup final
{
public:
	class UUIExtendToggleGroup*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggle_GetToggleGroup) == 0x000008, "Wrong alignment on UIExtendToggle_GetToggleGroup");
static_assert(sizeof(UIExtendToggle_GetToggleGroup) == 0x000008, "Wrong size on UIExtendToggle_GetToggleGroup");
static_assert(offsetof(UIExtendToggle_GetToggleGroup, ReturnValue) == 0x000000, "Member 'UIExtendToggle_GetToggleGroup::ReturnValue' has a wrong offset!");

// Function LGUI.UIExtendToggle.GetToggleState
// 0x0001 (0x0001 - 0x0000)
struct UIExtendToggle_GetToggleState final
{
public:
	EToggleState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggle_GetToggleState) == 0x000001, "Wrong alignment on UIExtendToggle_GetToggleState");
static_assert(sizeof(UIExtendToggle_GetToggleState) == 0x000001, "Wrong size on UIExtendToggle_GetToggleState");
static_assert(offsetof(UIExtendToggle_GetToggleState, ReturnValue) == 0x000000, "Member 'UIExtendToggle_GetToggleState::ReturnValue' has a wrong offset!");

// Function LGUI.UIExtendToggleGroup.BindOnExtendToggleGroupActive
// 0x0014 (0x0014 - 0x0000)
struct UIExtendToggleGroup_BindOnExtendToggleGroupActive final
{
public:
	TDelegate<void(class UUIExtendToggleGroup* ExtendToggleGroup, bool bCreate)> Delegate;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggleGroup_BindOnExtendToggleGroupActive) == 0x000004, "Wrong alignment on UIExtendToggleGroup_BindOnExtendToggleGroupActive");
static_assert(sizeof(UIExtendToggleGroup_BindOnExtendToggleGroupActive) == 0x000014, "Wrong size on UIExtendToggleGroup_BindOnExtendToggleGroupActive");
static_assert(offsetof(UIExtendToggleGroup_BindOnExtendToggleGroupActive, Delegate) == 0x000000, "Member 'UIExtendToggleGroup_BindOnExtendToggleGroupActive::Delegate' has a wrong offset!");

// Function LGUI.UIExtendToggleGroup.GetAllowNoneSelect
// 0x0001 (0x0001 - 0x0000)
struct UIExtendToggleGroup_GetAllowNoneSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggleGroup_GetAllowNoneSelect) == 0x000001, "Wrong alignment on UIExtendToggleGroup_GetAllowNoneSelect");
static_assert(sizeof(UIExtendToggleGroup_GetAllowNoneSelect) == 0x000001, "Wrong size on UIExtendToggleGroup_GetAllowNoneSelect");
static_assert(offsetof(UIExtendToggleGroup_GetAllowNoneSelect, ReturnValue) == 0x000000, "Member 'UIExtendToggleGroup_GetAllowNoneSelect::ReturnValue' has a wrong offset!");

// Function LGUI.UIExtendToggleGroup.SetAllowNoneSelect
// 0x0001 (0x0001 - 0x0000)
struct UIExtendToggleGroup_SetAllowNoneSelect final
{
public:
	bool                                          bAllowNoneSelection;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggleGroup_SetAllowNoneSelect) == 0x000001, "Wrong alignment on UIExtendToggleGroup_SetAllowNoneSelect");
static_assert(sizeof(UIExtendToggleGroup_SetAllowNoneSelect) == 0x000001, "Wrong size on UIExtendToggleGroup_SetAllowNoneSelect");
static_assert(offsetof(UIExtendToggleGroup_SetAllowNoneSelect, bAllowNoneSelection) == 0x000000, "Member 'UIExtendToggleGroup_SetAllowNoneSelect::bAllowNoneSelection' has a wrong offset!");

// Function LGUI.UIExtendToggleGroup.SetGroupEnable
// 0x0001 (0x0001 - 0x0000)
struct UIExtendToggleGroup_SetGroupEnable final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggleGroup_SetGroupEnable) == 0x000001, "Wrong alignment on UIExtendToggleGroup_SetGroupEnable");
static_assert(sizeof(UIExtendToggleGroup_SetGroupEnable) == 0x000001, "Wrong size on UIExtendToggleGroup_SetGroupEnable");
static_assert(offsetof(UIExtendToggleGroup_SetGroupEnable, bInEnable) == 0x000000, "Member 'UIExtendToggleGroup_SetGroupEnable::bInEnable' has a wrong offset!");

// Function LGUI.UIExtendToggleGroup.GetCurSelection
// 0x0008 (0x0008 - 0x0000)
struct UIExtendToggleGroup_GetCurSelection final
{
public:
	class UUIExtendToggle*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggleGroup_GetCurSelection) == 0x000008, "Wrong alignment on UIExtendToggleGroup_GetCurSelection");
static_assert(sizeof(UIExtendToggleGroup_GetCurSelection) == 0x000008, "Wrong size on UIExtendToggleGroup_GetCurSelection");
static_assert(offsetof(UIExtendToggleGroup_GetCurSelection, ReturnValue) == 0x000000, "Member 'UIExtendToggleGroup_GetCurSelection::ReturnValue' has a wrong offset!");

// Function LGUI.UIExtendToggleSpriteTransition.SetAllStateSprite
// 0x0008 (0x0008 - 0x0000)
struct UIExtendToggleSpriteTransition_SetAllStateSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggleSpriteTransition_SetAllStateSprite) == 0x000008, "Wrong alignment on UIExtendToggleSpriteTransition_SetAllStateSprite");
static_assert(sizeof(UIExtendToggleSpriteTransition_SetAllStateSprite) == 0x000008, "Wrong size on UIExtendToggleSpriteTransition_SetAllStateSprite");
static_assert(offsetof(UIExtendToggleSpriteTransition_SetAllStateSprite, NewSprite) == 0x000000, "Member 'UIExtendToggleSpriteTransition_SetAllStateSprite::NewSprite' has a wrong offset!");

// Function LGUI.UIExtendToggleSpriteTransition.SetStateSprite
// 0x0018 (0x0018 - 0x0000)
struct UIExtendToggleSpriteTransition_SetStateSprite final
{
public:
	EToggleTransitionState                        State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1282[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceNoTriggerOnChange;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1283[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIExtendToggleSpriteTransition_SetStateSprite) == 0x000008, "Wrong alignment on UIExtendToggleSpriteTransition_SetStateSprite");
static_assert(sizeof(UIExtendToggleSpriteTransition_SetStateSprite) == 0x000018, "Wrong size on UIExtendToggleSpriteTransition_SetStateSprite");
static_assert(offsetof(UIExtendToggleSpriteTransition_SetStateSprite, State) == 0x000000, "Member 'UIExtendToggleSpriteTransition_SetStateSprite::State' has a wrong offset!");
static_assert(offsetof(UIExtendToggleSpriteTransition_SetStateSprite, NewSprite) == 0x000008, "Member 'UIExtendToggleSpriteTransition_SetStateSprite::NewSprite' has a wrong offset!");
static_assert(offsetof(UIExtendToggleSpriteTransition_SetStateSprite, ForceNoTriggerOnChange) == 0x000010, "Member 'UIExtendToggleSpriteTransition_SetStateSprite::ForceNoTriggerOnChange' has a wrong offset!");

// Function LGUI.UIExtendToggleTextureTransition.SetAllTransitionStateTexture
// 0x0008 (0x0008 - 0x0000)
struct UIExtendToggleTextureTransition_SetAllTransitionStateTexture final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIExtendToggleTextureTransition_SetAllTransitionStateTexture) == 0x000008, "Wrong alignment on UIExtendToggleTextureTransition_SetAllTransitionStateTexture");
static_assert(sizeof(UIExtendToggleTextureTransition_SetAllTransitionStateTexture) == 0x000008, "Wrong size on UIExtendToggleTextureTransition_SetAllTransitionStateTexture");
static_assert(offsetof(UIExtendToggleTextureTransition_SetAllTransitionStateTexture, Texture) == 0x000000, "Member 'UIExtendToggleTextureTransition_SetAllTransitionStateTexture::Texture' has a wrong offset!");

// Function LGUI.UIExtendToggleTextureTransition.SetTargetStateTexture
// 0x0018 (0x0018 - 0x0000)
struct UIExtendToggleTextureTransition_SetTargetStateTexture final
{
public:
	EToggleTransitionState                        State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1287[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceNoTriggerOnChange;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1288[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIExtendToggleTextureTransition_SetTargetStateTexture) == 0x000008, "Wrong alignment on UIExtendToggleTextureTransition_SetTargetStateTexture");
static_assert(sizeof(UIExtendToggleTextureTransition_SetTargetStateTexture) == 0x000018, "Wrong size on UIExtendToggleTextureTransition_SetTargetStateTexture");
static_assert(offsetof(UIExtendToggleTextureTransition_SetTargetStateTexture, State) == 0x000000, "Member 'UIExtendToggleTextureTransition_SetTargetStateTexture::State' has a wrong offset!");
static_assert(offsetof(UIExtendToggleTextureTransition_SetTargetStateTexture, Texture) == 0x000008, "Member 'UIExtendToggleTextureTransition_SetTargetStateTexture::Texture' has a wrong offset!");
static_assert(offsetof(UIExtendToggleTextureTransition_SetTargetStateTexture, ForceNoTriggerOnChange) == 0x000010, "Member 'UIExtendToggleTextureTransition_SetTargetStateTexture::ForceNoTriggerOnChange' has a wrong offset!");

// Function LGUI.UIFlyoutMenu.CreateFlyoutMenuFromArray
// 0x0040 (0x0040 - 0x0000)
struct UIFlyoutMenu_CreateFlyoutMenuFromArray final
{
public:
	TArray<class FString>                         InItemNameArray;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(int32 InSelectIndex, const class FString& InSelectItem)> InCallback;                                        // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_128B[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AUIBaseActor*                           InParentActor;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InWidth;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlyoutMenuVerticalPosition                   InVerticalPosition;                                // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlyoutMenuHorizontalAlignment                InHorizontalAlign;                                 // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128C[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIFlyoutMenu*                          ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlyoutMenu_CreateFlyoutMenuFromArray) == 0x000008, "Wrong alignment on UIFlyoutMenu_CreateFlyoutMenuFromArray");
static_assert(sizeof(UIFlyoutMenu_CreateFlyoutMenuFromArray) == 0x000040, "Wrong size on UIFlyoutMenu_CreateFlyoutMenuFromArray");
static_assert(offsetof(UIFlyoutMenu_CreateFlyoutMenuFromArray, InItemNameArray) == 0x000000, "Member 'UIFlyoutMenu_CreateFlyoutMenuFromArray::InItemNameArray' has a wrong offset!");
static_assert(offsetof(UIFlyoutMenu_CreateFlyoutMenuFromArray, InCallback) == 0x000010, "Member 'UIFlyoutMenu_CreateFlyoutMenuFromArray::InCallback' has a wrong offset!");
static_assert(offsetof(UIFlyoutMenu_CreateFlyoutMenuFromArray, InParentActor) == 0x000028, "Member 'UIFlyoutMenu_CreateFlyoutMenuFromArray::InParentActor' has a wrong offset!");
static_assert(offsetof(UIFlyoutMenu_CreateFlyoutMenuFromArray, InWidth) == 0x000030, "Member 'UIFlyoutMenu_CreateFlyoutMenuFromArray::InWidth' has a wrong offset!");
static_assert(offsetof(UIFlyoutMenu_CreateFlyoutMenuFromArray, InVerticalPosition) == 0x000034, "Member 'UIFlyoutMenu_CreateFlyoutMenuFromArray::InVerticalPosition' has a wrong offset!");
static_assert(offsetof(UIFlyoutMenu_CreateFlyoutMenuFromArray, InHorizontalAlign) == 0x000035, "Member 'UIFlyoutMenu_CreateFlyoutMenuFromArray::InHorizontalAlign' has a wrong offset!");
static_assert(offsetof(UIFlyoutMenu_CreateFlyoutMenuFromArray, ReturnValue) == 0x000038, "Member 'UIFlyoutMenu_CreateFlyoutMenuFromArray::ReturnValue' has a wrong offset!");

// Function LGUI.UIFrameAnimController.Play
// 0x0001 (0x0001 - 0x0000)
struct UIFrameAnimController_Play final
{
public:
	bool                                          bLooping;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFrameAnimController_Play) == 0x000001, "Wrong alignment on UIFrameAnimController_Play");
static_assert(sizeof(UIFrameAnimController_Play) == 0x000001, "Wrong size on UIFrameAnimController_Play");
static_assert(offsetof(UIFrameAnimController_Play, bLooping) == 0x000000, "Member 'UIFrameAnimController_Play::bLooping' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetAlign final
{
public:
	ELGUILayoutAlignmentType                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetAlign) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetAlign");
static_assert(sizeof(UIHorizontalLayout_SetAlign) == 0x000001, "Wrong size on UIHorizontalLayout_SetAlign");
static_assert(offsetof(UIHorizontalLayout_SetAlign, Value) == 0x000000, "Member 'UIHorizontalLayout_SetAlign::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetExpendChildrenHeight
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetExpendChildrenHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetExpendChildrenHeight) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetExpendChildrenHeight");
static_assert(sizeof(UIHorizontalLayout_SetExpendChildrenHeight) == 0x000001, "Wrong size on UIHorizontalLayout_SetExpendChildrenHeight");
static_assert(offsetof(UIHorizontalLayout_SetExpendChildrenHeight, Value) == 0x000000, "Member 'UIHorizontalLayout_SetExpendChildrenHeight::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetExpendChildrenWidth
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetExpendChildrenWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetExpendChildrenWidth) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetExpendChildrenWidth");
static_assert(sizeof(UIHorizontalLayout_SetExpendChildrenWidth) == 0x000001, "Wrong size on UIHorizontalLayout_SetExpendChildrenWidth");
static_assert(offsetof(UIHorizontalLayout_SetExpendChildrenWidth, Value) == 0x000000, "Member 'UIHorizontalLayout_SetExpendChildrenWidth::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetHeightFitToChildren");
static_assert(sizeof(UIHorizontalLayout_SetHeightFitToChildren) == 0x000001, "Wrong size on UIHorizontalLayout_SetHeightFitToChildren");
static_assert(offsetof(UIHorizontalLayout_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIHorizontalLayout_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIHorizontalLayout_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetPadding) == 0x000004, "Wrong alignment on UIHorizontalLayout_SetPadding");
static_assert(sizeof(UIHorizontalLayout_SetPadding) == 0x000010, "Wrong size on UIHorizontalLayout_SetPadding");
static_assert(offsetof(UIHorizontalLayout_SetPadding, Value) == 0x000000, "Member 'UIHorizontalLayout_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetSpacing
// 0x0004 (0x0004 - 0x0000)
struct UIHorizontalLayout_SetSpacing final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetSpacing) == 0x000004, "Wrong alignment on UIHorizontalLayout_SetSpacing");
static_assert(sizeof(UIHorizontalLayout_SetSpacing) == 0x000004, "Wrong size on UIHorizontalLayout_SetSpacing");
static_assert(offsetof(UIHorizontalLayout_SetSpacing, Value) == 0x000000, "Member 'UIHorizontalLayout_SetSpacing::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetWidthFitToChildren");
static_assert(sizeof(UIHorizontalLayout_SetWidthFitToChildren) == 0x000001, "Wrong size on UIHorizontalLayout_SetWidthFitToChildren");
static_assert(offsetof(UIHorizontalLayout_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIHorizontalLayout_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetActuralRange
// 0x0004 (0x0004 - 0x0000)
struct UIHorizontalLayout_GetActuralRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetActuralRange) == 0x000004, "Wrong alignment on UIHorizontalLayout_GetActuralRange");
static_assert(sizeof(UIHorizontalLayout_GetActuralRange) == 0x000004, "Wrong size on UIHorizontalLayout_GetActuralRange");
static_assert(offsetof(UIHorizontalLayout_GetActuralRange, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetActuralRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetAlign final
{
public:
	ELGUILayoutAlignmentType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetAlign) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetAlign");
static_assert(sizeof(UIHorizontalLayout_GetAlign) == 0x000001, "Wrong size on UIHorizontalLayout_GetAlign");
static_assert(offsetof(UIHorizontalLayout_GetAlign, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetExpendChildrenHeight
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetExpendChildrenHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetExpendChildrenHeight) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetExpendChildrenHeight");
static_assert(sizeof(UIHorizontalLayout_GetExpendChildrenHeight) == 0x000001, "Wrong size on UIHorizontalLayout_GetExpendChildrenHeight");
static_assert(offsetof(UIHorizontalLayout_GetExpendChildrenHeight, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetExpendChildrenHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetExpendChildrenWidth
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetExpendChildrenWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetExpendChildrenWidth) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetExpendChildrenWidth");
static_assert(sizeof(UIHorizontalLayout_GetExpendChildrenWidth) == 0x000001, "Wrong size on UIHorizontalLayout_GetExpendChildrenWidth");
static_assert(offsetof(UIHorizontalLayout_GetExpendChildrenWidth, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetExpendChildrenWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetHeightFitToChildren");
static_assert(sizeof(UIHorizontalLayout_GetHeightFitToChildren) == 0x000001, "Wrong size on UIHorizontalLayout_GetHeightFitToChildren");
static_assert(offsetof(UIHorizontalLayout_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIHorizontalLayout_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetPadding) == 0x000004, "Wrong alignment on UIHorizontalLayout_GetPadding");
static_assert(sizeof(UIHorizontalLayout_GetPadding) == 0x000010, "Wrong size on UIHorizontalLayout_GetPadding");
static_assert(offsetof(UIHorizontalLayout_GetPadding, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetSpacing
// 0x0004 (0x0004 - 0x0000)
struct UIHorizontalLayout_GetSpacing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetSpacing) == 0x000004, "Wrong alignment on UIHorizontalLayout_GetSpacing");
static_assert(sizeof(UIHorizontalLayout_GetSpacing) == 0x000004, "Wrong size on UIHorizontalLayout_GetSpacing");
static_assert(offsetof(UIHorizontalLayout_GetSpacing, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetSpacing::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetWidthFitToChildren");
static_assert(sizeof(UIHorizontalLayout_GetWidthFitToChildren) == 0x000001, "Wrong size on UIHorizontalLayout_GetWidthFitToChildren");
static_assert(offsetof(UIHorizontalLayout_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIInturnAnimController.Play
// 0x0018 (0x0018 - 0x0000)
struct UIInturnAnimController_Play final
{
public:
	class FString                                 NewAnimName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssignNum;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsScrollViewItem;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1296[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIInturnAnimController_Play) == 0x000008, "Wrong alignment on UIInturnAnimController_Play");
static_assert(sizeof(UIInturnAnimController_Play) == 0x000018, "Wrong size on UIInturnAnimController_Play");
static_assert(offsetof(UIInturnAnimController_Play, NewAnimName) == 0x000000, "Member 'UIInturnAnimController_Play::NewAnimName' has a wrong offset!");
static_assert(offsetof(UIInturnAnimController_Play, AssignNum) == 0x000010, "Member 'UIInturnAnimController_Play::AssignNum' has a wrong offset!");
static_assert(offsetof(UIInturnAnimController_Play, bIsScrollViewItem) == 0x000014, "Member 'UIInturnAnimController_Play::bIsScrollViewItem' has a wrong offset!");

// Function LGUI.UIInturnAnimController.PlayWithActors
// 0x0020 (0x0020 - 0x0000)
struct UIInturnAnimController_PlayWithActors final
{
public:
	TArray<TWeakObjectPtr<class AUIBaseActor>>    SpecChildren;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 NewAnimName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInturnAnimController_PlayWithActors) == 0x000008, "Wrong alignment on UIInturnAnimController_PlayWithActors");
static_assert(sizeof(UIInturnAnimController_PlayWithActors) == 0x000020, "Wrong size on UIInturnAnimController_PlayWithActors");
static_assert(offsetof(UIInturnAnimController_PlayWithActors, SpecChildren) == 0x000000, "Member 'UIInturnAnimController_PlayWithActors::SpecChildren' has a wrong offset!");
static_assert(offsetof(UIInturnAnimController_PlayWithActors, NewAnimName) == 0x000010, "Member 'UIInturnAnimController_PlayWithActors::NewAnimName' has a wrong offset!");

// Function LGUI.UIInturnAnimController.PlayWithItems
// 0x0020 (0x0020 - 0x0000)
struct UIInturnAnimController_PlayWithItems final
{
public:
	TArray<class UUIItem*>                        SpecChildren;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FString                                 NewAnimName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInturnAnimController_PlayWithItems) == 0x000008, "Wrong alignment on UIInturnAnimController_PlayWithItems");
static_assert(sizeof(UIInturnAnimController_PlayWithItems) == 0x000020, "Wrong size on UIInturnAnimController_PlayWithItems");
static_assert(offsetof(UIInturnAnimController_PlayWithItems, SpecChildren) == 0x000000, "Member 'UIInturnAnimController_PlayWithItems::SpecChildren' has a wrong offset!");
static_assert(offsetof(UIInturnAnimController_PlayWithItems, NewAnimName) == 0x000010, "Member 'UIInturnAnimController_PlayWithItems::NewAnimName' has a wrong offset!");

// Function LGUI.UIInturnAnimController.SetItemDefaultAlphaZero
// 0x0001 (0x0001 - 0x0000)
struct UIInturnAnimController_SetItemDefaultAlphaZero final
{
public:
	bool                                          IsItemDefaultAlphaZero;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInturnAnimController_SetItemDefaultAlphaZero) == 0x000001, "Wrong alignment on UIInturnAnimController_SetItemDefaultAlphaZero");
static_assert(sizeof(UIInturnAnimController_SetItemDefaultAlphaZero) == 0x000001, "Wrong size on UIInturnAnimController_SetItemDefaultAlphaZero");
static_assert(offsetof(UIInturnAnimController_SetItemDefaultAlphaZero, IsItemDefaultAlphaZero) == 0x000000, "Member 'UIInturnAnimController_SetItemDefaultAlphaZero::IsItemDefaultAlphaZero' has a wrong offset!");

// Function LGUI.UIInturnAnimController.GetItemDefaultAlphaZero
// 0x0001 (0x0001 - 0x0000)
struct UIInturnAnimController_GetItemDefaultAlphaZero final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInturnAnimController_GetItemDefaultAlphaZero) == 0x000001, "Wrong alignment on UIInturnAnimController_GetItemDefaultAlphaZero");
static_assert(sizeof(UIInturnAnimController_GetItemDefaultAlphaZero) == 0x000001, "Wrong size on UIInturnAnimController_GetItemDefaultAlphaZero");
static_assert(offsetof(UIInturnAnimController_GetItemDefaultAlphaZero, ReturnValue) == 0x000000, "Member 'UIInturnAnimController_GetItemDefaultAlphaZero::ReturnValue' has a wrong offset!");

// Function LGUI.UIInturnAnimController.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct UIInturnAnimController_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInturnAnimController_IsPlaying) == 0x000001, "Wrong alignment on UIInturnAnimController_IsPlaying");
static_assert(sizeof(UIInturnAnimController_IsPlaying) == 0x000001, "Wrong size on UIInturnAnimController_IsPlaying");
static_assert(offsetof(UIInturnAnimController_IsPlaying, ReturnValue) == 0x000000, "Member 'UIInturnAnimController_IsPlaying::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutElement.SetConstantSize
// 0x0004 (0x0004 - 0x0000)
struct UILayoutElement_SetConstantSize final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_SetConstantSize) == 0x000004, "Wrong alignment on UILayoutElement_SetConstantSize");
static_assert(sizeof(UILayoutElement_SetConstantSize) == 0x000004, "Wrong size on UILayoutElement_SetConstantSize");
static_assert(offsetof(UILayoutElement_SetConstantSize, Value) == 0x000000, "Member 'UILayoutElement_SetConstantSize::Value' has a wrong offset!");

// Function LGUI.UILayoutElement.SetLayoutType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutElement_SetLayoutType final
{
public:
	ELayoutElementType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_SetLayoutType) == 0x000001, "Wrong alignment on UILayoutElement_SetLayoutType");
static_assert(sizeof(UILayoutElement_SetLayoutType) == 0x000001, "Wrong size on UILayoutElement_SetLayoutType");
static_assert(offsetof(UILayoutElement_SetLayoutType, InType) == 0x000000, "Member 'UILayoutElement_SetLayoutType::InType' has a wrong offset!");

// Function LGUI.UILayoutElement.SetRatioSize
// 0x0004 (0x0004 - 0x0000)
struct UILayoutElement_SetRatioSize final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_SetRatioSize) == 0x000004, "Wrong alignment on UILayoutElement_SetRatioSize");
static_assert(sizeof(UILayoutElement_SetRatioSize) == 0x000004, "Wrong size on UILayoutElement_SetRatioSize");
static_assert(offsetof(UILayoutElement_SetRatioSize, Value) == 0x000000, "Member 'UILayoutElement_SetRatioSize::Value' has a wrong offset!");

// Function LGUI.UILayoutElement.GetConstantSize
// 0x0004 (0x0004 - 0x0000)
struct UILayoutElement_GetConstantSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_GetConstantSize) == 0x000004, "Wrong alignment on UILayoutElement_GetConstantSize");
static_assert(sizeof(UILayoutElement_GetConstantSize) == 0x000004, "Wrong size on UILayoutElement_GetConstantSize");
static_assert(offsetof(UILayoutElement_GetConstantSize, ReturnValue) == 0x000000, "Member 'UILayoutElement_GetConstantSize::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutElement.GetIgnoreLayout
// 0x0001 (0x0001 - 0x0000)
struct UILayoutElement_GetIgnoreLayout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_GetIgnoreLayout) == 0x000001, "Wrong alignment on UILayoutElement_GetIgnoreLayout");
static_assert(sizeof(UILayoutElement_GetIgnoreLayout) == 0x000001, "Wrong size on UILayoutElement_GetIgnoreLayout");
static_assert(offsetof(UILayoutElement_GetIgnoreLayout, ReturnValue) == 0x000000, "Member 'UILayoutElement_GetIgnoreLayout::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutElement.GetLayoutType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutElement_GetLayoutType final
{
public:
	ELayoutElementType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_GetLayoutType) == 0x000001, "Wrong alignment on UILayoutElement_GetLayoutType");
static_assert(sizeof(UILayoutElement_GetLayoutType) == 0x000001, "Wrong size on UILayoutElement_GetLayoutType");
static_assert(offsetof(UILayoutElement_GetLayoutType, ReturnValue) == 0x000000, "Member 'UILayoutElement_GetLayoutType::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutElement.GetRatioSize
// 0x0004 (0x0004 - 0x0000)
struct UILayoutElement_GetRatioSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_GetRatioSize) == 0x000004, "Wrong alignment on UILayoutElement_GetRatioSize");
static_assert(sizeof(UILayoutElement_GetRatioSize) == 0x000004, "Wrong size on UILayoutElement_GetRatioSize");
static_assert(offsetof(UILayoutElement_GetRatioSize, ReturnValue) == 0x000000, "Member 'UILayoutElement_GetRatioSize::ReturnValue' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.RefreshByData
// 0x0010 (0x0010 - 0x0000)
struct UILoopScrollViewComponent_RefreshByData final
{
public:
	class AUIBaseActor*                           UIItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepContentPosition;                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A0[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UILoopScrollViewComponent_RefreshByData) == 0x000008, "Wrong alignment on UILoopScrollViewComponent_RefreshByData");
static_assert(sizeof(UILoopScrollViewComponent_RefreshByData) == 0x000010, "Wrong size on UILoopScrollViewComponent_RefreshByData");
static_assert(offsetof(UILoopScrollViewComponent_RefreshByData, UIItem) == 0x000000, "Member 'UILoopScrollViewComponent_RefreshByData::UIItem' has a wrong offset!");
static_assert(offsetof(UILoopScrollViewComponent_RefreshByData, GridNum) == 0x000008, "Member 'UILoopScrollViewComponent_RefreshByData::GridNum' has a wrong offset!");
static_assert(offsetof(UILoopScrollViewComponent_RefreshByData, KeepContentPosition) == 0x00000C, "Member 'UILoopScrollViewComponent_RefreshByData::KeepContentPosition' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.ScrollToGridIndex
// 0x0004 (0x0004 - 0x0000)
struct UILoopScrollViewComponent_ScrollToGridIndex final
{
public:
	int32                                         GridIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_ScrollToGridIndex) == 0x000004, "Wrong alignment on UILoopScrollViewComponent_ScrollToGridIndex");
static_assert(sizeof(UILoopScrollViewComponent_ScrollToGridIndex) == 0x000004, "Wrong size on UILoopScrollViewComponent_ScrollToGridIndex");
static_assert(offsetof(UILoopScrollViewComponent_ScrollToGridIndex, GridIndex) == 0x000000, "Member 'UILoopScrollViewComponent_ScrollToGridIndex::GridIndex' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.ScrollToNextLine
// 0x0001 (0x0001 - 0x0000)
struct UILoopScrollViewComponent_ScrollToNextLine final
{
public:
	bool                                          bReversed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_ScrollToNextLine) == 0x000001, "Wrong alignment on UILoopScrollViewComponent_ScrollToNextLine");
static_assert(sizeof(UILoopScrollViewComponent_ScrollToNextLine) == 0x000001, "Wrong size on UILoopScrollViewComponent_ScrollToNextLine");
static_assert(offsetof(UILoopScrollViewComponent_ScrollToNextLine, bReversed) == 0x000000, "Member 'UILoopScrollViewComponent_ScrollToNextLine::bReversed' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.SetGridAnimationInterval
// 0x0004 (0x0004 - 0x0000)
struct UILoopScrollViewComponent_SetGridAnimationInterval final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_SetGridAnimationInterval) == 0x000004, "Wrong alignment on UILoopScrollViewComponent_SetGridAnimationInterval");
static_assert(sizeof(UILoopScrollViewComponent_SetGridAnimationInterval) == 0x000004, "Wrong size on UILoopScrollViewComponent_SetGridAnimationInterval");
static_assert(offsetof(UILoopScrollViewComponent_SetGridAnimationInterval, Value) == 0x000000, "Member 'UILoopScrollViewComponent_SetGridAnimationInterval::Value' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.SetGridAnimationStartTime
// 0x0004 (0x0004 - 0x0000)
struct UILoopScrollViewComponent_SetGridAnimationStartTime final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_SetGridAnimationStartTime) == 0x000004, "Wrong alignment on UILoopScrollViewComponent_SetGridAnimationStartTime");
static_assert(sizeof(UILoopScrollViewComponent_SetGridAnimationStartTime) == 0x000004, "Wrong size on UILoopScrollViewComponent_SetGridAnimationStartTime");
static_assert(offsetof(UILoopScrollViewComponent_SetGridAnimationStartTime, Value) == 0x000000, "Member 'UILoopScrollViewComponent_SetGridAnimationStartTime::Value' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.SetInAnimation
// 0x0001 (0x0001 - 0x0000)
struct UILoopScrollViewComponent_SetInAnimation final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_SetInAnimation) == 0x000001, "Wrong alignment on UILoopScrollViewComponent_SetInAnimation");
static_assert(sizeof(UILoopScrollViewComponent_SetInAnimation) == 0x000001, "Wrong size on UILoopScrollViewComponent_SetInAnimation");
static_assert(offsetof(UILoopScrollViewComponent_SetInAnimation, State) == 0x000000, "Member 'UILoopScrollViewComponent_SetInAnimation::State' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.SetNavigationIndex
// 0x0004 (0x0004 - 0x0000)
struct UILoopScrollViewComponent_SetNavigationIndex final
{
public:
	int32                                         GridIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_SetNavigationIndex) == 0x000004, "Wrong alignment on UILoopScrollViewComponent_SetNavigationIndex");
static_assert(sizeof(UILoopScrollViewComponent_SetNavigationIndex) == 0x000004, "Wrong size on UILoopScrollViewComponent_SetNavigationIndex");
static_assert(offsetof(UILoopScrollViewComponent_SetNavigationIndex, GridIndex) == 0x000000, "Member 'UILoopScrollViewComponent_SetNavigationIndex::GridIndex' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.GetGrid
// 0x0010 (0x0010 - 0x0000)
struct UILoopScrollViewComponent_GetGrid final
{
public:
	int32                                         GridIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AUIBaseActor*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_GetGrid) == 0x000008, "Wrong alignment on UILoopScrollViewComponent_GetGrid");
static_assert(sizeof(UILoopScrollViewComponent_GetGrid) == 0x000010, "Wrong size on UILoopScrollViewComponent_GetGrid");
static_assert(offsetof(UILoopScrollViewComponent_GetGrid, GridIndex) == 0x000000, "Member 'UILoopScrollViewComponent_GetGrid::GridIndex' has a wrong offset!");
static_assert(offsetof(UILoopScrollViewComponent_GetGrid, ReturnValue) == 0x000008, "Member 'UILoopScrollViewComponent_GetGrid::ReturnValue' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.GetGridAnimationInterval
// 0x0004 (0x0004 - 0x0000)
struct UILoopScrollViewComponent_GetGridAnimationInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_GetGridAnimationInterval) == 0x000004, "Wrong alignment on UILoopScrollViewComponent_GetGridAnimationInterval");
static_assert(sizeof(UILoopScrollViewComponent_GetGridAnimationInterval) == 0x000004, "Wrong size on UILoopScrollViewComponent_GetGridAnimationInterval");
static_assert(offsetof(UILoopScrollViewComponent_GetGridAnimationInterval, ReturnValue) == 0x000000, "Member 'UILoopScrollViewComponent_GetGridAnimationInterval::ReturnValue' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.GetGridAnimationStartTime
// 0x0004 (0x0004 - 0x0000)
struct UILoopScrollViewComponent_GetGridAnimationStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_GetGridAnimationStartTime) == 0x000004, "Wrong alignment on UILoopScrollViewComponent_GetGridAnimationStartTime");
static_assert(sizeof(UILoopScrollViewComponent_GetGridAnimationStartTime) == 0x000004, "Wrong size on UILoopScrollViewComponent_GetGridAnimationStartTime");
static_assert(offsetof(UILoopScrollViewComponent_GetGridAnimationStartTime, ReturnValue) == 0x000000, "Member 'UILoopScrollViewComponent_GetGridAnimationStartTime::ReturnValue' has a wrong offset!");

// Function LGUI.UILoopScrollViewComponent.GetInAnimation
// 0x0001 (0x0001 - 0x0000)
struct UILoopScrollViewComponent_GetInAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoopScrollViewComponent_GetInAnimation) == 0x000001, "Wrong alignment on UILoopScrollViewComponent_GetInAnimation");
static_assert(sizeof(UILoopScrollViewComponent_GetInAnimation) == 0x000001, "Wrong size on UILoopScrollViewComponent_GetInAnimation");
static_assert(offsetof(UILoopScrollViewComponent_GetInAnimation, ReturnValue) == 0x000000, "Member 'UILoopScrollViewComponent_GetInAnimation::ReturnValue' has a wrong offset!");

// Function LGUI.UINavigationGroupComponent.SetNavigateGroupDelegate
// 0x0014 (0x0014 - 0x0000)
struct UINavigationGroupComponent_SetNavigateGroupDelegate final
{
public:
	TDelegate<void(class UUINavigationGroupComponent* NavigationGroupComponent, EUINavigationGroupMode Mode)> Delegate;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationGroupComponent_SetNavigateGroupDelegate) == 0x000004, "Wrong alignment on UINavigationGroupComponent_SetNavigateGroupDelegate");
static_assert(sizeof(UINavigationGroupComponent_SetNavigateGroupDelegate) == 0x000014, "Wrong size on UINavigationGroupComponent_SetNavigateGroupDelegate");
static_assert(offsetof(UINavigationGroupComponent_SetNavigateGroupDelegate, Delegate) == 0x000000, "Member 'UINavigationGroupComponent_SetNavigateGroupDelegate::Delegate' has a wrong offset!");

// Function LGUI.UINavigationGroupComponent.SetNavigateTolerance
// 0x0004 (0x0004 - 0x0000)
struct UINavigationGroupComponent_SetNavigateTolerance final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationGroupComponent_SetNavigateTolerance) == 0x000004, "Wrong alignment on UINavigationGroupComponent_SetNavigateTolerance");
static_assert(sizeof(UINavigationGroupComponent_SetNavigateTolerance) == 0x000004, "Wrong size on UINavigationGroupComponent_SetNavigateTolerance");
static_assert(offsetof(UINavigationGroupComponent_SetNavigateTolerance, Tolerance) == 0x000000, "Member 'UINavigationGroupComponent_SetNavigateTolerance::Tolerance' has a wrong offset!");

// Function LGUI.UINavigationGroupComponent.GetRootNavigationGrade
// 0x0010 (0x0010 - 0x0000)
struct UINavigationGroupComponent_GetRootNavigationGrade final
{
public:
	TArray<class UUISelectableComponent*>         Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationGroupComponent_GetRootNavigationGrade) == 0x000008, "Wrong alignment on UINavigationGroupComponent_GetRootNavigationGrade");
static_assert(sizeof(UINavigationGroupComponent_GetRootNavigationGrade) == 0x000010, "Wrong size on UINavigationGroupComponent_GetRootNavigationGrade");
static_assert(offsetof(UINavigationGroupComponent_GetRootNavigationGrade, Result) == 0x000000, "Member 'UINavigationGroupComponent_GetRootNavigationGrade::Result' has a wrong offset!");

// Function LGUI.UINiagara.ActivateSystem
// 0x0001 (0x0001 - 0x0000)
struct UINiagara_ActivateSystem final
{
public:
	bool                                          Reset;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_ActivateSystem) == 0x000001, "Wrong alignment on UINiagara_ActivateSystem");
static_assert(sizeof(UINiagara_ActivateSystem) == 0x000001, "Wrong size on UINiagara_ActivateSystem");
static_assert(offsetof(UINiagara_ActivateSystem, Reset) == 0x000000, "Member 'UINiagara_ActivateSystem::Reset' has a wrong offset!");

// Function LGUI.UINiagara.GetIsActive
// 0x0001 (0x0001 - 0x0000)
struct UINiagara_GetIsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_GetIsActive) == 0x000001, "Wrong alignment on UINiagara_GetIsActive");
static_assert(sizeof(UINiagara_GetIsActive) == 0x000001, "Wrong size on UINiagara_GetIsActive");
static_assert(offsetof(UINiagara_GetIsActive, ReturnValue) == 0x000000, "Member 'UINiagara_GetIsActive::ReturnValue' has a wrong offset!");

// Function LGUI.UINiagara.IsCircleClipEnable
// 0x0001 (0x0001 - 0x0000)
struct UINiagara_IsCircleClipEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_IsCircleClipEnable) == 0x000001, "Wrong alignment on UINiagara_IsCircleClipEnable");
static_assert(sizeof(UINiagara_IsCircleClipEnable) == 0x000001, "Wrong size on UINiagara_IsCircleClipEnable");
static_assert(offsetof(UINiagara_IsCircleClipEnable, ReturnValue) == 0x000000, "Member 'UINiagara_IsCircleClipEnable::ReturnValue' has a wrong offset!");

// Function LGUI.UINiagara.SetCircleClipEnable
// 0x0001 (0x0001 - 0x0000)
struct UINiagara_SetCircleClipEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_SetCircleClipEnable) == 0x000001, "Wrong alignment on UINiagara_SetCircleClipEnable");
static_assert(sizeof(UINiagara_SetCircleClipEnable) == 0x000001, "Wrong size on UINiagara_SetCircleClipEnable");
static_assert(offsetof(UINiagara_SetCircleClipEnable, Enable) == 0x000000, "Member 'UINiagara_SetCircleClipEnable::Enable' has a wrong offset!");

// Function LGUI.UINiagara.SetCircleClipParameters
// 0x0010 (0x0010 - 0x0000)
struct UINiagara_SetCircleClipParameters final
{
public:
	struct FCircleClipParameters                  NewCircleClipParameters;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_SetCircleClipParameters) == 0x000004, "Wrong alignment on UINiagara_SetCircleClipParameters");
static_assert(sizeof(UINiagara_SetCircleClipParameters) == 0x000010, "Wrong size on UINiagara_SetCircleClipParameters");
static_assert(offsetof(UINiagara_SetCircleClipParameters, NewCircleClipParameters) == 0x000000, "Member 'UINiagara_SetCircleClipParameters::NewCircleClipParameters' has a wrong offset!");

// Function LGUI.UINiagara.SetNiagaraEmitterCustomTexture
// 0x0028 (0x0028 - 0x0000)
struct UINiagara_SetNiagaraEmitterCustomTexture final
{
public:
	class FString                                 InEmitterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVariableName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               InTexture;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_SetNiagaraEmitterCustomTexture) == 0x000008, "Wrong alignment on UINiagara_SetNiagaraEmitterCustomTexture");
static_assert(sizeof(UINiagara_SetNiagaraEmitterCustomTexture) == 0x000028, "Wrong size on UINiagara_SetNiagaraEmitterCustomTexture");
static_assert(offsetof(UINiagara_SetNiagaraEmitterCustomTexture, InEmitterName) == 0x000000, "Member 'UINiagara_SetNiagaraEmitterCustomTexture::InEmitterName' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraEmitterCustomTexture, InVariableName) == 0x000010, "Member 'UINiagara_SetNiagaraEmitterCustomTexture::InVariableName' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraEmitterCustomTexture, InTexture) == 0x000020, "Member 'UINiagara_SetNiagaraEmitterCustomTexture::InTexture' has a wrong offset!");

// Function LGUI.UINiagara.SetNiagaraEmitterFloatParam
// 0x0028 (0x0028 - 0x0000)
struct UINiagara_SetNiagaraEmitterFloatParam final
{
public:
	class FString                                 InEmitterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVariableName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12AB[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINiagara_SetNiagaraEmitterFloatParam) == 0x000008, "Wrong alignment on UINiagara_SetNiagaraEmitterFloatParam");
static_assert(sizeof(UINiagara_SetNiagaraEmitterFloatParam) == 0x000028, "Wrong size on UINiagara_SetNiagaraEmitterFloatParam");
static_assert(offsetof(UINiagara_SetNiagaraEmitterFloatParam, InEmitterName) == 0x000000, "Member 'UINiagara_SetNiagaraEmitterFloatParam::InEmitterName' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraEmitterFloatParam, InVariableName) == 0x000010, "Member 'UINiagara_SetNiagaraEmitterFloatParam::InVariableName' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraEmitterFloatParam, InValue) == 0x000020, "Member 'UINiagara_SetNiagaraEmitterFloatParam::InValue' has a wrong offset!");

// Function LGUI.UINiagara.SetNiagaraEmitterVectorParam
// 0x0030 (0x0030 - 0x0000)
struct UINiagara_SetNiagaraEmitterVectorParam final
{
public:
	class FString                                 InEmitterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVariableName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               InVector;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_SetNiagaraEmitterVectorParam) == 0x000010, "Wrong alignment on UINiagara_SetNiagaraEmitterVectorParam");
static_assert(sizeof(UINiagara_SetNiagaraEmitterVectorParam) == 0x000030, "Wrong size on UINiagara_SetNiagaraEmitterVectorParam");
static_assert(offsetof(UINiagara_SetNiagaraEmitterVectorParam, InEmitterName) == 0x000000, "Member 'UINiagara_SetNiagaraEmitterVectorParam::InEmitterName' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraEmitterVectorParam, InVariableName) == 0x000010, "Member 'UINiagara_SetNiagaraEmitterVectorParam::InVariableName' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraEmitterVectorParam, InVector) == 0x000020, "Member 'UINiagara_SetNiagaraEmitterVectorParam::InVector' has a wrong offset!");

// Function LGUI.UINiagara.SetNiagaraSystem
// 0x0008 (0x0008 - 0x0000)
struct UINiagara_SetNiagaraSystem final
{
public:
	class UNiagaraSystem*                         InSystem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_SetNiagaraSystem) == 0x000008, "Wrong alignment on UINiagara_SetNiagaraSystem");
static_assert(sizeof(UINiagara_SetNiagaraSystem) == 0x000008, "Wrong size on UINiagara_SetNiagaraSystem");
static_assert(offsetof(UINiagara_SetNiagaraSystem, InSystem) == 0x000000, "Member 'UINiagara_SetNiagaraSystem::InSystem' has a wrong offset!");

// Function LGUI.UINiagara.SetNiagaraUIActive
// 0x0002 (0x0002 - 0x0000)
struct UINiagara_SetNiagaraUIActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInResetNiagara;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_SetNiagaraUIActive) == 0x000001, "Wrong alignment on UINiagara_SetNiagaraUIActive");
static_assert(sizeof(UINiagara_SetNiagaraUIActive) == 0x000002, "Wrong size on UINiagara_SetNiagaraUIActive");
static_assert(offsetof(UINiagara_SetNiagaraUIActive, Active) == 0x000000, "Member 'UINiagara_SetNiagaraUIActive::Active' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraUIActive, bInResetNiagara) == 0x000001, "Member 'UINiagara_SetNiagaraUIActive::bInResetNiagara' has a wrong offset!");

// Function LGUI.UINiagara.SetNiagaraVarFloat
// 0x0018 (0x0018 - 0x0000)
struct UINiagara_SetNiagaraVarFloat final
{
public:
	class FString                                 VarName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12AC[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINiagara_SetNiagaraVarFloat) == 0x000008, "Wrong alignment on UINiagara_SetNiagaraVarFloat");
static_assert(sizeof(UINiagara_SetNiagaraVarFloat) == 0x000018, "Wrong size on UINiagara_SetNiagaraVarFloat");
static_assert(offsetof(UINiagara_SetNiagaraVarFloat, VarName) == 0x000000, "Member 'UINiagara_SetNiagaraVarFloat::VarName' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraVarFloat, Value) == 0x000010, "Member 'UINiagara_SetNiagaraVarFloat::Value' has a wrong offset!");

// Function LGUI.UINiagara.SetNiagaraVarLinearColor
// 0x0020 (0x0020 - 0x0000)
struct UINiagara_SetNiagaraVarLinearColor final
{
public:
	class FString                                 VarName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_SetNiagaraVarLinearColor) == 0x000008, "Wrong alignment on UINiagara_SetNiagaraVarLinearColor");
static_assert(sizeof(UINiagara_SetNiagaraVarLinearColor) == 0x000020, "Wrong size on UINiagara_SetNiagaraVarLinearColor");
static_assert(offsetof(UINiagara_SetNiagaraVarLinearColor, VarName) == 0x000000, "Member 'UINiagara_SetNiagaraVarLinearColor::VarName' has a wrong offset!");
static_assert(offsetof(UINiagara_SetNiagaraVarLinearColor, Value) == 0x000010, "Member 'UINiagara_SetNiagaraVarLinearColor::Value' has a wrong offset!");

// Function LGUI.UINiagara.GetCircleClipParameters
// 0x0010 (0x0010 - 0x0000)
struct UINiagara_GetCircleClipParameters final
{
public:
	struct FCircleClipParameters                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINiagara_GetCircleClipParameters) == 0x000004, "Wrong alignment on UINiagara_GetCircleClipParameters");
static_assert(sizeof(UINiagara_GetCircleClipParameters) == 0x000010, "Wrong size on UINiagara_GetCircleClipParameters");
static_assert(offsetof(UINiagara_GetCircleClipParameters, ReturnValue) == 0x000000, "Member 'UINiagara_GetCircleClipParameters::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.EndAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIPolygon_EndAngleTo final
{
public:
	float                                         EndValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   EaseType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B0[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_EndAngleTo) == 0x000008, "Wrong alignment on UIPolygon_EndAngleTo");
static_assert(sizeof(UIPolygon_EndAngleTo) == 0x000018, "Wrong size on UIPolygon_EndAngleTo");
static_assert(offsetof(UIPolygon_EndAngleTo, EndValue) == 0x000000, "Member 'UIPolygon_EndAngleTo::EndValue' has a wrong offset!");
static_assert(offsetof(UIPolygon_EndAngleTo, Duration) == 0x000004, "Member 'UIPolygon_EndAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIPolygon_EndAngleTo, Delay) == 0x000008, "Member 'UIPolygon_EndAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIPolygon_EndAngleTo, EaseType) == 0x00000C, "Member 'UIPolygon_EndAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(UIPolygon_EndAngleTo, ReturnValue) == 0x000010, "Member 'UIPolygon_EndAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_SetEndAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetEndAngle) == 0x000004, "Wrong alignment on UIPolygon_SetEndAngle");
static_assert(sizeof(UIPolygon_SetEndAngle) == 0x000004, "Wrong size on UIPolygon_SetEndAngle");
static_assert(offsetof(UIPolygon_SetEndAngle, Value) == 0x000000, "Member 'UIPolygon_SetEndAngle::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetSides
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_SetSides final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetSides) == 0x000004, "Wrong alignment on UIPolygon_SetSides");
static_assert(sizeof(UIPolygon_SetSides) == 0x000004, "Wrong size on UIPolygon_SetSides");
static_assert(offsetof(UIPolygon_SetSides, Value) == 0x000000, "Member 'UIPolygon_SetSides::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_SetStartAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetStartAngle) == 0x000004, "Wrong alignment on UIPolygon_SetStartAngle");
static_assert(sizeof(UIPolygon_SetStartAngle) == 0x000004, "Wrong size on UIPolygon_SetStartAngle");
static_assert(offsetof(UIPolygon_SetStartAngle, Value) == 0x000000, "Member 'UIPolygon_SetStartAngle::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetUVType
// 0x0001 (0x0001 - 0x0000)
struct UIPolygon_SetUVType final
{
public:
	EUIPolygonUVType                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetUVType) == 0x000001, "Wrong alignment on UIPolygon_SetUVType");
static_assert(sizeof(UIPolygon_SetUVType) == 0x000001, "Wrong size on UIPolygon_SetUVType");
static_assert(offsetof(UIPolygon_SetUVType, Value) == 0x000000, "Member 'UIPolygon_SetUVType::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetVertexOffsetArray
// 0x0010 (0x0010 - 0x0000)
struct UIPolygon_SetVertexOffsetArray final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetVertexOffsetArray) == 0x000008, "Wrong alignment on UIPolygon_SetVertexOffsetArray");
static_assert(sizeof(UIPolygon_SetVertexOffsetArray) == 0x000010, "Wrong size on UIPolygon_SetVertexOffsetArray");
static_assert(offsetof(UIPolygon_SetVertexOffsetArray, Value) == 0x000000, "Member 'UIPolygon_SetVertexOffsetArray::Value' has a wrong offset!");

// Function LGUI.UIPolygon.StartAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIPolygon_StartAngleTo final
{
public:
	float                                         EndValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   EaseType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B1[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_StartAngleTo) == 0x000008, "Wrong alignment on UIPolygon_StartAngleTo");
static_assert(sizeof(UIPolygon_StartAngleTo) == 0x000018, "Wrong size on UIPolygon_StartAngleTo");
static_assert(offsetof(UIPolygon_StartAngleTo, EndValue) == 0x000000, "Member 'UIPolygon_StartAngleTo::EndValue' has a wrong offset!");
static_assert(offsetof(UIPolygon_StartAngleTo, Duration) == 0x000004, "Member 'UIPolygon_StartAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIPolygon_StartAngleTo, Delay) == 0x000008, "Member 'UIPolygon_StartAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIPolygon_StartAngleTo, EaseType) == 0x00000C, "Member 'UIPolygon_StartAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(UIPolygon_StartAngleTo, ReturnValue) == 0x000010, "Member 'UIPolygon_StartAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_GetEndAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetEndAngle) == 0x000004, "Wrong alignment on UIPolygon_GetEndAngle");
static_assert(sizeof(UIPolygon_GetEndAngle) == 0x000004, "Wrong size on UIPolygon_GetEndAngle");
static_assert(offsetof(UIPolygon_GetEndAngle, ReturnValue) == 0x000000, "Member 'UIPolygon_GetEndAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetSides
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_GetSides final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetSides) == 0x000004, "Wrong alignment on UIPolygon_GetSides");
static_assert(sizeof(UIPolygon_GetSides) == 0x000004, "Wrong size on UIPolygon_GetSides");
static_assert(offsetof(UIPolygon_GetSides, ReturnValue) == 0x000000, "Member 'UIPolygon_GetSides::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_GetStartAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetStartAngle) == 0x000004, "Wrong alignment on UIPolygon_GetStartAngle");
static_assert(sizeof(UIPolygon_GetStartAngle) == 0x000004, "Wrong size on UIPolygon_GetStartAngle");
static_assert(offsetof(UIPolygon_GetStartAngle, ReturnValue) == 0x000000, "Member 'UIPolygon_GetStartAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetUVType
// 0x0001 (0x0001 - 0x0000)
struct UIPolygon_GetUVType final
{
public:
	EUIPolygonUVType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetUVType) == 0x000001, "Wrong alignment on UIPolygon_GetUVType");
static_assert(sizeof(UIPolygon_GetUVType) == 0x000001, "Wrong size on UIPolygon_GetUVType");
static_assert(offsetof(UIPolygon_GetUVType, ReturnValue) == 0x000000, "Member 'UIPolygon_GetUVType::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetVertexOffsetArray
// 0x0010 (0x0010 - 0x0000)
struct UIPolygon_GetVertexOffsetArray final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetVertexOffsetArray) == 0x000008, "Wrong alignment on UIPolygon_GetVertexOffsetArray");
static_assert(sizeof(UIPolygon_GetVertexOffsetArray) == 0x000010, "Wrong size on UIPolygon_GetVertexOffsetArray");
static_assert(offsetof(UIPolygon_GetVertexOffsetArray, ReturnValue) == 0x000000, "Member 'UIPolygon_GetVertexOffsetArray::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.EndAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIPolygonLine_EndAngleTo final
{
public:
	float                                         EndValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   EaseType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B4[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_EndAngleTo) == 0x000008, "Wrong alignment on UIPolygonLine_EndAngleTo");
static_assert(sizeof(UIPolygonLine_EndAngleTo) == 0x000018, "Wrong size on UIPolygonLine_EndAngleTo");
static_assert(offsetof(UIPolygonLine_EndAngleTo, EndValue) == 0x000000, "Member 'UIPolygonLine_EndAngleTo::EndValue' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_EndAngleTo, Duration) == 0x000004, "Member 'UIPolygonLine_EndAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_EndAngleTo, Delay) == 0x000008, "Member 'UIPolygonLine_EndAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_EndAngleTo, EaseType) == 0x00000C, "Member 'UIPolygonLine_EndAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_EndAngleTo, ReturnValue) == 0x000010, "Member 'UIPolygonLine_EndAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_SetEndAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetEndAngle) == 0x000004, "Wrong alignment on UIPolygonLine_SetEndAngle");
static_assert(sizeof(UIPolygonLine_SetEndAngle) == 0x000004, "Wrong size on UIPolygonLine_SetEndAngle");
static_assert(offsetof(UIPolygonLine_SetEndAngle, Value) == 0x000000, "Member 'UIPolygonLine_SetEndAngle::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetSides
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_SetSides final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetSides) == 0x000004, "Wrong alignment on UIPolygonLine_SetSides");
static_assert(sizeof(UIPolygonLine_SetSides) == 0x000004, "Wrong size on UIPolygonLine_SetSides");
static_assert(offsetof(UIPolygonLine_SetSides, Value) == 0x000000, "Member 'UIPolygonLine_SetSides::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_SetStartAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetStartAngle) == 0x000004, "Wrong alignment on UIPolygonLine_SetStartAngle");
static_assert(sizeof(UIPolygonLine_SetStartAngle) == 0x000004, "Wrong size on UIPolygonLine_SetStartAngle");
static_assert(offsetof(UIPolygonLine_SetStartAngle, Value) == 0x000000, "Member 'UIPolygonLine_SetStartAngle::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetVertexOffsetArray
// 0x0010 (0x0010 - 0x0000)
struct UIPolygonLine_SetVertexOffsetArray final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetVertexOffsetArray) == 0x000008, "Wrong alignment on UIPolygonLine_SetVertexOffsetArray");
static_assert(sizeof(UIPolygonLine_SetVertexOffsetArray) == 0x000010, "Wrong size on UIPolygonLine_SetVertexOffsetArray");
static_assert(offsetof(UIPolygonLine_SetVertexOffsetArray, Value) == 0x000000, "Member 'UIPolygonLine_SetVertexOffsetArray::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.StartAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIPolygonLine_StartAngleTo final
{
public:
	float                                         EndValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   EaseType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B5[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_StartAngleTo) == 0x000008, "Wrong alignment on UIPolygonLine_StartAngleTo");
static_assert(sizeof(UIPolygonLine_StartAngleTo) == 0x000018, "Wrong size on UIPolygonLine_StartAngleTo");
static_assert(offsetof(UIPolygonLine_StartAngleTo, EndValue) == 0x000000, "Member 'UIPolygonLine_StartAngleTo::EndValue' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_StartAngleTo, Duration) == 0x000004, "Member 'UIPolygonLine_StartAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_StartAngleTo, Delay) == 0x000008, "Member 'UIPolygonLine_StartAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_StartAngleTo, EaseType) == 0x00000C, "Member 'UIPolygonLine_StartAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_StartAngleTo, ReturnValue) == 0x000010, "Member 'UIPolygonLine_StartAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_GetEndAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetEndAngle) == 0x000004, "Wrong alignment on UIPolygonLine_GetEndAngle");
static_assert(sizeof(UIPolygonLine_GetEndAngle) == 0x000004, "Wrong size on UIPolygonLine_GetEndAngle");
static_assert(offsetof(UIPolygonLine_GetEndAngle, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetEndAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetSides
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_GetSides final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetSides) == 0x000004, "Wrong alignment on UIPolygonLine_GetSides");
static_assert(sizeof(UIPolygonLine_GetSides) == 0x000004, "Wrong size on UIPolygonLine_GetSides");
static_assert(offsetof(UIPolygonLine_GetSides, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetSides::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_GetStartAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetStartAngle) == 0x000004, "Wrong alignment on UIPolygonLine_GetStartAngle");
static_assert(sizeof(UIPolygonLine_GetStartAngle) == 0x000004, "Wrong size on UIPolygonLine_GetStartAngle");
static_assert(offsetof(UIPolygonLine_GetStartAngle, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetStartAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetVertexOffsetArray
// 0x0010 (0x0010 - 0x0000)
struct UIPolygonLine_GetVertexOffsetArray final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetVertexOffsetArray) == 0x000008, "Wrong alignment on UIPolygonLine_GetVertexOffsetArray");
static_assert(sizeof(UIPolygonLine_GetVertexOffsetArray) == 0x000010, "Wrong size on UIPolygonLine_GetVertexOffsetArray");
static_assert(offsetof(UIPolygonLine_GetVertexOffsetArray, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetVertexOffsetArray::ReturnValue' has a wrong offset!");

// Function LGUI.UISafeZone.SetWidthAndHeightRadio
// 0x0010 (0x0010 - 0x0000)
struct UISafeZone_SetWidthAndHeightRadio final
{
public:
	float                                         Left;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Top;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bottom;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISafeZone_SetWidthAndHeightRadio) == 0x000004, "Wrong alignment on UISafeZone_SetWidthAndHeightRadio");
static_assert(sizeof(UISafeZone_SetWidthAndHeightRadio) == 0x000010, "Wrong size on UISafeZone_SetWidthAndHeightRadio");
static_assert(offsetof(UISafeZone_SetWidthAndHeightRadio, Left) == 0x000000, "Member 'UISafeZone_SetWidthAndHeightRadio::Left' has a wrong offset!");
static_assert(offsetof(UISafeZone_SetWidthAndHeightRadio, Right) == 0x000004, "Member 'UISafeZone_SetWidthAndHeightRadio::Right' has a wrong offset!");
static_assert(offsetof(UISafeZone_SetWidthAndHeightRadio, Top) == 0x000008, "Member 'UISafeZone_SetWidthAndHeightRadio::Top' has a wrong offset!");
static_assert(offsetof(UISafeZone_SetWidthAndHeightRadio, Bottom) == 0x00000C, "Member 'UISafeZone_SetWidthAndHeightRadio::Bottom' has a wrong offset!");

// Function LGUI.UISelectableGroupComponent.OnComponentHighlighted
// 0x0008 (0x0008 - 0x0000)
struct UISelectableGroupComponent_OnComponentHighlighted final
{
public:
	class UUISelectableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableGroupComponent_OnComponentHighlighted) == 0x000008, "Wrong alignment on UISelectableGroupComponent_OnComponentHighlighted");
static_assert(sizeof(UISelectableGroupComponent_OnComponentHighlighted) == 0x000008, "Wrong size on UISelectableGroupComponent_OnComponentHighlighted");
static_assert(offsetof(UISelectableGroupComponent_OnComponentHighlighted, Component) == 0x000000, "Member 'UISelectableGroupComponent_OnComponentHighlighted::Component' has a wrong offset!");

// Function LGUI.UISelectableGroupComponent.OnComponentSelected
// 0x0008 (0x0008 - 0x0000)
struct UISelectableGroupComponent_OnComponentSelected final
{
public:
	class UUISelectableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableGroupComponent_OnComponentSelected) == 0x000008, "Wrong alignment on UISelectableGroupComponent_OnComponentSelected");
static_assert(sizeof(UISelectableGroupComponent_OnComponentSelected) == 0x000008, "Wrong size on UISelectableGroupComponent_OnComponentSelected");
static_assert(offsetof(UISelectableGroupComponent_OnComponentSelected, Component) == 0x000000, "Member 'UISelectableGroupComponent_OnComponentSelected::Component' has a wrong offset!");

// Function LGUI.UISelectableStateHolder.SetAllTransitionsEnable
// 0x0001 (0x0001 - 0x0000)
struct UISelectableStateHolder_SetAllTransitionsEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableStateHolder_SetAllTransitionsEnable) == 0x000001, "Wrong alignment on UISelectableStateHolder_SetAllTransitionsEnable");
static_assert(sizeof(UISelectableStateHolder_SetAllTransitionsEnable) == 0x000001, "Wrong size on UISelectableStateHolder_SetAllTransitionsEnable");
static_assert(offsetof(UISelectableStateHolder_SetAllTransitionsEnable, bEnable) == 0x000000, "Member 'UISelectableStateHolder_SetAllTransitionsEnable::bEnable' has a wrong offset!");

// Function LGUI.UISizeControlByAspectRatio.SetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByAspectRatio_SetAspectRatio final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByAspectRatio_SetAspectRatio) == 0x000004, "Wrong alignment on UISizeControlByAspectRatio_SetAspectRatio");
static_assert(sizeof(UISizeControlByAspectRatio_SetAspectRatio) == 0x000004, "Wrong size on UISizeControlByAspectRatio_SetAspectRatio");
static_assert(offsetof(UISizeControlByAspectRatio_SetAspectRatio, Value) == 0x000000, "Member 'UISizeControlByAspectRatio_SetAspectRatio::Value' has a wrong offset!");

// Function LGUI.UISizeControlByAspectRatio.SetControlMode
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByAspectRatio_SetControlMode final
{
public:
	EUISizeControlByAspectRatioMode               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByAspectRatio_SetControlMode) == 0x000001, "Wrong alignment on UISizeControlByAspectRatio_SetControlMode");
static_assert(sizeof(UISizeControlByAspectRatio_SetControlMode) == 0x000001, "Wrong size on UISizeControlByAspectRatio_SetControlMode");
static_assert(offsetof(UISizeControlByAspectRatio_SetControlMode, Value) == 0x000000, "Member 'UISizeControlByAspectRatio_SetControlMode::Value' has a wrong offset!");

// Function LGUI.UISizeControlByAspectRatio.GetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByAspectRatio_GetAspectRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByAspectRatio_GetAspectRatio) == 0x000004, "Wrong alignment on UISizeControlByAspectRatio_GetAspectRatio");
static_assert(sizeof(UISizeControlByAspectRatio_GetAspectRatio) == 0x000004, "Wrong size on UISizeControlByAspectRatio_GetAspectRatio");
static_assert(offsetof(UISizeControlByAspectRatio_GetAspectRatio, ReturnValue) == 0x000000, "Member 'UISizeControlByAspectRatio_GetAspectRatio::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByAspectRatio.GetControlMode
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByAspectRatio_GetControlMode final
{
public:
	EUISizeControlByAspectRatioMode               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByAspectRatio_GetControlMode) == 0x000001, "Wrong alignment on UISizeControlByAspectRatio_GetControlMode");
static_assert(sizeof(UISizeControlByAspectRatio_GetControlMode) == 0x000001, "Wrong size on UISizeControlByAspectRatio_GetControlMode");
static_assert(offsetof(UISizeControlByAspectRatio_GetControlMode, ReturnValue) == 0x000000, "Member 'UISizeControlByAspectRatio_GetControlMode::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetAdditionalHeight
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByOther_SetAdditionalHeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetAdditionalHeight) == 0x000004, "Wrong alignment on UISizeControlByOther_SetAdditionalHeight");
static_assert(sizeof(UISizeControlByOther_SetAdditionalHeight) == 0x000004, "Wrong size on UISizeControlByOther_SetAdditionalHeight");
static_assert(offsetof(UISizeControlByOther_SetAdditionalHeight, Value) == 0x000000, "Member 'UISizeControlByOther_SetAdditionalHeight::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetAdditionalWidth
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByOther_SetAdditionalWidth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetAdditionalWidth) == 0x000004, "Wrong alignment on UISizeControlByOther_SetAdditionalWidth");
static_assert(sizeof(UISizeControlByOther_SetAdditionalWidth) == 0x000004, "Wrong size on UISizeControlByOther_SetAdditionalWidth");
static_assert(offsetof(UISizeControlByOther_SetAdditionalWidth, Value) == 0x000000, "Member 'UISizeControlByOther_SetAdditionalWidth::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetControlHeight
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByOther_SetControlHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetControlHeight) == 0x000001, "Wrong alignment on UISizeControlByOther_SetControlHeight");
static_assert(sizeof(UISizeControlByOther_SetControlHeight) == 0x000001, "Wrong size on UISizeControlByOther_SetControlHeight");
static_assert(offsetof(UISizeControlByOther_SetControlHeight, Value) == 0x000000, "Member 'UISizeControlByOther_SetControlHeight::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetControlWidth
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByOther_SetControlWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetControlWidth) == 0x000001, "Wrong alignment on UISizeControlByOther_SetControlWidth");
static_assert(sizeof(UISizeControlByOther_SetControlWidth) == 0x000001, "Wrong size on UISizeControlByOther_SetControlWidth");
static_assert(offsetof(UISizeControlByOther_SetControlWidth, Value) == 0x000000, "Member 'UISizeControlByOther_SetControlWidth::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct UISizeControlByOther_SetTargetActor final
{
public:
	class AUIBaseActor*                           NewTargetActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetTargetActor) == 0x000008, "Wrong alignment on UISizeControlByOther_SetTargetActor");
static_assert(sizeof(UISizeControlByOther_SetTargetActor) == 0x000008, "Wrong size on UISizeControlByOther_SetTargetActor");
static_assert(offsetof(UISizeControlByOther_SetTargetActor, NewTargetActor) == 0x000000, "Member 'UISizeControlByOther_SetTargetActor::NewTargetActor' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetAdditionalHeight
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByOther_GetAdditionalHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetAdditionalHeight) == 0x000004, "Wrong alignment on UISizeControlByOther_GetAdditionalHeight");
static_assert(sizeof(UISizeControlByOther_GetAdditionalHeight) == 0x000004, "Wrong size on UISizeControlByOther_GetAdditionalHeight");
static_assert(offsetof(UISizeControlByOther_GetAdditionalHeight, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetAdditionalHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetAdditionalWidth
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByOther_GetAdditionalWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetAdditionalWidth) == 0x000004, "Wrong alignment on UISizeControlByOther_GetAdditionalWidth");
static_assert(sizeof(UISizeControlByOther_GetAdditionalWidth) == 0x000004, "Wrong size on UISizeControlByOther_GetAdditionalWidth");
static_assert(offsetof(UISizeControlByOther_GetAdditionalWidth, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetAdditionalWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetControlHeight
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByOther_GetControlHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetControlHeight) == 0x000001, "Wrong alignment on UISizeControlByOther_GetControlHeight");
static_assert(sizeof(UISizeControlByOther_GetControlHeight) == 0x000001, "Wrong size on UISizeControlByOther_GetControlHeight");
static_assert(offsetof(UISizeControlByOther_GetControlHeight, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetControlHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetControlWidth
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByOther_GetControlWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetControlWidth) == 0x000001, "Wrong alignment on UISizeControlByOther_GetControlWidth");
static_assert(sizeof(UISizeControlByOther_GetControlWidth) == 0x000001, "Wrong size on UISizeControlByOther_GetControlWidth");
static_assert(offsetof(UISizeControlByOther_GetControlWidth, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetControlWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct UISizeControlByOther_GetTargetActor final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetTargetActor) == 0x000008, "Wrong alignment on UISizeControlByOther_GetTargetActor");
static_assert(sizeof(UISizeControlByOther_GetTargetActor) == 0x000008, "Wrong size on UISizeControlByOther_GetTargetActor");
static_assert(offsetof(UISizeControlByOther_GetTargetActor, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetTargetActor::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.SetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct UISprite_SetFillAmount final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetFillAmount) == 0x000004, "Wrong alignment on UISprite_SetFillAmount");
static_assert(sizeof(UISprite_SetFillAmount) == 0x000004, "Wrong size on UISprite_SetFillAmount");
static_assert(offsetof(UISprite_SetFillAmount, NewValue) == 0x000000, "Member 'UISprite_SetFillAmount::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetFillDirectionFlip
// 0x0001 (0x0001 - 0x0000)
struct UISprite_SetFillDirectionFlip final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetFillDirectionFlip) == 0x000001, "Wrong alignment on UISprite_SetFillDirectionFlip");
static_assert(sizeof(UISprite_SetFillDirectionFlip) == 0x000001, "Wrong size on UISprite_SetFillDirectionFlip");
static_assert(offsetof(UISprite_SetFillDirectionFlip, NewValue) == 0x000000, "Member 'UISprite_SetFillDirectionFlip::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct UISprite_SetFillMethod final
{
public:
	EUISpriteFillMethod                           NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetFillMethod) == 0x000001, "Wrong alignment on UISprite_SetFillMethod");
static_assert(sizeof(UISprite_SetFillMethod) == 0x000001, "Wrong size on UISprite_SetFillMethod");
static_assert(offsetof(UISprite_SetFillMethod, NewValue) == 0x000000, "Member 'UISprite_SetFillMethod::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetFillOrigin
// 0x0001 (0x0001 - 0x0000)
struct UISprite_SetFillOrigin final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetFillOrigin) == 0x000001, "Wrong alignment on UISprite_SetFillOrigin");
static_assert(sizeof(UISprite_SetFillOrigin) == 0x000001, "Wrong size on UISprite_SetFillOrigin");
static_assert(offsetof(UISprite_SetFillOrigin, NewValue) == 0x000000, "Member 'UISprite_SetFillOrigin::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetOffsetX
// 0x0004 (0x0004 - 0x0000)
struct UISprite_SetOffsetX final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetOffsetX) == 0x000004, "Wrong alignment on UISprite_SetOffsetX");
static_assert(sizeof(UISprite_SetOffsetX) == 0x000004, "Wrong size on UISprite_SetOffsetX");
static_assert(offsetof(UISprite_SetOffsetX, NewValue) == 0x000000, "Member 'UISprite_SetOffsetX::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetOffsetY
// 0x0004 (0x0004 - 0x0000)
struct UISprite_SetOffsetY final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetOffsetY) == 0x000004, "Wrong alignment on UISprite_SetOffsetY");
static_assert(sizeof(UISprite_SetOffsetY) == 0x000004, "Wrong size on UISprite_SetOffsetY");
static_assert(offsetof(UISprite_SetOffsetY, NewValue) == 0x000000, "Member 'UISprite_SetOffsetY::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetSpriteType
// 0x0001 (0x0001 - 0x0000)
struct UISprite_SetSpriteType final
{
public:
	EUISpriteType                                 NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetSpriteType) == 0x000001, "Wrong alignment on UISprite_SetSpriteType");
static_assert(sizeof(UISprite_SetSpriteType) == 0x000001, "Wrong size on UISprite_SetSpriteType");
static_assert(offsetof(UISprite_SetSpriteType, NewType) == 0x000000, "Member 'UISprite_SetSpriteType::NewType' has a wrong offset!");

// Function LGUI.UISprite.SetTileOffset
// 0x0010 (0x0010 - 0x0000)
struct UISprite_SetTileOffset final
{
public:
	struct FLinearColor                           In;                                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetTileOffset) == 0x000004, "Wrong alignment on UISprite_SetTileOffset");
static_assert(sizeof(UISprite_SetTileOffset) == 0x000010, "Wrong size on UISprite_SetTileOffset");
static_assert(offsetof(UISprite_SetTileOffset, In) == 0x000000, "Member 'UISprite_SetTileOffset::In' has a wrong offset!");

// Function LGUI.UISprite.SetTileX
// 0x0004 (0x0004 - 0x0000)
struct UISprite_SetTileX final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetTileX) == 0x000004, "Wrong alignment on UISprite_SetTileX");
static_assert(sizeof(UISprite_SetTileX) == 0x000004, "Wrong size on UISprite_SetTileX");
static_assert(offsetof(UISprite_SetTileX, NewValue) == 0x000000, "Member 'UISprite_SetTileX::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetTileY
// 0x0004 (0x0004 - 0x0000)
struct UISprite_SetTileY final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetTileY) == 0x000004, "Wrong alignment on UISprite_SetTileY");
static_assert(sizeof(UISprite_SetTileY) == 0x000004, "Wrong size on UISprite_SetTileY");
static_assert(offsetof(UISprite_SetTileY, NewValue) == 0x000000, "Member 'UISprite_SetTileY::NewValue' has a wrong offset!");

// Function LGUI.UISprite.GetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct UISprite_GetFillAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetFillAmount) == 0x000004, "Wrong alignment on UISprite_GetFillAmount");
static_assert(sizeof(UISprite_GetFillAmount) == 0x000004, "Wrong size on UISprite_GetFillAmount");
static_assert(offsetof(UISprite_GetFillAmount, ReturnValue) == 0x000000, "Member 'UISprite_GetFillAmount::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.GetFillDirectionFlip
// 0x0001 (0x0001 - 0x0000)
struct UISprite_GetFillDirectionFlip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetFillDirectionFlip) == 0x000001, "Wrong alignment on UISprite_GetFillDirectionFlip");
static_assert(sizeof(UISprite_GetFillDirectionFlip) == 0x000001, "Wrong size on UISprite_GetFillDirectionFlip");
static_assert(offsetof(UISprite_GetFillDirectionFlip, ReturnValue) == 0x000000, "Member 'UISprite_GetFillDirectionFlip::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.GetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct UISprite_GetFillMethod final
{
public:
	EUISpriteFillMethod                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetFillMethod) == 0x000001, "Wrong alignment on UISprite_GetFillMethod");
static_assert(sizeof(UISprite_GetFillMethod) == 0x000001, "Wrong size on UISprite_GetFillMethod");
static_assert(offsetof(UISprite_GetFillMethod, ReturnValue) == 0x000000, "Member 'UISprite_GetFillMethod::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.GetFillOrigin
// 0x0001 (0x0001 - 0x0000)
struct UISprite_GetFillOrigin final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetFillOrigin) == 0x000001, "Wrong alignment on UISprite_GetFillOrigin");
static_assert(sizeof(UISprite_GetFillOrigin) == 0x000001, "Wrong size on UISprite_GetFillOrigin");
static_assert(offsetof(UISprite_GetFillOrigin, ReturnValue) == 0x000000, "Member 'UISprite_GetFillOrigin::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.GetSpriteType
// 0x0001 (0x0001 - 0x0000)
struct UISprite_GetSpriteType final
{
public:
	EUISpriteType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetSpriteType) == 0x000001, "Wrong alignment on UISprite_GetSpriteType");
static_assert(sizeof(UISprite_GetSpriteType) == 0x000001, "Wrong size on UISprite_GetSpriteType");
static_assert(offsetof(UISprite_GetSpriteType, ReturnValue) == 0x000000, "Member 'UISprite_GetSpriteType::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteBase_BP.OnCreateGeometry_BP
// 0x0010 (0x0010 - 0x0000)
struct UISpriteBase_BP_OnCreateGeometry_BP final
{
public:
	class ULGUICreateGeometryHelper*              InCreateGeometryHelper;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUISpriteData_BaseObject*             InSpriteData;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteBase_BP_OnCreateGeometry_BP) == 0x000008, "Wrong alignment on UISpriteBase_BP_OnCreateGeometry_BP");
static_assert(sizeof(UISpriteBase_BP_OnCreateGeometry_BP) == 0x000010, "Wrong size on UISpriteBase_BP_OnCreateGeometry_BP");
static_assert(offsetof(UISpriteBase_BP_OnCreateGeometry_BP, InCreateGeometryHelper) == 0x000000, "Member 'UISpriteBase_BP_OnCreateGeometry_BP::InCreateGeometryHelper' has a wrong offset!");
static_assert(offsetof(UISpriteBase_BP_OnCreateGeometry_BP, InSpriteData) == 0x000008, "Member 'UISpriteBase_BP_OnCreateGeometry_BP::InSpriteData' has a wrong offset!");

// Function LGUI.UISpriteBase_BP.OnUpdateGeometry_BP
// 0x0018 (0x0018 - 0x0000)
struct UISpriteBase_BP_OnUpdateGeometry_BP final
{
public:
	class ULGUIUpdateGeometryHelper*              InUpdateGoemetryHelper;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUISpriteData_BaseObject*             InSpriteData;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexPositionChanged;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexUVChanged;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexColorChanged;                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C6[0x5];                                     // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISpriteBase_BP_OnUpdateGeometry_BP) == 0x000008, "Wrong alignment on UISpriteBase_BP_OnUpdateGeometry_BP");
static_assert(sizeof(UISpriteBase_BP_OnUpdateGeometry_BP) == 0x000018, "Wrong size on UISpriteBase_BP_OnUpdateGeometry_BP");
static_assert(offsetof(UISpriteBase_BP_OnUpdateGeometry_BP, InUpdateGoemetryHelper) == 0x000000, "Member 'UISpriteBase_BP_OnUpdateGeometry_BP::InUpdateGoemetryHelper' has a wrong offset!");
static_assert(offsetof(UISpriteBase_BP_OnUpdateGeometry_BP, InSpriteData) == 0x000008, "Member 'UISpriteBase_BP_OnUpdateGeometry_BP::InSpriteData' has a wrong offset!");
static_assert(offsetof(UISpriteBase_BP_OnUpdateGeometry_BP, InVertexPositionChanged) == 0x000010, "Member 'UISpriteBase_BP_OnUpdateGeometry_BP::InVertexPositionChanged' has a wrong offset!");
static_assert(offsetof(UISpriteBase_BP_OnUpdateGeometry_BP, InVertexUVChanged) == 0x000011, "Member 'UISpriteBase_BP_OnUpdateGeometry_BP::InVertexUVChanged' has a wrong offset!");
static_assert(offsetof(UISpriteBase_BP_OnUpdateGeometry_BP, InVertexColorChanged) == 0x000012, "Member 'UISpriteBase_BP_OnUpdateGeometry_BP::InVertexColorChanged' has a wrong offset!");

// Function LGUI.UISpriteSheetTexturePlayer.SetHeightCount
// 0x0004 (0x0004 - 0x0000)
struct UISpriteSheetTexturePlayer_SetHeightCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSheetTexturePlayer_SetHeightCount) == 0x000004, "Wrong alignment on UISpriteSheetTexturePlayer_SetHeightCount");
static_assert(sizeof(UISpriteSheetTexturePlayer_SetHeightCount) == 0x000004, "Wrong size on UISpriteSheetTexturePlayer_SetHeightCount");
static_assert(offsetof(UISpriteSheetTexturePlayer_SetHeightCount, Value) == 0x000000, "Member 'UISpriteSheetTexturePlayer_SetHeightCount::Value' has a wrong offset!");

// Function LGUI.UISpriteSheetTexturePlayer.SetWidthCount
// 0x0004 (0x0004 - 0x0000)
struct UISpriteSheetTexturePlayer_SetWidthCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSheetTexturePlayer_SetWidthCount) == 0x000004, "Wrong alignment on UISpriteSheetTexturePlayer_SetWidthCount");
static_assert(sizeof(UISpriteSheetTexturePlayer_SetWidthCount) == 0x000004, "Wrong size on UISpriteSheetTexturePlayer_SetWidthCount");
static_assert(offsetof(UISpriteSheetTexturePlayer_SetWidthCount, Value) == 0x000000, "Member 'UISpriteSheetTexturePlayer_SetWidthCount::Value' has a wrong offset!");

// Function LGUI.UISpriteSheetTexturePlayer.GetHeightCount
// 0x0004 (0x0004 - 0x0000)
struct UISpriteSheetTexturePlayer_GetHeightCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSheetTexturePlayer_GetHeightCount) == 0x000004, "Wrong alignment on UISpriteSheetTexturePlayer_GetHeightCount");
static_assert(sizeof(UISpriteSheetTexturePlayer_GetHeightCount) == 0x000004, "Wrong size on UISpriteSheetTexturePlayer_GetHeightCount");
static_assert(offsetof(UISpriteSheetTexturePlayer_GetHeightCount, ReturnValue) == 0x000000, "Member 'UISpriteSheetTexturePlayer_GetHeightCount::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteSheetTexturePlayer.GetWidthCount
// 0x0004 (0x0004 - 0x0000)
struct UISpriteSheetTexturePlayer_GetWidthCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSheetTexturePlayer_GetWidthCount) == 0x000004, "Wrong alignment on UISpriteSheetTexturePlayer_GetWidthCount");
static_assert(sizeof(UISpriteSheetTexturePlayer_GetWidthCount) == 0x000004, "Wrong size on UISpriteSheetTexturePlayer_GetWidthCount");
static_assert(offsetof(UISpriteSheetTexturePlayer_GetWidthCount, ReturnValue) == 0x000000, "Member 'UISpriteSheetTexturePlayer_GetWidthCount::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteTransition.SetAllTransitionSprite
// 0x0008 (0x0008 - 0x0000)
struct UISpriteTransition_SetAllTransitionSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteTransition_SetAllTransitionSprite) == 0x000008, "Wrong alignment on UISpriteTransition_SetAllTransitionSprite");
static_assert(sizeof(UISpriteTransition_SetAllTransitionSprite) == 0x000008, "Wrong size on UISpriteTransition_SetAllTransitionSprite");
static_assert(offsetof(UISpriteTransition_SetAllTransitionSprite, NewSprite) == 0x000000, "Member 'UISpriteTransition_SetAllTransitionSprite::NewSprite' has a wrong offset!");

// Function LGUI.UISpriteTransition.SetStateSprite
// 0x0010 (0x0010 - 0x0000)
struct UISpriteTransition_SetStateSprite final
{
public:
	EUISelectableSelectionState                   State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteTransition_SetStateSprite) == 0x000008, "Wrong alignment on UISpriteTransition_SetStateSprite");
static_assert(sizeof(UISpriteTransition_SetStateSprite) == 0x000010, "Wrong size on UISpriteTransition_SetStateSprite");
static_assert(offsetof(UISpriteTransition_SetStateSprite, State) == 0x000000, "Member 'UISpriteTransition_SetStateSprite::State' has a wrong offset!");
static_assert(offsetof(UISpriteTransition_SetStateSprite, NewSprite) == 0x000008, "Member 'UISpriteTransition_SetStateSprite::NewSprite' has a wrong offset!");

// Function LGUI.UIStaticMesh.SetMesh
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMesh_SetMesh final
{
public:
	class UStaticMesh*                            Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_SetMesh) == 0x000008, "Wrong alignment on UIStaticMesh_SetMesh");
static_assert(sizeof(UIStaticMesh_SetMesh) == 0x000008, "Wrong size on UIStaticMesh_SetMesh");
static_assert(offsetof(UIStaticMesh_SetMesh, Value) == 0x000000, "Member 'UIStaticMesh_SetMesh::Value' has a wrong offset!");

// Function LGUI.UIStaticMesh.SetVertexColorType
// 0x0001 (0x0001 - 0x0000)
struct UIStaticMesh_SetVertexColorType final
{
public:
	EUIStaticMeshVertexColorType                  Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_SetVertexColorType) == 0x000001, "Wrong alignment on UIStaticMesh_SetVertexColorType");
static_assert(sizeof(UIStaticMesh_SetVertexColorType) == 0x000001, "Wrong size on UIStaticMesh_SetVertexColorType");
static_assert(offsetof(UIStaticMesh_SetVertexColorType, Value) == 0x000000, "Member 'UIStaticMesh_SetVertexColorType::Value' has a wrong offset!");

// Function LGUI.UIStaticMesh.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMesh_GetMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_GetMesh) == 0x000008, "Wrong alignment on UIStaticMesh_GetMesh");
static_assert(sizeof(UIStaticMesh_GetMesh) == 0x000008, "Wrong size on UIStaticMesh_GetMesh");
static_assert(offsetof(UIStaticMesh_GetMesh, ReturnValue) == 0x000000, "Member 'UIStaticMesh_GetMesh::ReturnValue' has a wrong offset!");

// Function LGUI.UIStaticMesh.GetVertexColorType
// 0x0001 (0x0001 - 0x0000)
struct UIStaticMesh_GetVertexColorType final
{
public:
	EUIStaticMeshVertexColorType                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_GetVertexColorType) == 0x000001, "Wrong alignment on UIStaticMesh_GetVertexColorType");
static_assert(sizeof(UIStaticMesh_GetVertexColorType) == 0x000001, "Wrong size on UIStaticMesh_GetVertexColorType");
static_assert(offsetof(UIStaticMesh_GetVertexColorType, ReturnValue) == 0x000000, "Member 'UIStaticMesh_GetVertexColorType::ReturnValue' has a wrong offset!");

// Function LGUI.UITextureBase_BP.OnCreateGeometry_BP
// 0x0008 (0x0008 - 0x0000)
struct UITextureBase_BP_OnCreateGeometry_BP final
{
public:
	class ULGUICreateGeometryHelper*              InCreateGeometryHelper;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureBase_BP_OnCreateGeometry_BP) == 0x000008, "Wrong alignment on UITextureBase_BP_OnCreateGeometry_BP");
static_assert(sizeof(UITextureBase_BP_OnCreateGeometry_BP) == 0x000008, "Wrong size on UITextureBase_BP_OnCreateGeometry_BP");
static_assert(offsetof(UITextureBase_BP_OnCreateGeometry_BP, InCreateGeometryHelper) == 0x000000, "Member 'UITextureBase_BP_OnCreateGeometry_BP::InCreateGeometryHelper' has a wrong offset!");

// Function LGUI.UITextureBase_BP.OnUpdateGeometry_BP
// 0x0010 (0x0010 - 0x0000)
struct UITextureBase_BP_OnUpdateGeometry_BP final
{
public:
	class ULGUIUpdateGeometryHelper*              InUpdateGoemetryHelper;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexPositionChanged;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexUVChanged;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexColorChanged;                              // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CB[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITextureBase_BP_OnUpdateGeometry_BP) == 0x000008, "Wrong alignment on UITextureBase_BP_OnUpdateGeometry_BP");
static_assert(sizeof(UITextureBase_BP_OnUpdateGeometry_BP) == 0x000010, "Wrong size on UITextureBase_BP_OnUpdateGeometry_BP");
static_assert(offsetof(UITextureBase_BP_OnUpdateGeometry_BP, InUpdateGoemetryHelper) == 0x000000, "Member 'UITextureBase_BP_OnUpdateGeometry_BP::InUpdateGoemetryHelper' has a wrong offset!");
static_assert(offsetof(UITextureBase_BP_OnUpdateGeometry_BP, InVertexPositionChanged) == 0x000008, "Member 'UITextureBase_BP_OnUpdateGeometry_BP::InVertexPositionChanged' has a wrong offset!");
static_assert(offsetof(UITextureBase_BP_OnUpdateGeometry_BP, InVertexUVChanged) == 0x000009, "Member 'UITextureBase_BP_OnUpdateGeometry_BP::InVertexUVChanged' has a wrong offset!");
static_assert(offsetof(UITextureBase_BP_OnUpdateGeometry_BP, InVertexColorChanged) == 0x00000A, "Member 'UITextureBase_BP_OnUpdateGeometry_BP::InVertexColorChanged' has a wrong offset!");

// Function LGUI.TextureTransitionUtil.SetTextureByTransitionInfo
// 0x0028 (0x0028 - 0x0000)
struct TextureTransitionUtil_SetTextureByTransitionInfo final
{
public:
	class UUITexture*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTextureTransitionOfState              Info;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextureTransitionUtil_SetTextureByTransitionInfo) == 0x000008, "Wrong alignment on TextureTransitionUtil_SetTextureByTransitionInfo");
static_assert(sizeof(TextureTransitionUtil_SetTextureByTransitionInfo) == 0x000028, "Wrong size on TextureTransitionUtil_SetTextureByTransitionInfo");
static_assert(offsetof(TextureTransitionUtil_SetTextureByTransitionInfo, Texture) == 0x000000, "Member 'TextureTransitionUtil_SetTextureByTransitionInfo::Texture' has a wrong offset!");
static_assert(offsetof(TextureTransitionUtil_SetTextureByTransitionInfo, Info) == 0x000008, "Member 'TextureTransitionUtil_SetTextureByTransitionInfo::Info' has a wrong offset!");

// Function LGUI.TextureTransitionUtil.SetTextureSize
// 0x0018 (0x0018 - 0x0000)
struct TextureTransitionUtil_SetTextureSize final
{
public:
	class UUITexture*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSnapSize;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CC[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CD[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextureTransitionUtil_SetTextureSize) == 0x000008, "Wrong alignment on TextureTransitionUtil_SetTextureSize");
static_assert(sizeof(TextureTransitionUtil_SetTextureSize) == 0x000018, "Wrong size on TextureTransitionUtil_SetTextureSize");
static_assert(offsetof(TextureTransitionUtil_SetTextureSize, Texture) == 0x000000, "Member 'TextureTransitionUtil_SetTextureSize::Texture' has a wrong offset!");
static_assert(offsetof(TextureTransitionUtil_SetTextureSize, bIsSnapSize) == 0x000008, "Member 'TextureTransitionUtil_SetTextureSize::bIsSnapSize' has a wrong offset!");
static_assert(offsetof(TextureTransitionUtil_SetTextureSize, Width) == 0x00000C, "Member 'TextureTransitionUtil_SetTextureSize::Width' has a wrong offset!");
static_assert(offsetof(TextureTransitionUtil_SetTextureSize, Height) == 0x000010, "Member 'TextureTransitionUtil_SetTextureSize::Height' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.OnComponentHighlighted
// 0x0008 (0x0008 - 0x0000)
struct UIToggleGroupComponent_OnComponentHighlighted final
{
public:
	class UUIToggleComponent*                     Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_OnComponentHighlighted) == 0x000008, "Wrong alignment on UIToggleGroupComponent_OnComponentHighlighted");
static_assert(sizeof(UIToggleGroupComponent_OnComponentHighlighted) == 0x000008, "Wrong size on UIToggleGroupComponent_OnComponentHighlighted");
static_assert(offsetof(UIToggleGroupComponent_OnComponentHighlighted, Component) == 0x000000, "Member 'UIToggleGroupComponent_OnComponentHighlighted::Component' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.OnComponentSelected
// 0x0008 (0x0008 - 0x0000)
struct UIToggleGroupComponent_OnComponentSelected final
{
public:
	class UUIToggleComponent*                     Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_OnComponentSelected) == 0x000008, "Wrong alignment on UIToggleGroupComponent_OnComponentSelected");
static_assert(sizeof(UIToggleGroupComponent_OnComponentSelected) == 0x000008, "Wrong size on UIToggleGroupComponent_OnComponentSelected");
static_assert(offsetof(UIToggleGroupComponent_OnComponentSelected, Component) == 0x000000, "Member 'UIToggleGroupComponent_OnComponentSelected::Component' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.RegisterToggleEvent
// 0x0020 (0x0020 - 0x0000)
struct UIToggleGroupComponent_RegisterToggleEvent final
{
public:
	TDelegate<void(int32 Index)>                  InDelegate;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_RegisterToggleEvent) == 0x000008, "Wrong alignment on UIToggleGroupComponent_RegisterToggleEvent");
static_assert(sizeof(UIToggleGroupComponent_RegisterToggleEvent) == 0x000020, "Wrong size on UIToggleGroupComponent_RegisterToggleEvent");
static_assert(offsetof(UIToggleGroupComponent_RegisterToggleEvent, InDelegate) == 0x000000, "Member 'UIToggleGroupComponent_RegisterToggleEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIToggleGroupComponent_RegisterToggleEvent, ReturnValue) == 0x000018, "Member 'UIToggleGroupComponent_RegisterToggleEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.SetAllowNoneSelected
// 0x0001 (0x0001 - 0x0000)
struct UIToggleGroupComponent_SetAllowNoneSelected final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_SetAllowNoneSelected) == 0x000001, "Wrong alignment on UIToggleGroupComponent_SetAllowNoneSelected");
static_assert(sizeof(UIToggleGroupComponent_SetAllowNoneSelected) == 0x000001, "Wrong size on UIToggleGroupComponent_SetAllowNoneSelected");
static_assert(offsetof(UIToggleGroupComponent_SetAllowNoneSelected, InBool) == 0x000000, "Member 'UIToggleGroupComponent_SetAllowNoneSelected::InBool' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.SetSelection
// 0x0008 (0x0008 - 0x0000)
struct UIToggleGroupComponent_SetSelection final
{
public:
	class UUIToggleComponent*                     Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_SetSelection) == 0x000008, "Wrong alignment on UIToggleGroupComponent_SetSelection");
static_assert(sizeof(UIToggleGroupComponent_SetSelection) == 0x000008, "Wrong size on UIToggleGroupComponent_SetSelection");
static_assert(offsetof(UIToggleGroupComponent_SetSelection, Target) == 0x000000, "Member 'UIToggleGroupComponent_SetSelection::Target' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.UnregisterToggleEvent
// 0x0008 (0x0008 - 0x0000)
struct UIToggleGroupComponent_UnregisterToggleEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_UnregisterToggleEvent) == 0x000008, "Wrong alignment on UIToggleGroupComponent_UnregisterToggleEvent");
static_assert(sizeof(UIToggleGroupComponent_UnregisterToggleEvent) == 0x000008, "Wrong size on UIToggleGroupComponent_UnregisterToggleEvent");
static_assert(offsetof(UIToggleGroupComponent_UnregisterToggleEvent, InDelegateHandle) == 0x000000, "Member 'UIToggleGroupComponent_UnregisterToggleEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.GetAllowNoneSelected
// 0x0001 (0x0001 - 0x0000)
struct UIToggleGroupComponent_GetAllowNoneSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_GetAllowNoneSelected) == 0x000001, "Wrong alignment on UIToggleGroupComponent_GetAllowNoneSelected");
static_assert(sizeof(UIToggleGroupComponent_GetAllowNoneSelected) == 0x000001, "Wrong size on UIToggleGroupComponent_GetAllowNoneSelected");
static_assert(offsetof(UIToggleGroupComponent_GetAllowNoneSelected, ReturnValue) == 0x000000, "Member 'UIToggleGroupComponent_GetAllowNoneSelected::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.GetSelectedItem
// 0x0008 (0x0008 - 0x0000)
struct UIToggleGroupComponent_GetSelectedItem final
{
public:
	class UUIToggleComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_GetSelectedItem) == 0x000008, "Wrong alignment on UIToggleGroupComponent_GetSelectedItem");
static_assert(sizeof(UIToggleGroupComponent_GetSelectedItem) == 0x000008, "Wrong size on UIToggleGroupComponent_GetSelectedItem");
static_assert(offsetof(UIToggleGroupComponent_GetSelectedItem, ReturnValue) == 0x000000, "Member 'UIToggleGroupComponent_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.GetToggleByIndex
// 0x0010 (0x0010 - 0x0000)
struct UIToggleGroupComponent_GetToggleByIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIToggleComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_GetToggleByIndex) == 0x000008, "Wrong alignment on UIToggleGroupComponent_GetToggleByIndex");
static_assert(sizeof(UIToggleGroupComponent_GetToggleByIndex) == 0x000010, "Wrong size on UIToggleGroupComponent_GetToggleByIndex");
static_assert(offsetof(UIToggleGroupComponent_GetToggleByIndex, InIndex) == 0x000000, "Member 'UIToggleGroupComponent_GetToggleByIndex::InIndex' has a wrong offset!");
static_assert(offsetof(UIToggleGroupComponent_GetToggleByIndex, ReturnValue) == 0x000008, "Member 'UIToggleGroupComponent_GetToggleByIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.GetToggleIndex
// 0x0010 (0x0010 - 0x0000)
struct UIToggleGroupComponent_GetToggleIndex final
{
public:
	const class UUIToggleComponent*               InComp;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIToggleGroupComponent_GetToggleIndex) == 0x000008, "Wrong alignment on UIToggleGroupComponent_GetToggleIndex");
static_assert(sizeof(UIToggleGroupComponent_GetToggleIndex) == 0x000010, "Wrong size on UIToggleGroupComponent_GetToggleIndex");
static_assert(offsetof(UIToggleGroupComponent_GetToggleIndex, InComp) == 0x000000, "Member 'UIToggleGroupComponent_GetToggleIndex::InComp' has a wrong offset!");
static_assert(offsetof(UIToggleGroupComponent_GetToggleIndex, ReturnValue) == 0x000008, "Member 'UIToggleGroupComponent_GetToggleIndex::ReturnValue' has a wrong offset!");

// Function LGUI.ViewportUITextureActor.GetUITexture
// 0x0008 (0x0008 - 0x0000)
struct ViewportUITextureActor_GetUITexture final
{
public:
	class UViewportUITexture*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ViewportUITextureActor_GetUITexture) == 0x000008, "Wrong alignment on ViewportUITextureActor_GetUITexture");
static_assert(sizeof(ViewportUITextureActor_GetUITexture) == 0x000008, "Wrong size on ViewportUITextureActor_GetUITexture");
static_assert(offsetof(ViewportUITextureActor_GetUITexture, ReturnValue) == 0x000000, "Member 'ViewportUITextureActor_GetUITexture::ReturnValue' has a wrong offset!");

}

