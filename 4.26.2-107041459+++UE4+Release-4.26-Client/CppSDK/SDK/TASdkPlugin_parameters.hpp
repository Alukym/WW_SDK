#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASdkPlugin

#include "Basic.hpp"

#include "JsEnv_structs.hpp"
#include "TASdkPlugin_structs.hpp"


namespace SDK::Params
{

// Function TASdkPlugin.ThinkingAnalytics.CalibrateTime
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_CalibrateTime final
{
public:
	TDelegate<void(int32 Index)>                  OnTimeCalibrated;                                  // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_CalibrateTime) == 0x000004, "Wrong alignment on ThinkingAnalytics_CalibrateTime");
static_assert(sizeof(ThinkingAnalytics_CalibrateTime) == 0x000018, "Wrong size on ThinkingAnalytics_CalibrateTime");
static_assert(offsetof(ThinkingAnalytics_CalibrateTime, OnTimeCalibrated) == 0x000000, "Member 'ThinkingAnalytics_CalibrateTime::OnTimeCalibrated' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_CalibrateTime, Param_Index) == 0x000014, "Member 'ThinkingAnalytics_CalibrateTime::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.CreateSimpleInstance
// 0x0080 (0x0080 - 0x0000)
struct ThinkingAnalytics_CreateSimpleInstance final
{
public:
	struct FCreateInstanceParam                   Param;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C09[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_CreateSimpleInstance) == 0x000008, "Wrong alignment on ThinkingAnalytics_CreateSimpleInstance");
static_assert(sizeof(ThinkingAnalytics_CreateSimpleInstance) == 0x000080, "Wrong size on ThinkingAnalytics_CreateSimpleInstance");
static_assert(offsetof(ThinkingAnalytics_CreateSimpleInstance, Param) == 0x000000, "Member 'ThinkingAnalytics_CreateSimpleInstance::Param' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_CreateSimpleInstance, ReturnValue) == 0x000078, "Member 'ThinkingAnalytics_CreateSimpleInstance::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.DestroyInstance
// 0x0008 (0x0008 - 0x0000)
struct ThinkingAnalytics_DestroyInstance final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_Flush;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_DestroyInstance) == 0x000004, "Wrong alignment on ThinkingAnalytics_DestroyInstance");
static_assert(sizeof(ThinkingAnalytics_DestroyInstance) == 0x000008, "Wrong size on ThinkingAnalytics_DestroyInstance");
static_assert(offsetof(ThinkingAnalytics_DestroyInstance, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_DestroyInstance::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_DestroyInstance, Param_Flush) == 0x000004, "Member 'ThinkingAnalytics_DestroyInstance::Param_Flush' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.EnableAutoTrack
// 0x0004 (0x0004 - 0x0000)
struct ThinkingAnalytics_EnableAutoTrack final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_EnableAutoTrack) == 0x000004, "Wrong alignment on ThinkingAnalytics_EnableAutoTrack");
static_assert(sizeof(ThinkingAnalytics_EnableAutoTrack) == 0x000004, "Wrong size on ThinkingAnalytics_EnableAutoTrack");
static_assert(offsetof(ThinkingAnalytics_EnableAutoTrack, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_EnableAutoTrack::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.EnableAutoTrackWithType
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_EnableAutoTrackWithType final
{
public:
	TArray<class FString>                         EventTypeList;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_EnableAutoTrackWithType) == 0x000008, "Wrong alignment on ThinkingAnalytics_EnableAutoTrackWithType");
static_assert(sizeof(ThinkingAnalytics_EnableAutoTrackWithType) == 0x000018, "Wrong size on ThinkingAnalytics_EnableAutoTrackWithType");
static_assert(offsetof(ThinkingAnalytics_EnableAutoTrackWithType, EventTypeList) == 0x000000, "Member 'ThinkingAnalytics_EnableAutoTrackWithType::EventTypeList' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_EnableAutoTrackWithType, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_EnableAutoTrackWithType::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.EnableAutoTrackWithTypeAndProperties
// 0x0028 (0x0028 - 0x0000)
struct ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties final
{
public:
	TArray<class FString>                         EventTypeList;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Properties;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0C[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties) == 0x000008, "Wrong alignment on ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties");
static_assert(sizeof(ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties) == 0x000028, "Wrong size on ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties");
static_assert(offsetof(ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties, EventTypeList) == 0x000000, "Member 'ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties::EventTypeList' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties, Properties) == 0x000010, "Member 'ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties, Param_Index) == 0x000020, "Member 'ThinkingAnalytics_EnableAutoTrackWithTypeAndProperties::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.EnableThirdPartySharing
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_EnableThirdPartySharing final
{
public:
	TArray<class FString>                         EventTypeList;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_EnableThirdPartySharing) == 0x000008, "Wrong alignment on ThinkingAnalytics_EnableThirdPartySharing");
static_assert(sizeof(ThinkingAnalytics_EnableThirdPartySharing) == 0x000018, "Wrong size on ThinkingAnalytics_EnableThirdPartySharing");
static_assert(offsetof(ThinkingAnalytics_EnableThirdPartySharing, EventTypeList) == 0x000000, "Member 'ThinkingAnalytics_EnableThirdPartySharing::EventTypeList' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_EnableThirdPartySharing, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_EnableThirdPartySharing::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.EnableTracking
// 0x0008 (0x0008 - 0x0000)
struct ThinkingAnalytics_EnableTracking final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_EnableTracking) == 0x000004, "Wrong alignment on ThinkingAnalytics_EnableTracking");
static_assert(sizeof(ThinkingAnalytics_EnableTracking) == 0x000008, "Wrong size on ThinkingAnalytics_EnableTracking");
static_assert(offsetof(ThinkingAnalytics_EnableTracking, bIsEnable) == 0x000000, "Member 'ThinkingAnalytics_EnableTracking::bIsEnable' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_EnableTracking, Param_Index) == 0x000004, "Member 'ThinkingAnalytics_EnableTracking::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.Flush
// 0x0004 (0x0004 - 0x0000)
struct ThinkingAnalytics_Flush final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_Flush) == 0x000004, "Wrong alignment on ThinkingAnalytics_Flush");
static_assert(sizeof(ThinkingAnalytics_Flush) == 0x000004, "Wrong size on ThinkingAnalytics_Flush");
static_assert(offsetof(ThinkingAnalytics_Flush, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_Flush::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.GetCurrentCPUSampledAvgFrequency
// 0x0004 (0x0004 - 0x0000)
struct ThinkingAnalytics_GetCurrentCPUSampledAvgFrequency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_GetCurrentCPUSampledAvgFrequency) == 0x000004, "Wrong alignment on ThinkingAnalytics_GetCurrentCPUSampledAvgFrequency");
static_assert(sizeof(ThinkingAnalytics_GetCurrentCPUSampledAvgFrequency) == 0x000004, "Wrong size on ThinkingAnalytics_GetCurrentCPUSampledAvgFrequency");
static_assert(offsetof(ThinkingAnalytics_GetCurrentCPUSampledAvgFrequency, ReturnValue) == 0x000000, "Member 'ThinkingAnalytics_GetCurrentCPUSampledAvgFrequency::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.GetCurrentCPUSampledMaxFrequency
// 0x0004 (0x0004 - 0x0000)
struct ThinkingAnalytics_GetCurrentCPUSampledMaxFrequency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_GetCurrentCPUSampledMaxFrequency) == 0x000004, "Wrong alignment on ThinkingAnalytics_GetCurrentCPUSampledMaxFrequency");
static_assert(sizeof(ThinkingAnalytics_GetCurrentCPUSampledMaxFrequency) == 0x000004, "Wrong size on ThinkingAnalytics_GetCurrentCPUSampledMaxFrequency");
static_assert(offsetof(ThinkingAnalytics_GetCurrentCPUSampledMaxFrequency, ReturnValue) == 0x000000, "Member 'ThinkingAnalytics_GetCurrentCPUSampledMaxFrequency::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.GetDeviceId
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_GetDeviceId final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_GetDeviceId) == 0x000008, "Wrong alignment on ThinkingAnalytics_GetDeviceId");
static_assert(sizeof(ThinkingAnalytics_GetDeviceId) == 0x000018, "Wrong size on ThinkingAnalytics_GetDeviceId");
static_assert(offsetof(ThinkingAnalytics_GetDeviceId, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_GetDeviceId::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_GetDeviceId, ReturnValue) == 0x000008, "Member 'ThinkingAnalytics_GetDeviceId::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.GetDistinctId
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_GetDistinctId final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C10[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_GetDistinctId) == 0x000008, "Wrong alignment on ThinkingAnalytics_GetDistinctId");
static_assert(sizeof(ThinkingAnalytics_GetDistinctId) == 0x000018, "Wrong size on ThinkingAnalytics_GetDistinctId");
static_assert(offsetof(ThinkingAnalytics_GetDistinctId, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_GetDistinctId::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_GetDistinctId, ReturnValue) == 0x000008, "Member 'ThinkingAnalytics_GetDistinctId::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.GetMachineID
// 0x0010 (0x0010 - 0x0000)
struct ThinkingAnalytics_GetMachineID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_GetMachineID) == 0x000008, "Wrong alignment on ThinkingAnalytics_GetMachineID");
static_assert(sizeof(ThinkingAnalytics_GetMachineID) == 0x000010, "Wrong size on ThinkingAnalytics_GetMachineID");
static_assert(offsetof(ThinkingAnalytics_GetMachineID, ReturnValue) == 0x000000, "Member 'ThinkingAnalytics_GetMachineID::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.GetPresetProperties
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_GetPresetProperties final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C11[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_GetPresetProperties) == 0x000008, "Wrong alignment on ThinkingAnalytics_GetPresetProperties");
static_assert(sizeof(ThinkingAnalytics_GetPresetProperties) == 0x000018, "Wrong size on ThinkingAnalytics_GetPresetProperties");
static_assert(offsetof(ThinkingAnalytics_GetPresetProperties, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_GetPresetProperties::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_GetPresetProperties, ReturnValue) == 0x000008, "Member 'ThinkingAnalytics_GetPresetProperties::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.GetSuperProperties
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_GetSuperProperties final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C12[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_GetSuperProperties) == 0x000008, "Wrong alignment on ThinkingAnalytics_GetSuperProperties");
static_assert(sizeof(ThinkingAnalytics_GetSuperProperties) == 0x000018, "Wrong size on ThinkingAnalytics_GetSuperProperties");
static_assert(offsetof(ThinkingAnalytics_GetSuperProperties, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_GetSuperProperties::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_GetSuperProperties, ReturnValue) == 0x000008, "Member 'ThinkingAnalytics_GetSuperProperties::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.HasDefaultInstanceInitialized
// 0x0001 (0x0001 - 0x0000)
struct ThinkingAnalytics_HasDefaultInstanceInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_HasDefaultInstanceInitialized) == 0x000001, "Wrong alignment on ThinkingAnalytics_HasDefaultInstanceInitialized");
static_assert(sizeof(ThinkingAnalytics_HasDefaultInstanceInitialized) == 0x000001, "Wrong size on ThinkingAnalytics_HasDefaultInstanceInitialized");
static_assert(offsetof(ThinkingAnalytics_HasDefaultInstanceInitialized, ReturnValue) == 0x000000, "Member 'ThinkingAnalytics_HasDefaultInstanceInitialized::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.HasInstanceInitialized
// 0x0008 (0x0008 - 0x0000)
struct ThinkingAnalytics_HasInstanceInitialized final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C13[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_HasInstanceInitialized) == 0x000004, "Wrong alignment on ThinkingAnalytics_HasInstanceInitialized");
static_assert(sizeof(ThinkingAnalytics_HasInstanceInitialized) == 0x000008, "Wrong size on ThinkingAnalytics_HasInstanceInitialized");
static_assert(offsetof(ThinkingAnalytics_HasInstanceInitialized, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_HasInstanceInitialized::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_HasInstanceInitialized, ReturnValue) == 0x000004, "Member 'ThinkingAnalytics_HasInstanceInitialized::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.HasInstanceTimeCalibrated
// 0x0008 (0x0008 - 0x0000)
struct ThinkingAnalytics_HasInstanceTimeCalibrated final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C14[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_HasInstanceTimeCalibrated) == 0x000004, "Wrong alignment on ThinkingAnalytics_HasInstanceTimeCalibrated");
static_assert(sizeof(ThinkingAnalytics_HasInstanceTimeCalibrated) == 0x000008, "Wrong size on ThinkingAnalytics_HasInstanceTimeCalibrated");
static_assert(offsetof(ThinkingAnalytics_HasInstanceTimeCalibrated, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_HasInstanceTimeCalibrated::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_HasInstanceTimeCalibrated, ReturnValue) == 0x000004, "Member 'ThinkingAnalytics_HasInstanceTimeCalibrated::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.Identify
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_Identify final
{
public:
	class FString                                 DistinctId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C15[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_Identify) == 0x000008, "Wrong alignment on ThinkingAnalytics_Identify");
static_assert(sizeof(ThinkingAnalytics_Identify) == 0x000018, "Wrong size on ThinkingAnalytics_Identify");
static_assert(offsetof(ThinkingAnalytics_Identify, DistinctId) == 0x000000, "Member 'ThinkingAnalytics_Identify::DistinctId' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Identify, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_Identify::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.Initialize
// 0x0002 (0x0002 - 0x0000)
struct ThinkingAnalytics_Initialize final
{
public:
	bool                                          bUseUtf8;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_Initialize) == 0x000001, "Wrong alignment on ThinkingAnalytics_Initialize");
static_assert(sizeof(ThinkingAnalytics_Initialize) == 0x000002, "Wrong size on ThinkingAnalytics_Initialize");
static_assert(offsetof(ThinkingAnalytics_Initialize, bUseUtf8) == 0x000000, "Member 'ThinkingAnalytics_Initialize::bUseUtf8' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Initialize, ReturnValue) == 0x000001, "Member 'ThinkingAnalytics_Initialize::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.InitializeDefaultInsWithURL_Appid
// 0x0028 (0x0028 - 0x0000)
struct ThinkingAnalytics_InitializeDefaultInsWithURL_Appid final
{
public:
	class FString                                 ServerURL;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Appid;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUtf8;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C16[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_InitializeDefaultInsWithURL_Appid) == 0x000008, "Wrong alignment on ThinkingAnalytics_InitializeDefaultInsWithURL_Appid");
static_assert(sizeof(ThinkingAnalytics_InitializeDefaultInsWithURL_Appid) == 0x000028, "Wrong size on ThinkingAnalytics_InitializeDefaultInsWithURL_Appid");
static_assert(offsetof(ThinkingAnalytics_InitializeDefaultInsWithURL_Appid, ServerURL) == 0x000000, "Member 'ThinkingAnalytics_InitializeDefaultInsWithURL_Appid::ServerURL' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeDefaultInsWithURL_Appid, Appid) == 0x000010, "Member 'ThinkingAnalytics_InitializeDefaultInsWithURL_Appid::Appid' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeDefaultInsWithURL_Appid, bUseUtf8) == 0x000020, "Member 'ThinkingAnalytics_InitializeDefaultInsWithURL_Appid::bUseUtf8' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeDefaultInsWithURL_Appid, ReturnValue) == 0x000021, "Member 'ThinkingAnalytics_InitializeDefaultInsWithURL_Appid::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.InitializeEncryptInstance
// 0x0078 (0x0078 - 0x0000)
struct ThinkingAnalytics_InitializeEncryptInstance final
{
public:
	class FString                                 Appid;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Serverurl;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETAMode                                       Mode;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLog;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C17[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TimeZone;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableEncrypt;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C18[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EncryptPublicKey;                                  // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EncryptVersion;                                    // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C19[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SymmetricEncryption;                               // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AsymmetricEncryption;                              // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_InitializeEncryptInstance) == 0x000008, "Wrong alignment on ThinkingAnalytics_InitializeEncryptInstance");
static_assert(sizeof(ThinkingAnalytics_InitializeEncryptInstance) == 0x000078, "Wrong size on ThinkingAnalytics_InitializeEncryptInstance");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, Appid) == 0x000000, "Member 'ThinkingAnalytics_InitializeEncryptInstance::Appid' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, Serverurl) == 0x000010, "Member 'ThinkingAnalytics_InitializeEncryptInstance::Serverurl' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, Mode) == 0x000020, "Member 'ThinkingAnalytics_InitializeEncryptInstance::Mode' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, bEnableLog) == 0x000021, "Member 'ThinkingAnalytics_InitializeEncryptInstance::bEnableLog' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, TimeZone) == 0x000028, "Member 'ThinkingAnalytics_InitializeEncryptInstance::TimeZone' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, bEnableEncrypt) == 0x000038, "Member 'ThinkingAnalytics_InitializeEncryptInstance::bEnableEncrypt' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, EncryptPublicKey) == 0x000040, "Member 'ThinkingAnalytics_InitializeEncryptInstance::EncryptPublicKey' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, EncryptVersion) == 0x000050, "Member 'ThinkingAnalytics_InitializeEncryptInstance::EncryptVersion' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, SymmetricEncryption) == 0x000058, "Member 'ThinkingAnalytics_InitializeEncryptInstance::SymmetricEncryption' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_InitializeEncryptInstance, AsymmetricEncryption) == 0x000068, "Member 'ThinkingAnalytics_InitializeEncryptInstance::AsymmetricEncryption' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.Login
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_Login final
{
public:
	class FString                                 AccountId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_Login) == 0x000008, "Wrong alignment on ThinkingAnalytics_Login");
static_assert(sizeof(ThinkingAnalytics_Login) == 0x000018, "Wrong size on ThinkingAnalytics_Login");
static_assert(offsetof(ThinkingAnalytics_Login, AccountId) == 0x000000, "Member 'ThinkingAnalytics_Login::AccountId' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Login, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_Login::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.Logout
// 0x0004 (0x0004 - 0x0000)
struct ThinkingAnalytics_Logout final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_Logout) == 0x000004, "Wrong alignment on ThinkingAnalytics_Logout");
static_assert(sizeof(ThinkingAnalytics_Logout) == 0x000004, "Wrong size on ThinkingAnalytics_Logout");
static_assert(offsetof(ThinkingAnalytics_Logout, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_Logout::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.OptInTracking
// 0x0004 (0x0004 - 0x0000)
struct ThinkingAnalytics_OptInTracking final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_OptInTracking) == 0x000004, "Wrong alignment on ThinkingAnalytics_OptInTracking");
static_assert(sizeof(ThinkingAnalytics_OptInTracking) == 0x000004, "Wrong size on ThinkingAnalytics_OptInTracking");
static_assert(offsetof(ThinkingAnalytics_OptInTracking, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_OptInTracking::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.OptOutTracking
// 0x0004 (0x0004 - 0x0000)
struct ThinkingAnalytics_OptOutTracking final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_OptOutTracking) == 0x000004, "Wrong alignment on ThinkingAnalytics_OptOutTracking");
static_assert(sizeof(ThinkingAnalytics_OptOutTracking) == 0x000004, "Wrong size on ThinkingAnalytics_OptOutTracking");
static_assert(offsetof(ThinkingAnalytics_OptOutTracking, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_OptOutTracking::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.SetTrackStatus
// 0x0008 (0x0008 - 0x0000)
struct ThinkingAnalytics_SetTrackStatus final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_SetTrackStatus) == 0x000004, "Wrong alignment on ThinkingAnalytics_SetTrackStatus");
static_assert(sizeof(ThinkingAnalytics_SetTrackStatus) == 0x000008, "Wrong size on ThinkingAnalytics_SetTrackStatus");
static_assert(offsetof(ThinkingAnalytics_SetTrackStatus, Status) == 0x000000, "Member 'ThinkingAnalytics_SetTrackStatus::Status' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_SetTrackStatus, Param_Index) == 0x000004, "Member 'ThinkingAnalytics_SetTrackStatus::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.TimeEvent
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_TimeEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_TimeEvent) == 0x000008, "Wrong alignment on ThinkingAnalytics_TimeEvent");
static_assert(sizeof(ThinkingAnalytics_TimeEvent) == 0x000018, "Wrong size on ThinkingAnalytics_TimeEvent");
static_assert(offsetof(ThinkingAnalytics_TimeEvent, EventName) == 0x000000, "Member 'ThinkingAnalytics_TimeEvent::EventName' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TimeEvent, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_TimeEvent::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.ToggleSampleCPUFrequency
// 0x0008 (0x0008 - 0x0000)
struct ThinkingAnalytics_ToggleSampleCPUFrequency final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SampleInterval;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_ToggleSampleCPUFrequency) == 0x000004, "Wrong alignment on ThinkingAnalytics_ToggleSampleCPUFrequency");
static_assert(sizeof(ThinkingAnalytics_ToggleSampleCPUFrequency) == 0x000008, "Wrong size on ThinkingAnalytics_ToggleSampleCPUFrequency");
static_assert(offsetof(ThinkingAnalytics_ToggleSampleCPUFrequency, bActive) == 0x000000, "Member 'ThinkingAnalytics_ToggleSampleCPUFrequency::bActive' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_ToggleSampleCPUFrequency, SampleInterval) == 0x000004, "Member 'ThinkingAnalytics_ToggleSampleCPUFrequency::SampleInterval' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.Track
// 0x0028 (0x0028 - 0x0000)
struct ThinkingAnalytics_Track final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Properties;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1D[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_Track) == 0x000008, "Wrong alignment on ThinkingAnalytics_Track");
static_assert(sizeof(ThinkingAnalytics_Track) == 0x000028, "Wrong size on ThinkingAnalytics_Track");
static_assert(offsetof(ThinkingAnalytics_Track, EventName) == 0x000000, "Member 'ThinkingAnalytics_Track::EventName' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Track, Properties) == 0x000010, "Member 'ThinkingAnalytics_Track::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Track, Param_Index) == 0x000020, "Member 'ThinkingAnalytics_Track::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Track, ReturnValue) == 0x000024, "Member 'ThinkingAnalytics_Track::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.Track_Utf8
// 0x0028 (0x0028 - 0x0000)
struct ThinkingAnalytics_Track_Utf8 final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FArrayBuffer                           Properties;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1E[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_Track_Utf8) == 0x000008, "Wrong alignment on ThinkingAnalytics_Track_Utf8");
static_assert(sizeof(ThinkingAnalytics_Track_Utf8) == 0x000028, "Wrong size on ThinkingAnalytics_Track_Utf8");
static_assert(offsetof(ThinkingAnalytics_Track_Utf8, EventName) == 0x000000, "Member 'ThinkingAnalytics_Track_Utf8::EventName' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Track_Utf8, Properties) == 0x000010, "Member 'ThinkingAnalytics_Track_Utf8::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Track_Utf8, Param_Index) == 0x000020, "Member 'ThinkingAnalytics_Track_Utf8::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_Track_Utf8, ReturnValue) == 0x000024, "Member 'ThinkingAnalytics_Track_Utf8::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.TrackFirst
// 0x0028 (0x0028 - 0x0000)
struct ThinkingAnalytics_TrackFirst final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Properties;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1F[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_TrackFirst) == 0x000008, "Wrong alignment on ThinkingAnalytics_TrackFirst");
static_assert(sizeof(ThinkingAnalytics_TrackFirst) == 0x000028, "Wrong size on ThinkingAnalytics_TrackFirst");
static_assert(offsetof(ThinkingAnalytics_TrackFirst, EventName) == 0x000000, "Member 'ThinkingAnalytics_TrackFirst::EventName' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackFirst, Properties) == 0x000010, "Member 'ThinkingAnalytics_TrackFirst::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackFirst, Param_Index) == 0x000020, "Member 'ThinkingAnalytics_TrackFirst::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackFirst, ReturnValue) == 0x000024, "Member 'ThinkingAnalytics_TrackFirst::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.TrackFirstWithId
// 0x0038 (0x0038 - 0x0000)
struct ThinkingAnalytics_TrackFirstWithId final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Properties;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FirstCheckId;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C20[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_TrackFirstWithId) == 0x000008, "Wrong alignment on ThinkingAnalytics_TrackFirstWithId");
static_assert(sizeof(ThinkingAnalytics_TrackFirstWithId) == 0x000038, "Wrong size on ThinkingAnalytics_TrackFirstWithId");
static_assert(offsetof(ThinkingAnalytics_TrackFirstWithId, EventName) == 0x000000, "Member 'ThinkingAnalytics_TrackFirstWithId::EventName' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackFirstWithId, Properties) == 0x000010, "Member 'ThinkingAnalytics_TrackFirstWithId::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackFirstWithId, FirstCheckId) == 0x000020, "Member 'ThinkingAnalytics_TrackFirstWithId::FirstCheckId' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackFirstWithId, Param_Index) == 0x000030, "Member 'ThinkingAnalytics_TrackFirstWithId::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackFirstWithId, ReturnValue) == 0x000034, "Member 'ThinkingAnalytics_TrackFirstWithId::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.TrackOverwrite
// 0x0038 (0x0038 - 0x0000)
struct ThinkingAnalytics_TrackOverwrite final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Properties;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventId;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C21[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_TrackOverwrite) == 0x000008, "Wrong alignment on ThinkingAnalytics_TrackOverwrite");
static_assert(sizeof(ThinkingAnalytics_TrackOverwrite) == 0x000038, "Wrong size on ThinkingAnalytics_TrackOverwrite");
static_assert(offsetof(ThinkingAnalytics_TrackOverwrite, EventName) == 0x000000, "Member 'ThinkingAnalytics_TrackOverwrite::EventName' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackOverwrite, Properties) == 0x000010, "Member 'ThinkingAnalytics_TrackOverwrite::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackOverwrite, EventId) == 0x000020, "Member 'ThinkingAnalytics_TrackOverwrite::EventId' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackOverwrite, Param_Index) == 0x000030, "Member 'ThinkingAnalytics_TrackOverwrite::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackOverwrite, ReturnValue) == 0x000034, "Member 'ThinkingAnalytics_TrackOverwrite::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.TrackUpdate
// 0x0038 (0x0038 - 0x0000)
struct ThinkingAnalytics_TrackUpdate final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Properties;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventId;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C22[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_TrackUpdate) == 0x000008, "Wrong alignment on ThinkingAnalytics_TrackUpdate");
static_assert(sizeof(ThinkingAnalytics_TrackUpdate) == 0x000038, "Wrong size on ThinkingAnalytics_TrackUpdate");
static_assert(offsetof(ThinkingAnalytics_TrackUpdate, EventName) == 0x000000, "Member 'ThinkingAnalytics_TrackUpdate::EventName' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackUpdate, Properties) == 0x000010, "Member 'ThinkingAnalytics_TrackUpdate::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackUpdate, EventId) == 0x000020, "Member 'ThinkingAnalytics_TrackUpdate::EventId' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackUpdate, Param_Index) == 0x000030, "Member 'ThinkingAnalytics_TrackUpdate::Param_Index' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_TrackUpdate, ReturnValue) == 0x000034, "Member 'ThinkingAnalytics_TrackUpdate::ReturnValue' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.UserAdd
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_UserAdd final
{
public:
	class FString                                 Property;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_UserAdd) == 0x000008, "Wrong alignment on ThinkingAnalytics_UserAdd");
static_assert(sizeof(ThinkingAnalytics_UserAdd) == 0x000018, "Wrong size on ThinkingAnalytics_UserAdd");
static_assert(offsetof(ThinkingAnalytics_UserAdd, Property) == 0x000000, "Member 'ThinkingAnalytics_UserAdd::Property' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_UserAdd, Value) == 0x000010, "Member 'ThinkingAnalytics_UserAdd::Value' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_UserAdd, Param_Index) == 0x000014, "Member 'ThinkingAnalytics_UserAdd::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.UserAppend
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_UserAppend final
{
public:
	class FString                                 Properties;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C23[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_UserAppend) == 0x000008, "Wrong alignment on ThinkingAnalytics_UserAppend");
static_assert(sizeof(ThinkingAnalytics_UserAppend) == 0x000018, "Wrong size on ThinkingAnalytics_UserAppend");
static_assert(offsetof(ThinkingAnalytics_UserAppend, Properties) == 0x000000, "Member 'ThinkingAnalytics_UserAppend::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_UserAppend, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_UserAppend::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.UserDelete
// 0x0004 (0x0004 - 0x0000)
struct ThinkingAnalytics_UserDelete final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThinkingAnalytics_UserDelete) == 0x000004, "Wrong alignment on ThinkingAnalytics_UserDelete");
static_assert(sizeof(ThinkingAnalytics_UserDelete) == 0x000004, "Wrong size on ThinkingAnalytics_UserDelete");
static_assert(offsetof(ThinkingAnalytics_UserDelete, Param_Index) == 0x000000, "Member 'ThinkingAnalytics_UserDelete::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.UserSet
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_UserSet final
{
public:
	class FString                                 Properties;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C24[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_UserSet) == 0x000008, "Wrong alignment on ThinkingAnalytics_UserSet");
static_assert(sizeof(ThinkingAnalytics_UserSet) == 0x000018, "Wrong size on ThinkingAnalytics_UserSet");
static_assert(offsetof(ThinkingAnalytics_UserSet, Properties) == 0x000000, "Member 'ThinkingAnalytics_UserSet::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_UserSet, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_UserSet::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.UserSetOnce
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_UserSetOnce final
{
public:
	class FString                                 Properties;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C25[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_UserSetOnce) == 0x000008, "Wrong alignment on ThinkingAnalytics_UserSetOnce");
static_assert(sizeof(ThinkingAnalytics_UserSetOnce) == 0x000018, "Wrong size on ThinkingAnalytics_UserSetOnce");
static_assert(offsetof(ThinkingAnalytics_UserSetOnce, Properties) == 0x000000, "Member 'ThinkingAnalytics_UserSetOnce::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_UserSetOnce, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_UserSetOnce::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.UserUniqueAppend
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_UserUniqueAppend final
{
public:
	class FString                                 Properties;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C26[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_UserUniqueAppend) == 0x000008, "Wrong alignment on ThinkingAnalytics_UserUniqueAppend");
static_assert(sizeof(ThinkingAnalytics_UserUniqueAppend) == 0x000018, "Wrong size on ThinkingAnalytics_UserUniqueAppend");
static_assert(offsetof(ThinkingAnalytics_UserUniqueAppend, Properties) == 0x000000, "Member 'ThinkingAnalytics_UserUniqueAppend::Properties' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_UserUniqueAppend, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_UserUniqueAppend::Param_Index' has a wrong offset!");

// Function TASdkPlugin.ThinkingAnalytics.UserUnset
// 0x0018 (0x0018 - 0x0000)
struct ThinkingAnalytics_UserUnset final
{
public:
	class FString                                 Property;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C27[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThinkingAnalytics_UserUnset) == 0x000008, "Wrong alignment on ThinkingAnalytics_UserUnset");
static_assert(sizeof(ThinkingAnalytics_UserUnset) == 0x000018, "Wrong size on ThinkingAnalytics_UserUnset");
static_assert(offsetof(ThinkingAnalytics_UserUnset, Property) == 0x000000, "Member 'ThinkingAnalytics_UserUnset::Property' has a wrong offset!");
static_assert(offsetof(ThinkingAnalytics_UserUnset, Param_Index) == 0x000010, "Member 'ThinkingAnalytics_UserUnset::Param_Index' has a wrong offset!");

}

