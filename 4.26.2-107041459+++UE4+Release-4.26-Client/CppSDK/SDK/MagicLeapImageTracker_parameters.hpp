#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapImageTracker

#include "Basic.hpp"


namespace SDK::Params
{

// Function MagicLeapImageTracker.MagicLeapImageTrackerComponent.RemoveTargetAsync
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapImageTrackerComponent_RemoveTargetAsync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapImageTrackerComponent_RemoveTargetAsync) == 0x000001, "Wrong alignment on MagicLeapImageTrackerComponent_RemoveTargetAsync");
static_assert(sizeof(MagicLeapImageTrackerComponent_RemoveTargetAsync) == 0x000001, "Wrong size on MagicLeapImageTrackerComponent_RemoveTargetAsync");
static_assert(offsetof(MagicLeapImageTrackerComponent_RemoveTargetAsync, ReturnValue) == 0x000000, "Member 'MagicLeapImageTrackerComponent_RemoveTargetAsync::ReturnValue' has a wrong offset!");

// Function MagicLeapImageTracker.MagicLeapImageTrackerComponent.SetTargetAsync
// 0x0010 (0x0010 - 0x0000)
struct MagicLeapImageTrackerComponent_SetTargetAsync final
{
public:
	class UTexture2D*                             ImageTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapImageTrackerComponent_SetTargetAsync) == 0x000008, "Wrong alignment on MagicLeapImageTrackerComponent_SetTargetAsync");
static_assert(sizeof(MagicLeapImageTrackerComponent_SetTargetAsync) == 0x000010, "Wrong size on MagicLeapImageTrackerComponent_SetTargetAsync");
static_assert(offsetof(MagicLeapImageTrackerComponent_SetTargetAsync, ImageTarget) == 0x000000, "Member 'MagicLeapImageTrackerComponent_SetTargetAsync::ImageTarget' has a wrong offset!");
static_assert(offsetof(MagicLeapImageTrackerComponent_SetTargetAsync, ReturnValue) == 0x000008, "Member 'MagicLeapImageTrackerComponent_SetTargetAsync::ReturnValue' has a wrong offset!");

// Function MagicLeapImageTracker.MagicLeapImageTrackerFunctionLibrary.EnableImageTracking
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapImageTrackerFunctionLibrary_EnableImageTracking final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapImageTrackerFunctionLibrary_EnableImageTracking) == 0x000001, "Wrong alignment on MagicLeapImageTrackerFunctionLibrary_EnableImageTracking");
static_assert(sizeof(MagicLeapImageTrackerFunctionLibrary_EnableImageTracking) == 0x000001, "Wrong size on MagicLeapImageTrackerFunctionLibrary_EnableImageTracking");
static_assert(offsetof(MagicLeapImageTrackerFunctionLibrary_EnableImageTracking, bEnable) == 0x000000, "Member 'MagicLeapImageTrackerFunctionLibrary_EnableImageTracking::bEnable' has a wrong offset!");

// Function MagicLeapImageTracker.MagicLeapImageTrackerFunctionLibrary.GetMaxSimultaneousTargets
// 0x0004 (0x0004 - 0x0000)
struct MagicLeapImageTrackerFunctionLibrary_GetMaxSimultaneousTargets final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapImageTrackerFunctionLibrary_GetMaxSimultaneousTargets) == 0x000004, "Wrong alignment on MagicLeapImageTrackerFunctionLibrary_GetMaxSimultaneousTargets");
static_assert(sizeof(MagicLeapImageTrackerFunctionLibrary_GetMaxSimultaneousTargets) == 0x000004, "Wrong size on MagicLeapImageTrackerFunctionLibrary_GetMaxSimultaneousTargets");
static_assert(offsetof(MagicLeapImageTrackerFunctionLibrary_GetMaxSimultaneousTargets, ReturnValue) == 0x000000, "Member 'MagicLeapImageTrackerFunctionLibrary_GetMaxSimultaneousTargets::ReturnValue' has a wrong offset!");

// Function MagicLeapImageTracker.MagicLeapImageTrackerFunctionLibrary.IsImageTrackingEnabled
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapImageTrackerFunctionLibrary_IsImageTrackingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapImageTrackerFunctionLibrary_IsImageTrackingEnabled) == 0x000001, "Wrong alignment on MagicLeapImageTrackerFunctionLibrary_IsImageTrackingEnabled");
static_assert(sizeof(MagicLeapImageTrackerFunctionLibrary_IsImageTrackingEnabled) == 0x000001, "Wrong size on MagicLeapImageTrackerFunctionLibrary_IsImageTrackingEnabled");
static_assert(offsetof(MagicLeapImageTrackerFunctionLibrary_IsImageTrackingEnabled, ReturnValue) == 0x000000, "Member 'MagicLeapImageTrackerFunctionLibrary_IsImageTrackingEnabled::ReturnValue' has a wrong offset!");

// Function MagicLeapImageTracker.MagicLeapImageTrackerFunctionLibrary.SetMaxSimultaneousTargets
// 0x0004 (0x0004 - 0x0000)
struct MagicLeapImageTrackerFunctionLibrary_SetMaxSimultaneousTargets final
{
public:
	int32                                         MaxSimultaneousTargets;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapImageTrackerFunctionLibrary_SetMaxSimultaneousTargets) == 0x000004, "Wrong alignment on MagicLeapImageTrackerFunctionLibrary_SetMaxSimultaneousTargets");
static_assert(sizeof(MagicLeapImageTrackerFunctionLibrary_SetMaxSimultaneousTargets) == 0x000004, "Wrong size on MagicLeapImageTrackerFunctionLibrary_SetMaxSimultaneousTargets");
static_assert(offsetof(MagicLeapImageTrackerFunctionLibrary_SetMaxSimultaneousTargets, MaxSimultaneousTargets) == 0x000000, "Member 'MagicLeapImageTrackerFunctionLibrary_SetMaxSimultaneousTargets::MaxSimultaneousTargets' has a wrong offset!");

}

