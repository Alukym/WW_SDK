#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroInput

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "KuroInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class KuroInput.BasePlayerController
// 0x0058 (0x0670 - 0x0618)
class ABasePlayerController final : public APlayerController
{
public:
	uint8                                         Pad_17CD[0x58];                                    // 0x0618(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void SetKuroForceFeedbackConfig(EGlobalKuroForceFeedbackType FeedbackConfig, int32 GlobalFeedbackCoef);

	void AddActionBinding(const class FName& ActionName, const EInputEvent KeyEvent, class UObject* Object, const class FName& FuncName);
	void AddAxisBinding(const class FName& AxisName, class UObject* Object, const class FName& FuncName);
	void AddKeyBinding(const struct FInputChord& Chord, const EInputEvent KeyEvent, class UObject* Object, const class FName& FuncName);
	void AddTouchBinding(const EInputEvent KeyEvent, class UObject* Object, const class FName& FuncName);
	void ClearActionBindings();
	void ClearAxisBindings();
	void ClearKeyBindings();
	void ClearTouchBindings();
	void FlushPressedKeys();
	void OnReceivedPlayer();
	void PlayKuroForceFeedback(class UKuroForceFeedbackEffect* ForceFeedbackEffect, class FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);
	void ReceiveOnDeviceChanged();
	void ReceivePostProcessInput(const float DeltaTime, const bool bGamePaused);
	void ReceivePreProcessInput(const float DeltaTime, const bool bGamePaused);
	void ReceiveSetupInputComponent();
	void StopKuroForceFeedback(class UKuroForceFeedbackEffect* ForceFeedbackEffect, class FName Tag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BasePlayerController">();
	}
	static class ABasePlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABasePlayerController>();
	}
};
static_assert(alignof(ABasePlayerController) == 0x000008, "Wrong alignment on ABasePlayerController");
static_assert(sizeof(ABasePlayerController) == 0x000670, "Wrong size on ABasePlayerController");

// Class KuroInput.KuroForceFeedbackEffect
// 0x0020 (0x0068 - 0x0048)
class UKuroForceFeedbackEffect final : public UForceFeedbackEffect
{
public:
	float                                         ColdDowm;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroForceFeedbackType                        Type;                                              // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DB[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  KuroGuid;                                          // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DC[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroForceFeedbackEffect">();
	}
	static class UKuroForceFeedbackEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroForceFeedbackEffect>();
	}
};
static_assert(alignof(UKuroForceFeedbackEffect) == 0x000008, "Wrong alignment on UKuroForceFeedbackEffect");
static_assert(sizeof(UKuroForceFeedbackEffect) == 0x000068, "Wrong size on UKuroForceFeedbackEffect");
static_assert(offsetof(UKuroForceFeedbackEffect, ColdDowm) == 0x000048, "Member 'UKuroForceFeedbackEffect::ColdDowm' has a wrong offset!");
static_assert(offsetof(UKuroForceFeedbackEffect, Type) == 0x00004C, "Member 'UKuroForceFeedbackEffect::Type' has a wrong offset!");
static_assert(offsetof(UKuroForceFeedbackEffect, Priority) == 0x000050, "Member 'UKuroForceFeedbackEffect::Priority' has a wrong offset!");
static_assert(offsetof(UKuroForceFeedbackEffect, KuroGuid) == 0x000054, "Member 'UKuroForceFeedbackEffect::KuroGuid' has a wrong offset!");

// Class KuroInput.KuroInputSetting
// 0x0008 (0x0038 - 0x0030)
class UKuroInputSetting final : public UObject
{
public:
	EGlobalKuroForceFeedbackType                  FeedbackConfig;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DD[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalFeedbackSize;                                // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroInputSetting">();
	}
	static class UKuroInputSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroInputSetting>();
	}
};
static_assert(alignof(UKuroInputSetting) == 0x000008, "Wrong alignment on UKuroInputSetting");
static_assert(sizeof(UKuroInputSetting) == 0x000038, "Wrong size on UKuroInputSetting");
static_assert(offsetof(UKuroInputSetting, FeedbackConfig) == 0x000030, "Member 'UKuroInputSetting::FeedbackConfig' has a wrong offset!");
static_assert(offsetof(UKuroInputSetting, GlobalFeedbackSize) == 0x000034, "Member 'UKuroInputSetting::GlobalFeedbackSize' has a wrong offset!");

}

