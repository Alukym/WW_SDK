#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroRenderingRuntimeBPPlugin

#include "Basic.hpp"

#include "KuroCurve_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum KuroRenderingRuntimeBPPlugin.EBillboardMode
// NumValues: 0x0005
enum class EBillboardMode : uint8
{
	Free                                     = 0,
	UpWard                                   = 1,
	Right                                    = 2,
	Max                                      = 3,
	EBillboardMode_MAX                       = 4,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroClusteredStuffBlendMode
// NumValues: 0x0004
enum class EKuroClusteredStuffBlendMode : uint8
{
	EAdd                                     = 0,
	EOverlay                                 = 1,
	EMax                                     = 2,
	EKuroClusteredStuffBlendMode_MAX         = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroDynamicCloudType
// NumValues: 0x001F
enum class EKuroDynamicCloudType : uint8
{
	Cloud_TianCheng                          = 0,
	Cloud_YiLuoYuanXiang                     = 1,
	Cloud_WuGuangZhiSen                      = 2,
	Cloud_ZhongQuTaiDi                       = 3,
	Cloud_Area05                             = 4,
	Cloud_Area06                             = 5,
	Cloud_Area07                             = 6,
	Cloud_Area08                             = 7,
	Cloud_Area09                             = 8,
	Cloud_Area10                             = 9,
	Cloud_Area11                             = 10,
	Cloud_WuYinQu01                          = 11,
	Cloud_DengLuJieMian                      = 12,
	Cloud_WuYinQu02                          = 13,
	Cloud_WuYinQu03                          = 14,
	Cloud_WuYinQu04                          = 15,
	Cloud_WuYinQu05                          = 16,
	Cloud_WuYinQuInit                        = 17,
	Cloud_XuanWoYun                          = 18,
	Cloud_MingChaoTianQi                     = 19,
	Cloud_YinTianYiXiang                     = 20,
	Cloud_HuangHunYiXiang                    = 21,
	Cloud_YeWanYiXiang                       = 22,
	Cloud_Special01                          = 23,
	Cloud_Special02                          = 24,
	Cloud_BeiLuoYe                           = 25,
	Cloud_SuiGuang                           = 26,
	Cloud_FuBen01                            = 27,
	Cloud_FuBen02                            = 28,
	Cloud_Max                                = 29,
	Cloud_MAX                                = 30,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroPPLensflareType
// NumValues: 0x0012
enum class EKuroPPLensflareType : uint8
{
	EKuroPPLensflareType1                    = 0,
	EKuroPPLensflareType2                    = 1,
	EKuroPPLensflareType3                    = 2,
	EKuroPPLensflareType4                    = 3,
	EKuroPPLensflareType5                    = 4,
	EKuroPPLensflareType6                    = 5,
	EKuroPPLensflareType7                    = 6,
	EKuroPPLensflareType8                    = 7,
	EKuroPPLensflareType9                    = 8,
	EKuroPPLensflareType10                   = 9,
	EKuroPPLensflareType11                   = 10,
	EKuroPPLensflareType12                   = 11,
	EKuroPPLensflareType13                   = 12,
	EKuroPPLensflareType14                   = 13,
	EKuroPPLensflareType15                   = 14,
	EKuroPPLensflareType16                   = 15,
	EKuroPPLensflareType_Max                 = 16,
	EKuroPPLensflareType_MAX                 = 17,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroThunderType
// NumValues: 0x0012
enum class EKuroThunderType : uint8
{
	EKuroThunderType1                        = 0,
	EKuroThunderType2                        = 1,
	EKuroThunderType3                        = 2,
	EKuroThunderType4                        = 3,
	EKuroThunderType5                        = 4,
	EKuroThunderType6                        = 5,
	EKuroThunderType7                        = 6,
	EKuroThunderType8                        = 7,
	EKuroThunderType9                        = 8,
	EKuroThunderType10                       = 9,
	EKuroThunderType11                       = 10,
	EKuroThunderType12                       = 11,
	EKuroThunderType13                       = 12,
	EKuroThunderType14                       = 13,
	EKuroThunderType15                       = 14,
	EKuroThunderType16                       = 15,
	EKuroThunderType_Max                     = 16,
	EKuroThunderType_MAX                     = 17,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroRainType
// NumValues: 0x0011
enum class EKuroRainType : uint8
{
	EKuroRainType1                           = 0,
	EKuroRainType2                           = 1,
	EKuroRainType3                           = 2,
	EKuroRainType4                           = 3,
	EKuroRainType5                           = 4,
	EKuroRainType6                           = 5,
	EKuroRainType7                           = 6,
	EKuroRainType8                           = 7,
	EKuroRainType9                           = 8,
	EKuroRainType10                          = 9,
	EKuroRainType11                          = 10,
	EKuroRainType12                          = 11,
	EKuroRainType13                          = 12,
	EKuroRainType14                          = 13,
	EKuroRainType15                          = 14,
	EKuroRainType16                          = 15,
	EKuroRainType_MAX                        = 16,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroUI3DState
// NumValues: 0x0004
enum class EKuroUI3DState : uint8
{
	NotLoaded                                = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	EKuroUI3DState_MAX                       = 3,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroSceneInteractionState
// NumValues: 0x0017
enum class EKuroSceneInteractionState : uint8
{
	State1                                   = 0,
	State2                                   = 1,
	State3                                   = 2,
	State4                                   = 3,
	State5                                   = 4,
	State6                                   = 5,
	State7                                   = 6,
	State8                                   = 7,
	State9                                   = 8,
	State10                                  = 9,
	State11                                  = 10,
	State12                                  = 11,
	State13                                  = 12,
	State14                                  = 13,
	State15                                  = 14,
	State16                                  = 15,
	State17                                  = 16,
	State18                                  = 17,
	State19                                  = 18,
	State20                                  = 19,
	ConcealedState                           = 20,
	Error                                    = 21,
	EKuroSceneInteractionState_MAX           = 22,
};

// Enum KuroRenderingRuntimeBPPlugin.EKuroUiSceneLoadingState
// NumValues: 0x0005
enum class EKuroUiSceneLoadingState : uint8
{
	NotLoaded                                = 0,
	Loading                                  = 1,
	LoadedNotVisible                         = 2,
	LoadedAndVisible                         = 3,
	EKuroUiSceneLoadingState_MAX             = 4,
};

// Enum KuroRenderingRuntimeBPPlugin.KuroFeatureLevel
// NumValues: 0x0003
enum class EKuroFeatureLevel : uint8
{
	ES3_1                                    = 0,
	SM5                                      = 1,
	KuroFeatureLevel_MAX                     = 2,
};

// Enum KuroRenderingRuntimeBPPlugin.BP_EWorldType
// NumValues: 0x0009
enum class EBP_EWorldType : uint8
{
	None                                     = 0,
	Game                                     = 1,
	Editor                                   = 2,
	PIE                                      = 3,
	EditorPreview                            = 4,
	GamePreview                              = 5,
	GameRPC                                  = 6,
	Inactive                                 = 7,
	BP_MAX                                   = 8,
};

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCharMaterialControllerColorParameter
// 0x0230 (0x0230 - 0x0000)
struct FKuroCharMaterialControllerColorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  ParameterValue;                                    // 0x0010(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCharMaterialControllerColorParameter) == 0x000008, "Wrong alignment on FKuroCharMaterialControllerColorParameter");
static_assert(sizeof(FKuroCharMaterialControllerColorParameter) == 0x000230, "Wrong size on FKuroCharMaterialControllerColorParameter");
static_assert(offsetof(FKuroCharMaterialControllerColorParameter, ParameterName) == 0x000000, "Member 'FKuroCharMaterialControllerColorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerColorParameter, ParameterValue) == 0x000010, "Member 'FKuroCharMaterialControllerColorParameter::ParameterValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCharMaterialControllerFloatParameter
// 0x00A0 (0x00A0 - 0x0000)
struct FKuroCharMaterialControllerFloatParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1820[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        ParameterValue;                                    // 0x0010(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCharMaterialControllerFloatParameter) == 0x000008, "Wrong alignment on FKuroCharMaterialControllerFloatParameter");
static_assert(sizeof(FKuroCharMaterialControllerFloatParameter) == 0x0000A0, "Wrong size on FKuroCharMaterialControllerFloatParameter");
static_assert(offsetof(FKuroCharMaterialControllerFloatParameter, ParameterName) == 0x000000, "Member 'FKuroCharMaterialControllerFloatParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerFloatParameter, ParameterValue) == 0x000010, "Member 'FKuroCharMaterialControllerFloatParameter::ParameterValue' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCharMaterialControllerColorGroup
// 0x0660 (0x0660 - 0x0000)
struct FKuroCharMaterialControllerColorGroup final
{
public:
	struct FKuroCurveLinearColor                  Start;                                             // 0x0000(0x0220)(Edit, NativeAccessSpecifierPublic)
	struct FKuroCurveLinearColor                  Loop;                                              // 0x0220(0x0220)(Edit, NativeAccessSpecifierPublic)
	struct FKuroCurveLinearColor                  End;                                               // 0x0440(0x0220)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCharMaterialControllerColorGroup) == 0x000008, "Wrong alignment on FKuroCharMaterialControllerColorGroup");
static_assert(sizeof(FKuroCharMaterialControllerColorGroup) == 0x000660, "Wrong size on FKuroCharMaterialControllerColorGroup");
static_assert(offsetof(FKuroCharMaterialControllerColorGroup, Start) == 0x000000, "Member 'FKuroCharMaterialControllerColorGroup::Start' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerColorGroup, Loop) == 0x000220, "Member 'FKuroCharMaterialControllerColorGroup::Loop' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerColorGroup, End) == 0x000440, "Member 'FKuroCharMaterialControllerColorGroup::End' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCharMaterialControllerFloatGroup
// 0x01B0 (0x01B0 - 0x0000)
struct FKuroCharMaterialControllerFloatGroup final
{
public:
	struct FKuroCurveFloat                        Start;                                             // 0x0000(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FKuroCurveFloat                        Loop;                                              // 0x0090(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FKuroCurveFloat                        End;                                               // 0x0120(0x0090)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCharMaterialControllerFloatGroup) == 0x000008, "Wrong alignment on FKuroCharMaterialControllerFloatGroup");
static_assert(sizeof(FKuroCharMaterialControllerFloatGroup) == 0x0001B0, "Wrong size on FKuroCharMaterialControllerFloatGroup");
static_assert(offsetof(FKuroCharMaterialControllerFloatGroup, Start) == 0x000000, "Member 'FKuroCharMaterialControllerFloatGroup::Start' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerFloatGroup, Loop) == 0x000090, "Member 'FKuroCharMaterialControllerFloatGroup::Loop' has a wrong offset!");
static_assert(offsetof(FKuroCharMaterialControllerFloatGroup, End) == 0x000120, "Member 'FKuroCharMaterialControllerFloatGroup::End' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.PostprocessGIDebugInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FPostprocessGIDebugInfo final
{
public:
	TWeakObjectPtr<class AActor>                  OwnerActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerActorName;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorFolderPath;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1821[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActorLabel;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVolume;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1822[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ComponentName;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldPriority;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalBlendWeight;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnbound;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1823[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WeatherDAPath;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UKuroWeatherDataAsset>   WeatherDAData;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TodDAPath;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UKuroTODData>            TodDAData;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OverridedProperties;                               // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PostProcessMaterialPath;                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPostprocessGIDebugInfo) == 0x000008, "Wrong alignment on FPostprocessGIDebugInfo");
static_assert(sizeof(FPostprocessGIDebugInfo) == 0x0000B8, "Wrong size on FPostprocessGIDebugInfo");
static_assert(offsetof(FPostprocessGIDebugInfo, OwnerActor) == 0x000000, "Member 'FPostprocessGIDebugInfo::OwnerActor' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, OwnerActorName) == 0x000008, "Member 'FPostprocessGIDebugInfo::OwnerActorName' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, ActorFolderPath) == 0x000018, "Member 'FPostprocessGIDebugInfo::ActorFolderPath' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, ActorLabel) == 0x000028, "Member 'FPostprocessGIDebugInfo::ActorLabel' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, IsVolume) == 0x000038, "Member 'FPostprocessGIDebugInfo::IsVolume' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, ComponentName) == 0x000040, "Member 'FPostprocessGIDebugInfo::ComponentName' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, Priority) == 0x000050, "Member 'FPostprocessGIDebugInfo::Priority' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, WorldPriority) == 0x000054, "Member 'FPostprocessGIDebugInfo::WorldPriority' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, LocalBlendWeight) == 0x000058, "Member 'FPostprocessGIDebugInfo::LocalBlendWeight' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, BlendWeight) == 0x00005C, "Member 'FPostprocessGIDebugInfo::BlendWeight' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, IsUnbound) == 0x000060, "Member 'FPostprocessGIDebugInfo::IsUnbound' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, WeatherDAPath) == 0x000068, "Member 'FPostprocessGIDebugInfo::WeatherDAPath' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, WeatherDAData) == 0x000078, "Member 'FPostprocessGIDebugInfo::WeatherDAData' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, TodDAPath) == 0x000080, "Member 'FPostprocessGIDebugInfo::TodDAPath' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, TodDAData) == 0x000090, "Member 'FPostprocessGIDebugInfo::TodDAData' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, OverridedProperties) == 0x000098, "Member 'FPostprocessGIDebugInfo::OverridedProperties' has a wrong offset!");
static_assert(offsetof(FPostprocessGIDebugInfo, PostProcessMaterialPath) == 0x0000A8, "Member 'FPostprocessGIDebugInfo::PostProcessMaterialPath' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudTopData
// 0x0040 (0x0040 - 0x0000)
struct FKuroCloudTopData final
{
public:
	struct FVector                                Rotator;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureIdx;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaControl;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaMax;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaMin;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStayTime;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearTime;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCloudTopData) == 0x000004, "Wrong alignment on FKuroCloudTopData");
static_assert(sizeof(FKuroCloudTopData) == 0x000040, "Wrong size on FKuroCloudTopData");
static_assert(offsetof(FKuroCloudTopData, Rotator) == 0x000000, "Member 'FKuroCloudTopData::Rotator' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, Offset) == 0x00000C, "Member 'FKuroCloudTopData::Offset' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, TextureIdx) == 0x000018, "Member 'FKuroCloudTopData::TextureIdx' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, Scale) == 0x00001C, "Member 'FKuroCloudTopData::Scale' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, AlphaControl) == 0x000020, "Member 'FKuroCloudTopData::AlphaControl' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, AlphaMax) == 0x000024, "Member 'FKuroCloudTopData::AlphaMax' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, AlphaMin) == 0x000028, "Member 'FKuroCloudTopData::AlphaMin' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, Brightness) == 0x00002C, "Member 'FKuroCloudTopData::Brightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, FadeOutTime) == 0x000030, "Member 'FKuroCloudTopData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, FadeInTime) == 0x000034, "Member 'FKuroCloudTopData::FadeInTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, FullStayTime) == 0x000038, "Member 'FKuroCloudTopData::FullStayTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudTopData, DisappearTime) == 0x00003C, "Member 'FKuroCloudTopData::DisappearTime' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudCircleData
// 0x0048 (0x0048 - 0x0000)
struct FKuroCloudCircleData final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Rotator;                                           // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureIdx;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalOffset;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaControl;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaMax;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaMin;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStayTime;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearTime;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCloudCircleData) == 0x000004, "Wrong alignment on FKuroCloudCircleData");
static_assert(sizeof(FKuroCloudCircleData) == 0x000048, "Wrong size on FKuroCloudCircleData");
static_assert(offsetof(FKuroCloudCircleData, Distance) == 0x000000, "Member 'FKuroCloudCircleData::Distance' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, Rotator) == 0x000004, "Member 'FKuroCloudCircleData::Rotator' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, TextureIdx) == 0x000010, "Member 'FKuroCloudCircleData::TextureIdx' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, HorizontalOffset) == 0x000014, "Member 'FKuroCloudCircleData::HorizontalOffset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, Scale) == 0x000018, "Member 'FKuroCloudCircleData::Scale' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, Offset) == 0x00001C, "Member 'FKuroCloudCircleData::Offset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, AlphaControl) == 0x000028, "Member 'FKuroCloudCircleData::AlphaControl' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, AlphaMax) == 0x00002C, "Member 'FKuroCloudCircleData::AlphaMax' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, AlphaMin) == 0x000030, "Member 'FKuroCloudCircleData::AlphaMin' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, Brightness) == 0x000034, "Member 'FKuroCloudCircleData::Brightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, FadeOutTime) == 0x000038, "Member 'FKuroCloudCircleData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, FadeInTime) == 0x00003C, "Member 'FKuroCloudCircleData::FadeInTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, FullStayTime) == 0x000040, "Member 'FKuroCloudCircleData::FullStayTime' has a wrong offset!");
static_assert(offsetof(FKuroCloudCircleData, DisappearTime) == 0x000044, "Member 'FKuroCloudCircleData::DisappearTime' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroTODEntryData
// 0x000C (0x000C - 0x0000)
struct FKuroTODEntryData final
{
public:
	struct FVector2D                              StartEndTime;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroTODEntryData) == 0x000004, "Wrong alignment on FKuroTODEntryData");
static_assert(sizeof(FKuroTODEntryData) == 0x00000C, "Wrong size on FKuroTODEntryData");
static_assert(offsetof(FKuroTODEntryData, StartEndTime) == 0x000000, "Member 'FKuroTODEntryData::StartEndTime' has a wrong offset!");
static_assert(offsetof(FKuroTODEntryData, DataIndex) == 0x000008, "Member 'FKuroTODEntryData::DataIndex' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.MainLightSetting
// 0x0034 (0x0034 - 0x0000)
struct FMainLightSetting final
{
public:
	uint8                                         bOverride_MainLightIntensity : 1;                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MainLightTint : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MainLightTemperature : 1;                // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MainLightSpecularIntensity : 1;          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowTintIntensity : 1;                 // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowTintColor : 1;                     // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1824[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainLightIntensity;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MainLightTint;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainLightTemperature;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainLightSpecularIntensity;                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTintIntensity;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowTintColor;                                   // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMainLightSetting) == 0x000004, "Wrong alignment on FMainLightSetting");
static_assert(sizeof(FMainLightSetting) == 0x000034, "Wrong size on FMainLightSetting");
static_assert(offsetof(FMainLightSetting, MainLightIntensity) == 0x000004, "Member 'FMainLightSetting::MainLightIntensity' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, MainLightTint) == 0x000008, "Member 'FMainLightSetting::MainLightTint' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, MainLightTemperature) == 0x000018, "Member 'FMainLightSetting::MainLightTemperature' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, MainLightSpecularIntensity) == 0x00001C, "Member 'FMainLightSetting::MainLightSpecularIntensity' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, ShadowTintIntensity) == 0x000020, "Member 'FMainLightSetting::ShadowTintIntensity' has a wrong offset!");
static_assert(offsetof(FMainLightSetting, ShadowTintColor) == 0x000024, "Member 'FMainLightSetting::ShadowTintColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.SkyLightSetting
// 0x0120 (0x0120 - 0x0000)
struct alignas(0x10) FSkyLightSetting final
{
public:
	uint8                                         bOverride_SkyLightColor : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightIntensity : 1;                   // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightSpecularIntensity : 1;           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroSkyLightCubemap : 1;                 // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroSkyLightTranslucent : 1;             // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroInteriorSkyLightIntensity : 1;       // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroInteriorSkyLightColor : 1;           // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AOColor : 1;                             // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1825[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SkyLightColor;                                     // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightIntensity;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightSpecularIntensity;                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroSkyLightTranslucent;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroInteriorSkyLightIntensity;                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KuroInteriorSkyLightColor;                         // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AOColor;                                           // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1826[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           KuroSkyLightCubemap;                               // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH1;                                   // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH2;                                   // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH3;                                   // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH4;                                   // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH5;                                   // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KuroSkyLightSH6;                                   // 0x008C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1827[0x48];                                    // 0x0098(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseGradientColorTint;                             // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1828[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SkyColor;                                          // 0x00E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1829[0x10];                                    // 0x00F4(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           GroudColor;                                        // 0x0104(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182A[0xC];                                     // 0x0114(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkyLightSetting) == 0x000010, "Wrong alignment on FSkyLightSetting");
static_assert(sizeof(FSkyLightSetting) == 0x000120, "Wrong size on FSkyLightSetting");
static_assert(offsetof(FSkyLightSetting, SkyLightColor) == 0x000004, "Member 'FSkyLightSetting::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, SkyLightIntensity) == 0x000014, "Member 'FSkyLightSetting::SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, SkyLightSpecularIntensity) == 0x000018, "Member 'FSkyLightSetting::SkyLightSpecularIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightTranslucent) == 0x00001C, "Member 'FSkyLightSetting::KuroSkyLightTranslucent' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroInteriorSkyLightIntensity) == 0x000020, "Member 'FSkyLightSetting::KuroInteriorSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroInteriorSkyLightColor) == 0x000024, "Member 'FSkyLightSetting::KuroInteriorSkyLightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, AOColor) == 0x000034, "Member 'FSkyLightSetting::AOColor' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightCubemap) == 0x000048, "Member 'FSkyLightSetting::KuroSkyLightCubemap' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH1) == 0x000050, "Member 'FSkyLightSetting::KuroSkyLightSH1' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH2) == 0x00005C, "Member 'FSkyLightSetting::KuroSkyLightSH2' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH3) == 0x000068, "Member 'FSkyLightSetting::KuroSkyLightSH3' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH4) == 0x000074, "Member 'FSkyLightSetting::KuroSkyLightSH4' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH5) == 0x000080, "Member 'FSkyLightSetting::KuroSkyLightSH5' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, KuroSkyLightSH6) == 0x00008C, "Member 'FSkyLightSetting::KuroSkyLightSH6' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, bUseGradientColorTint) == 0x0000E0, "Member 'FSkyLightSetting::bUseGradientColorTint' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, SkyColor) == 0x0000E4, "Member 'FSkyLightSetting::SkyColor' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, GroudColor) == 0x000104, "Member 'FSkyLightSetting::GroudColor' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.ShadowTintSetting
// 0x0018 (0x0018 - 0x0000)
struct FShadowTintSetting final
{
public:
	uint8                                         bOverride_ShadowTintOffset : 1;                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_182B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShadowTintOffset;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ShadowTintLutRamp : 1;                   // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_182C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ShadowTintLutRamp;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShadowTintSetting) == 0x000008, "Wrong alignment on FShadowTintSetting");
static_assert(sizeof(FShadowTintSetting) == 0x000018, "Wrong size on FShadowTintSetting");
static_assert(offsetof(FShadowTintSetting, ShadowTintOffset) == 0x000004, "Member 'FShadowTintSetting::ShadowTintOffset' has a wrong offset!");
static_assert(offsetof(FShadowTintSetting, ShadowTintLutRamp) == 0x000010, "Member 'FShadowTintSetting::ShadowTintLutRamp' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.CharacterSetting
// 0x0054 (0x0054 - 0x0000)
struct FCharacterSetting final
{
public:
	uint8                                         bOverride_CustomCharacterLightingIntensity : 1;    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightHorizontalAngle : 1;                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterDirectionMixIntensity : 1;      // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MixCharacterLightingIntensity : 1;       // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterAmbientColor : 1;               // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterMainLightColor : 1;             // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterSkinShadowColorIntensity : 1;   // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterSSSIntensity : 1;               // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterRimColor : 1;                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_GlobalShadowIntensity : 1;               // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UseNewCharacterRim : 1;                  // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_GlobalBossShadowIntensity : 1;           // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_182D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomCharacterLightingIntensity;                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterDirectionMixIntensity;                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightHorizontalAngle;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixCharacterLightingIntensity;                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CharacterMainLightColor;                           // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CharacterAmbientColor;                             // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterSSSIntensity;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CharacterRimColor;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalShadowIntensity;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseNewCharacterRim;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalBossShadowIntensity;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterSetting) == 0x000004, "Wrong alignment on FCharacterSetting");
static_assert(sizeof(FCharacterSetting) == 0x000054, "Wrong size on FCharacterSetting");
static_assert(offsetof(FCharacterSetting, CustomCharacterLightingIntensity) == 0x000004, "Member 'FCharacterSetting::CustomCharacterLightingIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterDirectionMixIntensity) == 0x000008, "Member 'FCharacterSetting::CharacterDirectionMixIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, LightHorizontalAngle) == 0x00000C, "Member 'FCharacterSetting::LightHorizontalAngle' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, MixCharacterLightingIntensity) == 0x000010, "Member 'FCharacterSetting::MixCharacterLightingIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterMainLightColor) == 0x000014, "Member 'FCharacterSetting::CharacterMainLightColor' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterAmbientColor) == 0x000024, "Member 'FCharacterSetting::CharacterAmbientColor' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterSSSIntensity) == 0x000034, "Member 'FCharacterSetting::CharacterSSSIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, CharacterRimColor) == 0x000038, "Member 'FCharacterSetting::CharacterRimColor' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, GlobalShadowIntensity) == 0x000048, "Member 'FCharacterSetting::GlobalShadowIntensity' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, UseNewCharacterRim) == 0x00004C, "Member 'FCharacterSetting::UseNewCharacterRim' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, GlobalBossShadowIntensity) == 0x000050, "Member 'FCharacterSetting::GlobalBossShadowIntensity' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroHeightFogSetting
// 0x00A0 (0x00A0 - 0x0000)
struct FKuroHeightFogSetting final
{
public:
	uint8                                         bOverride_DirectionalInscatteringAmount : 1;       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringExponent : 1;     // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringStartDistance : 1; // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringColor : 1;        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Fog1Density : 1;                         // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Fog1HeightOffset : 1;                    // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Fog1Falloff : 1;                         // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Fog1FalloffFarSky : 1;                   // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StartDistance : 1;                       // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaxOpacity : 1;                          // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogNearColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogFarColor : 1;                         // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogBaseColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogNearColorDistance : 1;                // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogFarColorDistance : 1;                 // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogNearFarColorRatio : 1;                // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogMixDistance : 1;                      // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogMixWidth : 1;                         // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowPoint1 : 1;                           // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HighPoint1 : 1;                          // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowFalloff1 : 1;                         // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowSkyFalloff1 : 1;                      // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowHighOffset1 : 1;                      // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudOceanHeight : 1;                    // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudOpacity : 1;                        // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudOceanMaterial : 1;                  // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	float                                         DirectionalInscatteringAmount;                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog1Density;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog1HeightOffset;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog1Falloff;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fog1FalloffFarSky;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOpacity;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogNearColor;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogFarColor;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogBaseColor;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogNearColorDistance;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogFarColorDistance;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogNearFarColorRatio;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMixDistance;                                    // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMixWidth;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowPoint1;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighPoint1;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowFalloff1;                                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowSkyFalloff1;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowHighOffset1;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudOceanHeight;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudOpacity;                                      // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CloudOceanMaterial;                                // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroHeightFogSetting) == 0x000008, "Wrong alignment on FKuroHeightFogSetting");
static_assert(sizeof(FKuroHeightFogSetting) == 0x0000A0, "Wrong size on FKuroHeightFogSetting");
static_assert(offsetof(FKuroHeightFogSetting, DirectionalInscatteringAmount) == 0x000004, "Member 'FKuroHeightFogSetting::DirectionalInscatteringAmount' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, DirectionalInscatteringExponent) == 0x000008, "Member 'FKuroHeightFogSetting::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, DirectionalInscatteringStartDistance) == 0x00000C, "Member 'FKuroHeightFogSetting::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, DirectionalInscatteringColor) == 0x000010, "Member 'FKuroHeightFogSetting::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, Fog1Density) == 0x000020, "Member 'FKuroHeightFogSetting::Fog1Density' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, Fog1HeightOffset) == 0x000024, "Member 'FKuroHeightFogSetting::Fog1HeightOffset' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, Fog1Falloff) == 0x000028, "Member 'FKuroHeightFogSetting::Fog1Falloff' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, Fog1FalloffFarSky) == 0x00002C, "Member 'FKuroHeightFogSetting::Fog1FalloffFarSky' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, StartDistance) == 0x000030, "Member 'FKuroHeightFogSetting::StartDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, MaxOpacity) == 0x000034, "Member 'FKuroHeightFogSetting::MaxOpacity' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogNearColor) == 0x000038, "Member 'FKuroHeightFogSetting::FogNearColor' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogFarColor) == 0x000048, "Member 'FKuroHeightFogSetting::FogFarColor' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogBaseColor) == 0x000058, "Member 'FKuroHeightFogSetting::FogBaseColor' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogNearColorDistance) == 0x000068, "Member 'FKuroHeightFogSetting::FogNearColorDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogFarColorDistance) == 0x00006C, "Member 'FKuroHeightFogSetting::FogFarColorDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogNearFarColorRatio) == 0x000070, "Member 'FKuroHeightFogSetting::FogNearFarColorRatio' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogMixDistance) == 0x000074, "Member 'FKuroHeightFogSetting::FogMixDistance' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, FogMixWidth) == 0x000078, "Member 'FKuroHeightFogSetting::FogMixWidth' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, LowPoint1) == 0x00007C, "Member 'FKuroHeightFogSetting::LowPoint1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, HighPoint1) == 0x000080, "Member 'FKuroHeightFogSetting::HighPoint1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, LowFalloff1) == 0x000084, "Member 'FKuroHeightFogSetting::LowFalloff1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, LowSkyFalloff1) == 0x000088, "Member 'FKuroHeightFogSetting::LowSkyFalloff1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, LowHighOffset1) == 0x00008C, "Member 'FKuroHeightFogSetting::LowHighOffset1' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, CloudOceanHeight) == 0x000090, "Member 'FKuroHeightFogSetting::CloudOceanHeight' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, CloudOpacity) == 0x000094, "Member 'FKuroHeightFogSetting::CloudOpacity' has a wrong offset!");
static_assert(offsetof(FKuroHeightFogSetting, CloudOceanMaterial) == 0x000098, "Member 'FKuroHeightFogSetting::CloudOceanMaterial' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroTreeSetting
// 0x0038 (0x0038 - 0x0000)
struct FKuroTreeSetting final
{
public:
	uint8                                         bOverride_LineRadius : 1;                          // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DistanceRatio : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LinePower : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NearColor : 1;                           // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FarColor : 1;                            // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NearFarDistance : 1;                     // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Saturation : 1;                          // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_182E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineRadius;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRatio;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinePower;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NearColor;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FarColor;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearFarDistance;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Saturation;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroTreeSetting) == 0x000004, "Wrong alignment on FKuroTreeSetting");
static_assert(sizeof(FKuroTreeSetting) == 0x000038, "Wrong size on FKuroTreeSetting");
static_assert(offsetof(FKuroTreeSetting, LineRadius) == 0x000004, "Member 'FKuroTreeSetting::LineRadius' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, DistanceRatio) == 0x000008, "Member 'FKuroTreeSetting::DistanceRatio' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, LinePower) == 0x00000C, "Member 'FKuroTreeSetting::LinePower' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, NearColor) == 0x000010, "Member 'FKuroTreeSetting::NearColor' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, FarColor) == 0x000020, "Member 'FKuroTreeSetting::FarColor' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, NearFarDistance) == 0x000030, "Member 'FKuroTreeSetting::NearFarDistance' has a wrong offset!");
static_assert(offsetof(FKuroTreeSetting, Saturation) == 0x000034, "Member 'FKuroTreeSetting::Saturation' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.VolumetricFogSetting
// 0x002C (0x002C - 0x0000)
struct FVolumetricFogSetting final
{
public:
	uint8                                         bOverride_LocalLightScatteringMultiplier : 1;      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricScatteringIntensity : 1;       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ExtinctionScale : 1;                     // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScatteringDistribution : 1;              // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogAlbedo : 1;                 // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogEmssive : 1;                // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ViewDistance : 1;                        // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableVolumetriFog : 1;                           // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastVolumetricShadow : 1;                         // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_182F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricDensity;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogAlbedo;                               // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalLightScatteringMultiplier;                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtinctionScale;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScatteringDistribution;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewDistance;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVolumetricFogSetting) == 0x000004, "Wrong alignment on FVolumetricFogSetting");
static_assert(sizeof(FVolumetricFogSetting) == 0x00002C, "Wrong size on FVolumetricFogSetting");
static_assert(offsetof(FVolumetricFogSetting, VolumetricDensity) == 0x000004, "Member 'FVolumetricFogSetting::VolumetricDensity' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricScatteringIntensity) == 0x000008, "Member 'FVolumetricFogSetting::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, VolumetricFogAlbedo) == 0x00000C, "Member 'FVolumetricFogSetting::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, LocalLightScatteringMultiplier) == 0x00001C, "Member 'FVolumetricFogSetting::LocalLightScatteringMultiplier' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, ExtinctionScale) == 0x000020, "Member 'FVolumetricFogSetting::ExtinctionScale' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, ScatteringDistribution) == 0x000024, "Member 'FVolumetricFogSetting::ScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FVolumetricFogSetting, ViewDistance) == 0x000028, "Member 'FVolumetricFogSetting::ViewDistance' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.SkyAtmosphereSetting
// 0x0010 (0x0010 - 0x0000)
struct FSkyAtmosphereSetting final
{
public:
	uint8                                         bOverride_LightShaftBloomScale : 1;                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightShaftBloomThreshold : 1;            // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightShaftBloomMaxBrightness : 1;        // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1830[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightShaftBloomScale;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightShaftBloomThreshold;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightShaftBloomMaxBrightness;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyAtmosphereSetting) == 0x000004, "Wrong alignment on FSkyAtmosphereSetting");
static_assert(sizeof(FSkyAtmosphereSetting) == 0x000010, "Wrong size on FSkyAtmosphereSetting");
static_assert(offsetof(FSkyAtmosphereSetting, LightShaftBloomScale) == 0x000004, "Member 'FSkyAtmosphereSetting::LightShaftBloomScale' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereSetting, LightShaftBloomThreshold) == 0x000008, "Member 'FSkyAtmosphereSetting::LightShaftBloomThreshold' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereSetting, LightShaftBloomMaxBrightness) == 0x00000C, "Member 'FSkyAtmosphereSetting::LightShaftBloomMaxBrightness' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSkyboxSetting
// 0x00C8 (0x00C8 - 0x0000)
struct FKuroSkyboxSetting final
{
public:
	uint8                                         bOverride_ZenithColor : 1;                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NadirColor : 1;                          // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NadirFalloff : 1;                        // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NadirFalloff_Mobile : 1;                 // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonColor : 1;                        // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonFalloff : 1;                      // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunDiscColor : 1;                        // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunScatterColor : 1;                     // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunSize : 1;                             // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunScatterSize : 1;                      // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonTexture : 1;                         // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonPhase : 1;                           // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonDiscColor : 1;                       // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonScatterColor : 1;                    // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonSize : 1;                            // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonScatterSize : 1;                     // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ExtremeWeatherWeight : 1;                // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ST_TopColor : 1;                         // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ST_DomeColorTint : 1;                    // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ST_TopWidth : 1;                         // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1831[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ZenithColor;                                       // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NadirColor;                                        // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NadirFalloff;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NadirFalloff_Mobile;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HorizonColor;                                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonFalloff;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunDiscColor;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunScatterColor;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunSize;                                           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunScatterSize;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonDiscColor;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MoonTexture;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonPhase;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonScatterColor;                                  // 0x0084(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonSize;                                          // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonScatterSize;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtremeWeatherWeight;                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ST_TopColor;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ST_DomeColorTint;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ST_TopWidth;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1832[0x4];                                     // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSkyboxSetting) == 0x000008, "Wrong alignment on FKuroSkyboxSetting");
static_assert(sizeof(FKuroSkyboxSetting) == 0x0000C8, "Wrong size on FKuroSkyboxSetting");
static_assert(offsetof(FKuroSkyboxSetting, ZenithColor) == 0x000004, "Member 'FKuroSkyboxSetting::ZenithColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, NadirColor) == 0x000014, "Member 'FKuroSkyboxSetting::NadirColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, NadirFalloff) == 0x000024, "Member 'FKuroSkyboxSetting::NadirFalloff' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, NadirFalloff_Mobile) == 0x000028, "Member 'FKuroSkyboxSetting::NadirFalloff_Mobile' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, HorizonColor) == 0x00002C, "Member 'FKuroSkyboxSetting::HorizonColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, HorizonFalloff) == 0x00003C, "Member 'FKuroSkyboxSetting::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunDiscColor) == 0x000040, "Member 'FKuroSkyboxSetting::SunDiscColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunScatterColor) == 0x000050, "Member 'FKuroSkyboxSetting::SunScatterColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunSize) == 0x000060, "Member 'FKuroSkyboxSetting::SunSize' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, SunScatterSize) == 0x000064, "Member 'FKuroSkyboxSetting::SunScatterSize' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonDiscColor) == 0x000068, "Member 'FKuroSkyboxSetting::MoonDiscColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonTexture) == 0x000078, "Member 'FKuroSkyboxSetting::MoonTexture' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonPhase) == 0x000080, "Member 'FKuroSkyboxSetting::MoonPhase' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonScatterColor) == 0x000084, "Member 'FKuroSkyboxSetting::MoonScatterColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonSize) == 0x000094, "Member 'FKuroSkyboxSetting::MoonSize' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, MoonScatterSize) == 0x000098, "Member 'FKuroSkyboxSetting::MoonScatterSize' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, ExtremeWeatherWeight) == 0x00009C, "Member 'FKuroSkyboxSetting::ExtremeWeatherWeight' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, ST_TopColor) == 0x0000A0, "Member 'FKuroSkyboxSetting::ST_TopColor' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, ST_DomeColorTint) == 0x0000B0, "Member 'FKuroSkyboxSetting::ST_DomeColorTint' has a wrong offset!");
static_assert(offsetof(FKuroSkyboxSetting, ST_TopWidth) == 0x0000C0, "Member 'FKuroSkyboxSetting::ST_TopWidth' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.SunSetting
// 0x0020 (0x0020 - 0x0000)
struct FSunSetting final
{
public:
	uint8                                         bOverride_SunColor : 1;                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunDiskIntensity : 1;                    // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunRadius : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunHardness : 1;                         // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1833[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SunColor;                                          // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDiskIntensity;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunRadius;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunHardness;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSunSetting) == 0x000004, "Wrong alignment on FSunSetting");
static_assert(sizeof(FSunSetting) == 0x000020, "Wrong size on FSunSetting");
static_assert(offsetof(FSunSetting, SunColor) == 0x000004, "Member 'FSunSetting::SunColor' has a wrong offset!");
static_assert(offsetof(FSunSetting, SunDiskIntensity) == 0x000014, "Member 'FSunSetting::SunDiskIntensity' has a wrong offset!");
static_assert(offsetof(FSunSetting, SunRadius) == 0x000018, "Member 'FSunSetting::SunRadius' has a wrong offset!");
static_assert(offsetof(FSunSetting, SunHardness) == 0x00001C, "Member 'FSunSetting::SunHardness' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroLensFlareSetting
// 0x0028 (0x0028 - 0x0000)
struct FKuroLensFlareSetting final
{
public:
	uint8                                         bOverride_LensFlareConfigData : 1;                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareTint : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareRampIndex : 1;                  // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1834[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USunLensFlareConfig*                    LensFlareConfigData;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LensFlareTint;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LensFlareRampIndex;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_PPLensflareType : 1;                     // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EKuroPPLensflareType                          PPLensflareType;                                   // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1835[0x2];                                     // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroLensFlareSetting) == 0x000008, "Wrong alignment on FKuroLensFlareSetting");
static_assert(sizeof(FKuroLensFlareSetting) == 0x000028, "Wrong size on FKuroLensFlareSetting");
static_assert(offsetof(FKuroLensFlareSetting, LensFlareConfigData) == 0x000008, "Member 'FKuroLensFlareSetting::LensFlareConfigData' has a wrong offset!");
static_assert(offsetof(FKuroLensFlareSetting, LensFlareTint) == 0x000010, "Member 'FKuroLensFlareSetting::LensFlareTint' has a wrong offset!");
static_assert(offsetof(FKuroLensFlareSetting, LensFlareRampIndex) == 0x000020, "Member 'FKuroLensFlareSetting::LensFlareRampIndex' has a wrong offset!");
static_assert(offsetof(FKuroLensFlareSetting, PPLensflareType) == 0x000025, "Member 'FKuroLensFlareSetting::PPLensflareType' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.WindSetting
// 0x0028 (0x0028 - 0x0000)
struct FWindSetting final
{
public:
	uint8                                         bOverride_WindDirection : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1836[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDirection;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WindSpeed : 1;                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SoundPower : 1;                          // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1837[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindSpeed;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WindPower : 1;                           // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1838[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindPower;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_SkyWind : 1;                             // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1839[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SkyWind;                                           // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundPower;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindSetting) == 0x000004, "Wrong alignment on FWindSetting");
static_assert(sizeof(FWindSetting) == 0x000028, "Wrong size on FWindSetting");
static_assert(offsetof(FWindSetting, WindDirection) == 0x000004, "Member 'FWindSetting::WindDirection' has a wrong offset!");
static_assert(offsetof(FWindSetting, WindSpeed) == 0x00000C, "Member 'FWindSetting::WindSpeed' has a wrong offset!");
static_assert(offsetof(FWindSetting, WindPower) == 0x000014, "Member 'FWindSetting::WindPower' has a wrong offset!");
static_assert(offsetof(FWindSetting, SkyWind) == 0x00001C, "Member 'FWindSetting::SkyWind' has a wrong offset!");
static_assert(offsetof(FWindSetting, SoundPower) == 0x000024, "Member 'FWindSetting::SoundPower' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.MoonSetting
// 0x0024 (0x0024 - 0x0000)
struct FMoonSetting final
{
public:
	uint8                                         bOverride_MoonAlpha : 1;                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonSize : 1;                            // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonColor : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonBrightness : 1;                      // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonShine : 1;                           // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_183A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonAlpha;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonSize;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonColor;                                         // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonBrightness;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonShine;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoonSetting) == 0x000004, "Wrong alignment on FMoonSetting");
static_assert(sizeof(FMoonSetting) == 0x000024, "Wrong size on FMoonSetting");
static_assert(offsetof(FMoonSetting, MoonAlpha) == 0x000004, "Member 'FMoonSetting::MoonAlpha' has a wrong offset!");
static_assert(offsetof(FMoonSetting, MoonSize) == 0x000008, "Member 'FMoonSetting::MoonSize' has a wrong offset!");
static_assert(offsetof(FMoonSetting, MoonColor) == 0x00000C, "Member 'FMoonSetting::MoonColor' has a wrong offset!");
static_assert(offsetof(FMoonSetting, MoonBrightness) == 0x00001C, "Member 'FMoonSetting::MoonBrightness' has a wrong offset!");
static_assert(offsetof(FMoonSetting, MoonShine) == 0x000020, "Member 'FMoonSetting::MoonShine' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.StarSetting
// 0x0020 (0x0020 - 0x0000)
struct FStarSetting final
{
public:
	uint8                                         bOverride_StarFieldColor : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarSize : 1;                            // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarSpeed : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarSwitch : 1;                          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_183B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           StarFieldColor;                                    // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarSize;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarSpeed;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarSwitch;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStarSetting) == 0x000004, "Wrong alignment on FStarSetting");
static_assert(sizeof(FStarSetting) == 0x000020, "Wrong size on FStarSetting");
static_assert(offsetof(FStarSetting, StarFieldColor) == 0x000004, "Member 'FStarSetting::StarFieldColor' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarSize) == 0x000014, "Member 'FStarSetting::StarSize' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarSpeed) == 0x000018, "Member 'FStarSetting::StarSpeed' has a wrong offset!");
static_assert(offsetof(FStarSetting, StarSwitch) == 0x00001C, "Member 'FStarSetting::StarSwitch' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudBillboardSetting
// 0x00D8 (0x00D8 - 0x0000)
struct FKuroCloudBillboardSetting final
{
public:
	uint8                                         bOverride_CloudShapeTexture : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudUneventTexture : 1;                 // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudDetailTexture : 1;                  // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudFill : 1;                           // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudFillValueMax : 1;                   // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudFillValueMin : 1;                   // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudSize : 1;                           // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudSizeRatioX : 1;                     // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudSizeRatioY : 1;                     // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ContrastMax : 1;                         // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ContrastMin : 1;                         // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ContrastUnevenPow : 1;                   // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ContrastUnevenSize : 1;                  // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DetailSize : 1;                          // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DetailStr : 1;                           // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DetailStrFewCloud : 1;                   // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudColorOverall : 1;                   // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudColor : 1;                          // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightColorSunNear : 1;                   // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightEmissive : 1;                       // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightRadius : 1;                         // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightUVOffset : 1;                       // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RimColor : 1;                            // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RimContrast : 1;                         // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunEdgePow : 1;                          // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyColorOverAll : 1;                     // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyColorPow : 1;                         // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunGlowColor : 1;                        // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunGlowEmissive : 1;                     // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunGlowRadius : 1;                       // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_183C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CloudShapeTexture;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudUneventTexture;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudDetailTexture;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudFill;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudFillValueMax;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudFillValueMin;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudSize;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudSizeRatioX;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudSizeRatioY;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContrastMax;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContrastMin;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContrastUnevenPow;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContrastUnevenSize;                                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailSize;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailStr;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailStrFewCloud;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudColorOverall;                                 // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudColor;                                        // 0x0064(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColorSunNear;                                 // 0x0074(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightEmissive;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightRadius;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightUVOffset;                                     // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimColor;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimContrast;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunEdgePow;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyColorOverAll;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyColorPow;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SunGlowColor;                                      // 0x00BC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunGlowEmissive;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunGlowRadius;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183D[0x4];                                     // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroCloudBillboardSetting) == 0x000008, "Wrong alignment on FKuroCloudBillboardSetting");
static_assert(sizeof(FKuroCloudBillboardSetting) == 0x0000D8, "Wrong size on FKuroCloudBillboardSetting");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudShapeTexture) == 0x000008, "Member 'FKuroCloudBillboardSetting::CloudShapeTexture' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudUneventTexture) == 0x000010, "Member 'FKuroCloudBillboardSetting::CloudUneventTexture' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudDetailTexture) == 0x000018, "Member 'FKuroCloudBillboardSetting::CloudDetailTexture' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudFill) == 0x000020, "Member 'FKuroCloudBillboardSetting::CloudFill' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudFillValueMax) == 0x000024, "Member 'FKuroCloudBillboardSetting::CloudFillValueMax' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudFillValueMin) == 0x000028, "Member 'FKuroCloudBillboardSetting::CloudFillValueMin' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudSize) == 0x00002C, "Member 'FKuroCloudBillboardSetting::CloudSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudSizeRatioX) == 0x000030, "Member 'FKuroCloudBillboardSetting::CloudSizeRatioX' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudSizeRatioY) == 0x000034, "Member 'FKuroCloudBillboardSetting::CloudSizeRatioY' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, ContrastMax) == 0x000038, "Member 'FKuroCloudBillboardSetting::ContrastMax' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, ContrastMin) == 0x00003C, "Member 'FKuroCloudBillboardSetting::ContrastMin' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, ContrastUnevenPow) == 0x000040, "Member 'FKuroCloudBillboardSetting::ContrastUnevenPow' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, ContrastUnevenSize) == 0x000044, "Member 'FKuroCloudBillboardSetting::ContrastUnevenSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, DetailSize) == 0x000048, "Member 'FKuroCloudBillboardSetting::DetailSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, DetailStr) == 0x00004C, "Member 'FKuroCloudBillboardSetting::DetailStr' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, DetailStrFewCloud) == 0x000050, "Member 'FKuroCloudBillboardSetting::DetailStrFewCloud' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudColorOverall) == 0x000054, "Member 'FKuroCloudBillboardSetting::CloudColorOverall' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, CloudColor) == 0x000064, "Member 'FKuroCloudBillboardSetting::CloudColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, LightColorSunNear) == 0x000074, "Member 'FKuroCloudBillboardSetting::LightColorSunNear' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, LightEmissive) == 0x000084, "Member 'FKuroCloudBillboardSetting::LightEmissive' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, LightRadius) == 0x000088, "Member 'FKuroCloudBillboardSetting::LightRadius' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, LightUVOffset) == 0x00008C, "Member 'FKuroCloudBillboardSetting::LightUVOffset' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, RimColor) == 0x000090, "Member 'FKuroCloudBillboardSetting::RimColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, RimContrast) == 0x0000A0, "Member 'FKuroCloudBillboardSetting::RimContrast' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, SunEdgePow) == 0x0000A4, "Member 'FKuroCloudBillboardSetting::SunEdgePow' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, SkyColorOverAll) == 0x0000A8, "Member 'FKuroCloudBillboardSetting::SkyColorOverAll' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, SkyColorPow) == 0x0000B8, "Member 'FKuroCloudBillboardSetting::SkyColorPow' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, SunGlowColor) == 0x0000BC, "Member 'FKuroCloudBillboardSetting::SunGlowColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, SunGlowEmissive) == 0x0000CC, "Member 'FKuroCloudBillboardSetting::SunGlowEmissive' has a wrong offset!");
static_assert(offsetof(FKuroCloudBillboardSetting, SunGlowRadius) == 0x0000D0, "Member 'FKuroCloudBillboardSetting::SunGlowRadius' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudCardSetting
// 0x0080 (0x0080 - 0x0000)
struct FKuroCloudCardSetting final
{
public:
	uint8                                         bOverride_AtmoLightScale : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Contrast : 1;                            // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DarkBrightness : 1;                      // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Exp : 1;                                 // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonFalloff : 1;                      // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonMax : 1;                          // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonMin : 1;                          // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HorizonOffset : 1;                       // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightBrightness : 1;                     // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LitOffset : 1;                           // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Translucency : 1;                        // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BaseColor : 1;                           // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DarkColor : 1;                           // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Emissive : 1;                            // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightColor : 1;                          // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Offset : 1;                              // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_183E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AtmoLightScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DarkBrightness;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exp;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonFalloff;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonMax;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonMin;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonOffset;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightBrightness;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LitOffset;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Translucency;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DarkColor;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Emissive;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Offset;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCloudCardSetting) == 0x000004, "Wrong alignment on FKuroCloudCardSetting");
static_assert(sizeof(FKuroCloudCardSetting) == 0x000080, "Wrong size on FKuroCloudCardSetting");
static_assert(offsetof(FKuroCloudCardSetting, AtmoLightScale) == 0x000004, "Member 'FKuroCloudCardSetting::AtmoLightScale' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Contrast) == 0x000008, "Member 'FKuroCloudCardSetting::Contrast' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, DarkBrightness) == 0x00000C, "Member 'FKuroCloudCardSetting::DarkBrightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Exp) == 0x000010, "Member 'FKuroCloudCardSetting::Exp' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, HorizonFalloff) == 0x000014, "Member 'FKuroCloudCardSetting::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, HorizonMax) == 0x000018, "Member 'FKuroCloudCardSetting::HorizonMax' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, HorizonMin) == 0x00001C, "Member 'FKuroCloudCardSetting::HorizonMin' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, HorizonOffset) == 0x000020, "Member 'FKuroCloudCardSetting::HorizonOffset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, LightBrightness) == 0x000024, "Member 'FKuroCloudCardSetting::LightBrightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, LitOffset) == 0x000028, "Member 'FKuroCloudCardSetting::LitOffset' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Translucency) == 0x00002C, "Member 'FKuroCloudCardSetting::Translucency' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, BaseColor) == 0x000030, "Member 'FKuroCloudCardSetting::BaseColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, DarkColor) == 0x000040, "Member 'FKuroCloudCardSetting::DarkColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Emissive) == 0x000050, "Member 'FKuroCloudCardSetting::Emissive' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, LightColor) == 0x000060, "Member 'FKuroCloudCardSetting::LightColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudCardSetting, Offset) == 0x000070, "Member 'FKuroCloudCardSetting::Offset' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMilkyWaySetting
// 0x0088 (0x0088 - 0x0000)
struct FKuroMilkyWaySetting final
{
public:
	uint8                                         bOverride_MilkWayTexture : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkWayStarTexture : 1;                  // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisortionTexture : 1;                    // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkyWayTint : 1;                        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkyWayBrightness : 1;                  // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkyWayUV : 1;                          // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarTint : 1;                            // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarBrightness : 1;                      // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StarUV : 1;                              // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisortionStrength : 1;                   // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisortionUV : 1;                         // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MilkyWayPosition : 1;                    // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_183F[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MilkWayTexture;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MilkWayStarTexture;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DisortionTexture;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MilkyWayTint;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MilkyWayBrightness;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MilkyWayUV;                                        // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StarTint;                                          // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarBrightness;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StarUV;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisortionStrength;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DisortionUV;                                       // 0x006C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MilkyWayPosition;                                  // 0x007C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroMilkyWaySetting) == 0x000008, "Wrong alignment on FKuroMilkyWaySetting");
static_assert(sizeof(FKuroMilkyWaySetting) == 0x000088, "Wrong size on FKuroMilkyWaySetting");
static_assert(offsetof(FKuroMilkyWaySetting, MilkWayTexture) == 0x000008, "Member 'FKuroMilkyWaySetting::MilkWayTexture' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkWayStarTexture) == 0x000010, "Member 'FKuroMilkyWaySetting::MilkWayStarTexture' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, DisortionTexture) == 0x000018, "Member 'FKuroMilkyWaySetting::DisortionTexture' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkyWayTint) == 0x000020, "Member 'FKuroMilkyWaySetting::MilkyWayTint' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkyWayBrightness) == 0x000030, "Member 'FKuroMilkyWaySetting::MilkyWayBrightness' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkyWayUV) == 0x000034, "Member 'FKuroMilkyWaySetting::MilkyWayUV' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, StarTint) == 0x000044, "Member 'FKuroMilkyWaySetting::StarTint' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, StarBrightness) == 0x000054, "Member 'FKuroMilkyWaySetting::StarBrightness' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, StarUV) == 0x000058, "Member 'FKuroMilkyWaySetting::StarUV' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, DisortionStrength) == 0x000068, "Member 'FKuroMilkyWaySetting::DisortionStrength' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, DisortionUV) == 0x00006C, "Member 'FKuroMilkyWaySetting::DisortionUV' has a wrong offset!");
static_assert(offsetof(FKuroMilkyWaySetting, MilkyWayPosition) == 0x00007C, "Member 'FKuroMilkyWaySetting::MilkyWayPosition' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.GIMiscSetting
// 0x00D0 (0x00D0 - 0x0000)
struct FGIMiscSetting final
{
public:
	uint8                                         bOverride_ThunderType : 1;                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1840[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EKuroThunderType                              ThunderType;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1841[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_ThunderGenerateChanceScale : 1;          // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1842[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThunderGenerateChanceScale;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ThunderAttackChance : 1;                 // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1843[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThunderAttackChance;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ThunderLightBrightness : 1;              // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1844[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThunderLightBrightness;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ThunderCloudBrightness : 1;              // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1845[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThunderCloudBrightness;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_RainType : 1;                            // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1846[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EKuroRainType                                 RainType;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1847[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_RainDensity : 1;                         // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainFogDensity : 1;                      // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SnowDensity : 1;                         // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RoughnessDensity : 1;                    // 0x0030(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MixRoughness : 1;                        // 0x0030(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MixRoughness_Mobile : 1;                 // 0x0030(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OverrideRainDensity : 1;                 // 0x0030(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainDensityValueOverride : 1;            // 0x0030(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OverrideSnowDensity : 1;                 // 0x0031(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SnowDensityValueOverride : 1;            // 0x0031(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainSnowColor : 1;                       // 0x0031(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainSnowEmissive : 1;                    // 0x0031(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OverrideRainSnowColor : 1;               // 0x0031(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EffectGravity : 1;                       // 0x0031(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OverrideGravity : 1;                     // 0x0031(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_GravityValueOverride : 1;                // 0x0031(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionIntensity : 1;              // 0x0032(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionMapUVScaleBias : 1;         // 0x0032(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionSpeed : 1;                  // 0x0032(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionTexture : 1;                // 0x0032(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroDynamicCloudType : 1;                // 0x0032(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SequenceCloudTimeControl : 1;            // 0x0032(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SequenceGlobalTimeControl : 1;           // 0x0032(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaterialDynamicReflectionTexture : 1;    // 0x0032(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogVisibilityCulling : 1;                // 0x0033(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	float                                         RainDensity;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainFogDensity;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowDensity;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessDensity;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixRoughness;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixRoughness_Mobile;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideRainDensity;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDensityValueOverride;                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideSnowDensity;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowDensityValueOverride;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideRainSnowColor;                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RainSnowColor;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSnowEmissive;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectGravity;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravity;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityValueOverride;                              // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionIntensity;                            // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1848[0xC];                                     // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               LightFunctionMapUVScaleBias;                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionSpeed;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1849[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LightFunctionTexture;                              // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroDynamicCloudType                         KuroDynamicCloudType;                              // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184A[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SequenceCloudTimeControl;                          // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequenceGlobalTimeControl;                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184B[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           MaterialDynamicReflectionTexture;                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableGlobalGIQualityLow : 1;                     // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_184C[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogVisibilityCulling;                              // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGIMiscSetting) == 0x000010, "Wrong alignment on FGIMiscSetting");
static_assert(sizeof(FGIMiscSetting) == 0x0000D0, "Wrong size on FGIMiscSetting");
static_assert(offsetof(FGIMiscSetting, ThunderType) == 0x000004, "Member 'FGIMiscSetting::ThunderType' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderGenerateChanceScale) == 0x00000C, "Member 'FGIMiscSetting::ThunderGenerateChanceScale' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderAttackChance) == 0x000014, "Member 'FGIMiscSetting::ThunderAttackChance' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderLightBrightness) == 0x00001C, "Member 'FGIMiscSetting::ThunderLightBrightness' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, ThunderCloudBrightness) == 0x000024, "Member 'FGIMiscSetting::ThunderCloudBrightness' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainType) == 0x00002C, "Member 'FGIMiscSetting::RainType' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainDensity) == 0x000034, "Member 'FGIMiscSetting::RainDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainFogDensity) == 0x000038, "Member 'FGIMiscSetting::RainFogDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, SnowDensity) == 0x00003C, "Member 'FGIMiscSetting::SnowDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RoughnessDensity) == 0x000040, "Member 'FGIMiscSetting::RoughnessDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, MixRoughness) == 0x000044, "Member 'FGIMiscSetting::MixRoughness' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, MixRoughness_Mobile) == 0x000048, "Member 'FGIMiscSetting::MixRoughness_Mobile' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, OverrideRainDensity) == 0x00004C, "Member 'FGIMiscSetting::OverrideRainDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainDensityValueOverride) == 0x000050, "Member 'FGIMiscSetting::RainDensityValueOverride' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, OverrideSnowDensity) == 0x000054, "Member 'FGIMiscSetting::OverrideSnowDensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, SnowDensityValueOverride) == 0x000058, "Member 'FGIMiscSetting::SnowDensityValueOverride' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, OverrideRainSnowColor) == 0x00005C, "Member 'FGIMiscSetting::OverrideRainSnowColor' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainSnowColor) == 0x000060, "Member 'FGIMiscSetting::RainSnowColor' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, RainSnowEmissive) == 0x000070, "Member 'FGIMiscSetting::RainSnowEmissive' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, EffectGravity) == 0x000074, "Member 'FGIMiscSetting::EffectGravity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, OverrideGravity) == 0x000078, "Member 'FGIMiscSetting::OverrideGravity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, GravityValueOverride) == 0x00007C, "Member 'FGIMiscSetting::GravityValueOverride' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionIntensity) == 0x000080, "Member 'FGIMiscSetting::LightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionMapUVScaleBias) == 0x000090, "Member 'FGIMiscSetting::LightFunctionMapUVScaleBias' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionSpeed) == 0x0000A0, "Member 'FGIMiscSetting::LightFunctionSpeed' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, LightFunctionTexture) == 0x0000A8, "Member 'FGIMiscSetting::LightFunctionTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, KuroDynamicCloudType) == 0x0000B0, "Member 'FGIMiscSetting::KuroDynamicCloudType' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, SequenceCloudTimeControl) == 0x0000B4, "Member 'FGIMiscSetting::SequenceCloudTimeControl' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, SequenceGlobalTimeControl) == 0x0000B8, "Member 'FGIMiscSetting::SequenceGlobalTimeControl' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, MaterialDynamicReflectionTexture) == 0x0000C0, "Member 'FGIMiscSetting::MaterialDynamicReflectionTexture' has a wrong offset!");
static_assert(offsetof(FGIMiscSetting, FogVisibilityCulling) == 0x0000CC, "Member 'FGIMiscSetting::FogVisibilityCulling' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.GIClusteredStuffSetting
// 0x0018 (0x0018 - 0x0000)
struct FGIClusteredStuffSetting final
{
public:
	uint8                                         bOverride_ClusteredStuffAssets : 1;                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_184D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EKuroClusteredStuffBlendMode                  BlendMode;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClusteredStuffDataAsset*>       ClusteredStuffAssets;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGIClusteredStuffSetting) == 0x000008, "Wrong alignment on FGIClusteredStuffSetting");
static_assert(sizeof(FGIClusteredStuffSetting) == 0x000018, "Wrong size on FGIClusteredStuffSetting");
static_assert(offsetof(FGIClusteredStuffSetting, BlendMode) == 0x000004, "Member 'FGIClusteredStuffSetting::BlendMode' has a wrong offset!");
static_assert(offsetof(FGIClusteredStuffSetting, ClusteredStuffAssets) == 0x000008, "Member 'FGIClusteredStuffSetting::ClusteredStuffAssets' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroGIMPCSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FKuroGIMPCSetting final
{
public:
	uint8                                         bOverride_FloatParameters : 1;                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_184F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      FloatParameters;                                   // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ColorParameters : 1;                     // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1850[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLinearColor>        ColorParameters;                                   // 0x0060(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroGIMPCSetting) == 0x000008, "Wrong alignment on FKuroGIMPCSetting");
static_assert(sizeof(FKuroGIMPCSetting) == 0x0000B0, "Wrong size on FKuroGIMPCSetting");
static_assert(offsetof(FKuroGIMPCSetting, FloatParameters) == 0x000008, "Member 'FKuroGIMPCSetting::FloatParameters' has a wrong offset!");
static_assert(offsetof(FKuroGIMPCSetting, ColorParameters) == 0x000060, "Member 'FKuroGIMPCSetting::ColorParameters' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroPostProcessSetting
// 0x0038 (0x0038 - 0x0000)
struct FKuroPostProcessSetting final
{
public:
	uint8                                         bOverride_KuroBloomIntensity : 1;                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomThreshold : 1;                  // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakIntensity : 1;            // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakThreshold : 1;            // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakLength : 1;               // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakMipLevel : 1;             // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakRatio : 1;                // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_KuroBloomStreakOrientation : 1;          // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGradingIntensity : 1;               // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGradingLUT : 1;                     // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureDayBias : 1;                 // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureNightBias : 1;               // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1851[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KuroBloomIntensity;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomThreshold;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakIntensity;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakThreshold;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakLength;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakMipLevel;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakRatio;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KuroBloomStreakOrientation;                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorGradingIntensity;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ColorGradingLUT;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureDayBias;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureNightBias;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroPostProcessSetting) == 0x000008, "Wrong alignment on FKuroPostProcessSetting");
static_assert(sizeof(FKuroPostProcessSetting) == 0x000038, "Wrong size on FKuroPostProcessSetting");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomIntensity) == 0x000004, "Member 'FKuroPostProcessSetting::KuroBloomIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomThreshold) == 0x000008, "Member 'FKuroPostProcessSetting::KuroBloomThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakIntensity) == 0x00000C, "Member 'FKuroPostProcessSetting::KuroBloomStreakIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakThreshold) == 0x000010, "Member 'FKuroPostProcessSetting::KuroBloomStreakThreshold' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakLength) == 0x000014, "Member 'FKuroPostProcessSetting::KuroBloomStreakLength' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakMipLevel) == 0x000018, "Member 'FKuroPostProcessSetting::KuroBloomStreakMipLevel' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakRatio) == 0x00001C, "Member 'FKuroPostProcessSetting::KuroBloomStreakRatio' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, KuroBloomStreakOrientation) == 0x000020, "Member 'FKuroPostProcessSetting::KuroBloomStreakOrientation' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ColorGradingIntensity) == 0x000024, "Member 'FKuroPostProcessSetting::ColorGradingIntensity' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, ColorGradingLUT) == 0x000028, "Member 'FKuroPostProcessSetting::ColorGradingLUT' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, AutoExposureDayBias) == 0x000030, "Member 'FKuroPostProcessSetting::AutoExposureDayBias' has a wrong offset!");
static_assert(offsetof(FKuroPostProcessSetting, AutoExposureNightBias) == 0x000034, "Member 'FKuroPostProcessSetting::AutoExposureNightBias' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroGISetting
// 0x0B40 (0x0B40 - 0x0000)
struct FKuroGISetting final
{
public:
	struct FMainLightSetting                      MainLightSetting;                                  // 0x0000(0x0034)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1852[0xC];                                     // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkyLightSetting                       SkyLightSetting;                                   // 0x0040(0x0120)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FShadowTintSetting                     ShadowTintSetting;                                 // 0x0160(0x0018)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterSetting                      CharacterSetting;                                  // 0x0178(0x0054)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1853[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroHeightFogSetting                  KuroFogSetting;                                    // 0x01D0(0x00A0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroTreeSetting                       KuroTreeSetting;                                   // 0x0270(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FVolumetricFogSetting                  VolumetricFogSetting;                              // 0x02A8(0x002C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyAtmosphereSetting                  SkyAtmoSphereSetting;                              // 0x02D4(0x0010)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1854[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroSkyboxSetting                     KuroSkybox;                                        // 0x02E8(0x00C8)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSunSetting                            SunSetting;                                        // 0x03B0(0x0020)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroLensFlareSetting                  LensFlareSetting;                                  // 0x03D0(0x0028)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FWindSetting                           WindSetting;                                       // 0x03F8(0x0028)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FMoonSetting                           MoonSetting;                                       // 0x0420(0x0024)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FStarSetting                           StarSetting;                                       // 0x0444(0x0020)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1855[0x4];                                     // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCloudBillboardSetting             CloudBillboardSetting1;                            // 0x0468(0x00D8)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroCloudBillboardSetting             CloudBillboardSetting2;                            // 0x0540(0x00D8)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroCloudCardSetting                  CloudCardSetting;                                  // 0x0618(0x0080)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FKuroMilkyWaySetting                   MilkyWaySetting;                                   // 0x0698(0x0088)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FGIMiscSetting                         MiscSetting;                                       // 0x0720(0x00D0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FGIClusteredStuffSetting               ClusteredStuffSetting;                             // 0x07F0(0x0018)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKuroGIMPCSetting                      GIMPCSetting;                                      // 0x0808(0x00B0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	struct FKuroPostProcessSetting                KuroPostProcess;                                   // 0x08B8(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1856[0x250];                                   // 0x08F0(0x0250)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroGISetting) == 0x000010, "Wrong alignment on FKuroGISetting");
static_assert(sizeof(FKuroGISetting) == 0x000B40, "Wrong size on FKuroGISetting");
static_assert(offsetof(FKuroGISetting, MainLightSetting) == 0x000000, "Member 'FKuroGISetting::MainLightSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, SkyLightSetting) == 0x000040, "Member 'FKuroGISetting::SkyLightSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, ShadowTintSetting) == 0x000160, "Member 'FKuroGISetting::ShadowTintSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, CharacterSetting) == 0x000178, "Member 'FKuroGISetting::CharacterSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroFogSetting) == 0x0001D0, "Member 'FKuroGISetting::KuroFogSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroTreeSetting) == 0x000270, "Member 'FKuroGISetting::KuroTreeSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, VolumetricFogSetting) == 0x0002A8, "Member 'FKuroGISetting::VolumetricFogSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, SkyAtmoSphereSetting) == 0x0002D4, "Member 'FKuroGISetting::SkyAtmoSphereSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroSkybox) == 0x0002E8, "Member 'FKuroGISetting::KuroSkybox' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, SunSetting) == 0x0003B0, "Member 'FKuroGISetting::SunSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, LensFlareSetting) == 0x0003D0, "Member 'FKuroGISetting::LensFlareSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, WindSetting) == 0x0003F8, "Member 'FKuroGISetting::WindSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, MoonSetting) == 0x000420, "Member 'FKuroGISetting::MoonSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, StarSetting) == 0x000444, "Member 'FKuroGISetting::StarSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, CloudBillboardSetting1) == 0x000468, "Member 'FKuroGISetting::CloudBillboardSetting1' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, CloudBillboardSetting2) == 0x000540, "Member 'FKuroGISetting::CloudBillboardSetting2' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, CloudCardSetting) == 0x000618, "Member 'FKuroGISetting::CloudCardSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, MilkyWaySetting) == 0x000698, "Member 'FKuroGISetting::MilkyWaySetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, MiscSetting) == 0x000720, "Member 'FKuroGISetting::MiscSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, ClusteredStuffSetting) == 0x0007F0, "Member 'FKuroGISetting::ClusteredStuffSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, GIMPCSetting) == 0x000808, "Member 'FKuroGISetting::GIMPCSetting' has a wrong offset!");
static_assert(offsetof(FKuroGISetting, KuroPostProcess) == 0x0008B8, "Member 'FKuroGISetting::KuroPostProcess' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroCloudLayerSetting
// 0x00D0 (0x00D0 - 0x0000)
struct FKuroCloudLayerSetting final
{
public:
	uint8                                         bOverride_CloudsDensity : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsBlend : 1;                         // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsBloom : 1;                         // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_UVScale : 1;                             // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindForceScale : 1;                      // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BaseLayerSize : 1;                       // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerSize : 1;                     // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudLayer1 : 1;                         // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudLayer2 : 1;                         // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsHardness : 1;                      // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsTranslucent : 1;                   // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsVertexDensity : 1;                 // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsFluffy : 1;                        // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsDistotion : 1;                     // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsScattering : 1;                    // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsAmbient : 1;                       // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsShadowSize : 1;                    // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsShadowSoft : 1;                    // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsUpperBrightness : 1;               // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsLowerBrightness : 1;               // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsUpperColor : 1;                    // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsLowerColor : 1;                    // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsBackgroundColor : 1;               // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsBackground : 1;                    // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudsHorizonAlpha : 1;                  // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindDynamic : 1;                         // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindDispersing : 1;                      // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerAlpha : 1;                    // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerColor : 1;                    // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerScale : 1;                    // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerHardness : 1;                 // 0x0003(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondLayerWind : 1;                     // 0x0003(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	float                                         CloudsDensity;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsBlend;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsBloom;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UVScale;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindForceScale;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1857[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               BaseLayerSize;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               SecondLayerSize;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudLayer1;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CloudLayer2;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsHardness;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsTranslucent;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsVertexDensity;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsFluffy;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsDistotion;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsScattering;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsAmbient;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsShadowSize;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsShadowSoft;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsUpperBrightness;                             // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsLowerBrightness;                             // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudsUpperColor;                                  // 0x007C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudsLowerColor;                                  // 0x008C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudsBackgroundColor;                             // 0x009C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsBackground;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudsHorizonAlpha;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDynamic;                                       // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDispersing;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerAlpha;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerColor;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerScale;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerHardness;                               // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondLayerWind;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroCloudLayerSetting) == 0x000010, "Wrong alignment on FKuroCloudLayerSetting");
static_assert(sizeof(FKuroCloudLayerSetting) == 0x0000D0, "Wrong size on FKuroCloudLayerSetting");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsDensity) == 0x000004, "Member 'FKuroCloudLayerSetting::CloudsDensity' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsBlend) == 0x000008, "Member 'FKuroCloudLayerSetting::CloudsBlend' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsBloom) == 0x00000C, "Member 'FKuroCloudLayerSetting::CloudsBloom' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, UVScale) == 0x000010, "Member 'FKuroCloudLayerSetting::UVScale' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, WindForceScale) == 0x000014, "Member 'FKuroCloudLayerSetting::WindForceScale' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, BaseLayerSize) == 0x000020, "Member 'FKuroCloudLayerSetting::BaseLayerSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerSize) == 0x000030, "Member 'FKuroCloudLayerSetting::SecondLayerSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudLayer1) == 0x000040, "Member 'FKuroCloudLayerSetting::CloudLayer1' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudLayer2) == 0x000048, "Member 'FKuroCloudLayerSetting::CloudLayer2' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsHardness) == 0x000050, "Member 'FKuroCloudLayerSetting::CloudsHardness' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsTranslucent) == 0x000054, "Member 'FKuroCloudLayerSetting::CloudsTranslucent' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsVertexDensity) == 0x000058, "Member 'FKuroCloudLayerSetting::CloudsVertexDensity' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsFluffy) == 0x00005C, "Member 'FKuroCloudLayerSetting::CloudsFluffy' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsDistotion) == 0x000060, "Member 'FKuroCloudLayerSetting::CloudsDistotion' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsScattering) == 0x000064, "Member 'FKuroCloudLayerSetting::CloudsScattering' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsAmbient) == 0x000068, "Member 'FKuroCloudLayerSetting::CloudsAmbient' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsShadowSize) == 0x00006C, "Member 'FKuroCloudLayerSetting::CloudsShadowSize' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsShadowSoft) == 0x000070, "Member 'FKuroCloudLayerSetting::CloudsShadowSoft' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsUpperBrightness) == 0x000074, "Member 'FKuroCloudLayerSetting::CloudsUpperBrightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsLowerBrightness) == 0x000078, "Member 'FKuroCloudLayerSetting::CloudsLowerBrightness' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsUpperColor) == 0x00007C, "Member 'FKuroCloudLayerSetting::CloudsUpperColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsLowerColor) == 0x00008C, "Member 'FKuroCloudLayerSetting::CloudsLowerColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsBackgroundColor) == 0x00009C, "Member 'FKuroCloudLayerSetting::CloudsBackgroundColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsBackground) == 0x0000AC, "Member 'FKuroCloudLayerSetting::CloudsBackground' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, CloudsHorizonAlpha) == 0x0000B0, "Member 'FKuroCloudLayerSetting::CloudsHorizonAlpha' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, WindDynamic) == 0x0000B4, "Member 'FKuroCloudLayerSetting::WindDynamic' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, WindDispersing) == 0x0000B8, "Member 'FKuroCloudLayerSetting::WindDispersing' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerAlpha) == 0x0000BC, "Member 'FKuroCloudLayerSetting::SecondLayerAlpha' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerColor) == 0x0000C0, "Member 'FKuroCloudLayerSetting::SecondLayerColor' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerScale) == 0x0000C4, "Member 'FKuroCloudLayerSetting::SecondLayerScale' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerHardness) == 0x0000C8, "Member 'FKuroCloudLayerSetting::SecondLayerHardness' has a wrong offset!");
static_assert(offsetof(FKuroCloudLayerSetting, SecondLayerWind) == 0x0000CC, "Member 'FKuroCloudLayerSetting::SecondLayerWind' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroGPUParticleMeshInfo
// 0x0028 (0x0028 - 0x0000)
struct FKuroGPUParticleMeshInfo final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundsCenter;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundsSize;                                        // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroGPUParticleMeshInfo) == 0x000008, "Wrong alignment on FKuroGPUParticleMeshInfo");
static_assert(sizeof(FKuroGPUParticleMeshInfo) == 0x000028, "Wrong size on FKuroGPUParticleMeshInfo");
static_assert(offsetof(FKuroGPUParticleMeshInfo, StartFrame) == 0x000000, "Member 'FKuroGPUParticleMeshInfo::StartFrame' has a wrong offset!");
static_assert(offsetof(FKuroGPUParticleMeshInfo, EndFrame) == 0x000004, "Member 'FKuroGPUParticleMeshInfo::EndFrame' has a wrong offset!");
static_assert(offsetof(FKuroGPUParticleMeshInfo, BoundsCenter) == 0x000008, "Member 'FKuroGPUParticleMeshInfo::BoundsCenter' has a wrong offset!");
static_assert(offsetof(FKuroGPUParticleMeshInfo, BoundsSize) == 0x000014, "Member 'FKuroGPUParticleMeshInfo::BoundsSize' has a wrong offset!");
static_assert(offsetof(FKuroGPUParticleMeshInfo, Mesh) == 0x000020, "Member 'FKuroGPUParticleMeshInfo::Mesh' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroDynamicMaterialCache
// 0x0020 (0x0020 - 0x0000)
struct FKuroDynamicMaterialCache final
{
public:
	TArray<class FName>                           Keyword;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      OriginalVariationMaterialInstance;                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroDynamicMaterialCache) == 0x000008, "Wrong alignment on FKuroDynamicMaterialCache");
static_assert(sizeof(FKuroDynamicMaterialCache) == 0x000020, "Wrong size on FKuroDynamicMaterialCache");
static_assert(offsetof(FKuroDynamicMaterialCache, Keyword) == 0x000000, "Member 'FKuroDynamicMaterialCache::Keyword' has a wrong offset!");
static_assert(offsetof(FKuroDynamicMaterialCache, OriginalVariationMaterialInstance) == 0x000010, "Member 'FKuroDynamicMaterialCache::OriginalVariationMaterialInstance' has a wrong offset!");
static_assert(offsetof(FKuroDynamicMaterialCache, DynamicMaterial) == 0x000018, "Member 'FKuroDynamicMaterialCache::DynamicMaterial' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroMaterialVariationRuntimeInfo
// 0x0250 (0x0250 - 0x0000)
struct FKuroMaterialVariationRuntimeInfo final
{
public:
	TArray<class FName>                           ActiveKeyword;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class UKuroMaterialVariationCollection*       MaterialVariationData;                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKuroDynamicMaterialCache>      DynamicMaterialCache;                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      FloatPropertyCache;                                // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        LinearColorPropertyCache;                          // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture*>            TexturePropertyCache;                              // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      OriginalFloatPropertyCache;                        // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        OriginalLinearColorPropertyCache;                  // 0x0168(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture*>            OriginalTexturePropertyCache;                      // 0x01B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CurrentUseMaterial;                                // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CurrentReplaceMaterial;                            // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkelComp;                                          // 0x0218(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticComp;                                        // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialSlotIndex;                                 // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1858[0x24];                                    // 0x022C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroMaterialVariationRuntimeInfo) == 0x000008, "Wrong alignment on FKuroMaterialVariationRuntimeInfo");
static_assert(sizeof(FKuroMaterialVariationRuntimeInfo) == 0x000250, "Wrong size on FKuroMaterialVariationRuntimeInfo");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, ActiveKeyword) == 0x000000, "Member 'FKuroMaterialVariationRuntimeInfo::ActiveKeyword' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, MaterialVariationData) == 0x000010, "Member 'FKuroMaterialVariationRuntimeInfo::MaterialVariationData' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, DynamicMaterialCache) == 0x000018, "Member 'FKuroMaterialVariationRuntimeInfo::DynamicMaterialCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, FloatPropertyCache) == 0x000028, "Member 'FKuroMaterialVariationRuntimeInfo::FloatPropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, LinearColorPropertyCache) == 0x000078, "Member 'FKuroMaterialVariationRuntimeInfo::LinearColorPropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, TexturePropertyCache) == 0x0000C8, "Member 'FKuroMaterialVariationRuntimeInfo::TexturePropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, OriginalFloatPropertyCache) == 0x000118, "Member 'FKuroMaterialVariationRuntimeInfo::OriginalFloatPropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, OriginalLinearColorPropertyCache) == 0x000168, "Member 'FKuroMaterialVariationRuntimeInfo::OriginalLinearColorPropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, OriginalTexturePropertyCache) == 0x0001B8, "Member 'FKuroMaterialVariationRuntimeInfo::OriginalTexturePropertyCache' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, CurrentUseMaterial) == 0x000208, "Member 'FKuroMaterialVariationRuntimeInfo::CurrentUseMaterial' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, CurrentReplaceMaterial) == 0x000210, "Member 'FKuroMaterialVariationRuntimeInfo::CurrentReplaceMaterial' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, SkelComp) == 0x000218, "Member 'FKuroMaterialVariationRuntimeInfo::SkelComp' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, StaticComp) == 0x000220, "Member 'FKuroMaterialVariationRuntimeInfo::StaticComp' has a wrong offset!");
static_assert(offsetof(FKuroMaterialVariationRuntimeInfo, MaterialSlotIndex) == 0x000228, "Member 'FKuroMaterialVariationRuntimeInfo::MaterialSlotIndex' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.MaterialStackElement
// 0x0018 (0x0018 - 0x0000)
struct FMaterialStackElement final
{
public:
	uint8                                         Pad_1859[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185A[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialStackElement) == 0x000008, "Wrong alignment on FMaterialStackElement");
static_assert(sizeof(FMaterialStackElement) == 0x000018, "Wrong size on FMaterialStackElement");
static_assert(offsetof(FMaterialStackElement, Material) == 0x000008, "Member 'FMaterialStackElement::Material' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroPostprocessMaterialManager
// 0x0030 (0x0030 - 0x0000)
struct FKuroPostprocessMaterialManager final
{
public:
	TArray<struct FMaterialStackElement>          MaterialStack;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostprocessComponentDisableRadialBlur;             // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostprocessComponent;                              // 0x0018(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKuroGISystem*                          ParentGISystem;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_185B[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroPostprocessMaterialManager) == 0x000008, "Wrong alignment on FKuroPostprocessMaterialManager");
static_assert(sizeof(FKuroPostprocessMaterialManager) == 0x000030, "Wrong size on FKuroPostprocessMaterialManager");
static_assert(offsetof(FKuroPostprocessMaterialManager, MaterialStack) == 0x000000, "Member 'FKuroPostprocessMaterialManager::MaterialStack' has a wrong offset!");
static_assert(offsetof(FKuroPostprocessMaterialManager, PostprocessComponentDisableRadialBlur) == 0x000010, "Member 'FKuroPostprocessMaterialManager::PostprocessComponentDisableRadialBlur' has a wrong offset!");
static_assert(offsetof(FKuroPostprocessMaterialManager, PostprocessComponent) == 0x000018, "Member 'FKuroPostprocessMaterialManager::PostprocessComponent' has a wrong offset!");
static_assert(offsetof(FKuroPostprocessMaterialManager, ParentGISystem) == 0x000020, "Member 'FKuroPostprocessMaterialManager::ParentGISystem' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroRainMaterialColorParameter
// 0x0230 (0x0230 - 0x0000)
struct FKuroRainMaterialColorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveLinearColor                  Value;                                             // 0x0010(0x0220)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroRainMaterialColorParameter) == 0x000008, "Wrong alignment on FKuroRainMaterialColorParameter");
static_assert(sizeof(FKuroRainMaterialColorParameter) == 0x000230, "Wrong size on FKuroRainMaterialColorParameter");
static_assert(offsetof(FKuroRainMaterialColorParameter, ParameterName) == 0x000000, "Member 'FKuroRainMaterialColorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(FKuroRainMaterialColorParameter, Value) == 0x000010, "Member 'FKuroRainMaterialColorParameter::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroRainMaterialFloatParameter
// 0x00A0 (0x00A0 - 0x0000)
struct FKuroRainMaterialFloatParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroCurveFloat                        Value;                                             // 0x0010(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroRainMaterialFloatParameter) == 0x000008, "Wrong alignment on FKuroRainMaterialFloatParameter");
static_assert(sizeof(FKuroRainMaterialFloatParameter) == 0x0000A0, "Wrong size on FKuroRainMaterialFloatParameter");
static_assert(offsetof(FKuroRainMaterialFloatParameter, ParameterName) == 0x000000, "Member 'FKuroRainMaterialFloatParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(FKuroRainMaterialFloatParameter, Value) == 0x000010, "Member 'FKuroRainMaterialFloatParameter::Value' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSceneEffectActorManager
// 0x0028 (0x0028 - 0x0000)
struct FKuroSceneEffectActorManager final
{
public:
	TArray<class AKuroSceneEffectActor*>          SceneEffectActorsHiding;                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AKuroSceneEffectActor*>          SceneEffectActorsShowing;                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_185E[0x8];                                     // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSceneEffectActorManager) == 0x000008, "Wrong alignment on FKuroSceneEffectActorManager");
static_assert(sizeof(FKuroSceneEffectActorManager) == 0x000028, "Wrong size on FKuroSceneEffectActorManager");
static_assert(offsetof(FKuroSceneEffectActorManager, SceneEffectActorsHiding) == 0x000000, "Member 'FKuroSceneEffectActorManager::SceneEffectActorsHiding' has a wrong offset!");
static_assert(offsetof(FKuroSceneEffectActorManager, SceneEffectActorsShowing) == 0x000010, "Member 'FKuroSceneEffectActorManager::SceneEffectActorsShowing' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroRainActorSpawnProperties
// 0x0048 (0x0048 - 0x0000)
struct FKuroRainActorSpawnProperties final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRate;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnInnerRadius;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnOuterRadius;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeMin;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTimeMax;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VelocityMin;                                       // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VelocityMax;                                       // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMin;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMax;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseMass;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroRainActorSpawnProperties) == 0x000008, "Wrong alignment on FKuroRainActorSpawnProperties");
static_assert(sizeof(FKuroRainActorSpawnProperties) == 0x000048, "Wrong size on FKuroRainActorSpawnProperties");
static_assert(offsetof(FKuroRainActorSpawnProperties, Mesh) == 0x000000, "Member 'FKuroRainActorSpawnProperties::Mesh' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, Material) == 0x000008, "Member 'FKuroRainActorSpawnProperties::Material' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, SpawnRate) == 0x000010, "Member 'FKuroRainActorSpawnProperties::SpawnRate' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, SpawnInnerRadius) == 0x000014, "Member 'FKuroRainActorSpawnProperties::SpawnInnerRadius' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, SpawnOuterRadius) == 0x000018, "Member 'FKuroRainActorSpawnProperties::SpawnOuterRadius' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, LifeTimeMin) == 0x00001C, "Member 'FKuroRainActorSpawnProperties::LifeTimeMin' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, LifeTimeMax) == 0x000020, "Member 'FKuroRainActorSpawnProperties::LifeTimeMax' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, VelocityMin) == 0x000024, "Member 'FKuroRainActorSpawnProperties::VelocityMin' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, VelocityMax) == 0x000030, "Member 'FKuroRainActorSpawnProperties::VelocityMax' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, ScaleMin) == 0x00003C, "Member 'FKuroRainActorSpawnProperties::ScaleMin' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, ScaleMax) == 0x000040, "Member 'FKuroRainActorSpawnProperties::ScaleMax' has a wrong offset!");
static_assert(offsetof(FKuroRainActorSpawnProperties, BaseMass) == 0x000044, "Member 'FKuroRainActorSpawnProperties::BaseMass' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSplitTextureStreamer
// 0x0038 (0x0038 - 0x0000)
struct FKuroSplitTextureStreamer final
{
public:
	uint8                                         Pad_185F[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroSplitTextureStreamerSettings*      Settings;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        StreamedTextures;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1860[0x18];                                    // 0x0020(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSplitTextureStreamer) == 0x000008, "Wrong alignment on FKuroSplitTextureStreamer");
static_assert(sizeof(FKuroSplitTextureStreamer) == 0x000038, "Wrong size on FKuroSplitTextureStreamer");
static_assert(offsetof(FKuroSplitTextureStreamer, Settings) == 0x000008, "Member 'FKuroSplitTextureStreamer::Settings' has a wrong offset!");
static_assert(offsetof(FKuroSplitTextureStreamer, StreamedTextures) == 0x000010, "Member 'FKuroSplitTextureStreamer::StreamedTextures' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSunLensflareManager
// 0x0088 (0x0088 - 0x0000)
struct FKuroSunLensflareManager final
{
public:
	uint8                                         Pad_1861[0x70];                                    // 0x0000(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 CachedWorld;                                       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKuroGISystem*                          CachedGISystem;                                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1862[0x8];                                     // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSunLensflareManager) == 0x000008, "Wrong alignment on FKuroSunLensflareManager");
static_assert(sizeof(FKuroSunLensflareManager) == 0x000088, "Wrong size on FKuroSunLensflareManager");
static_assert(offsetof(FKuroSunLensflareManager, CachedWorld) == 0x000070, "Member 'FKuroSunLensflareManager::CachedWorld' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareManager, CachedGISystem) == 0x000078, "Member 'FKuroSunLensflareManager::CachedGISystem' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSunLensflareInfo
// 0x0058 (0x0058 - 0x0000)
struct FKuroSunLensflareInfo final
{
public:
	class USunLensFlareConfig*                    LensFlareConfig;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1863[0x18];                                    // 0x0008(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LensFlareActor;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   HaloComponent;                                     // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   GhostComponent;                                    // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   GlareComponent;                                    // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               HaloMaterialDynamic;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               GhostMaterialDynamic;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               GlareMaterialDynamic;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroSunLensflareInfo) == 0x000008, "Wrong alignment on FKuroSunLensflareInfo");
static_assert(sizeof(FKuroSunLensflareInfo) == 0x000058, "Wrong size on FKuroSunLensflareInfo");
static_assert(offsetof(FKuroSunLensflareInfo, LensFlareConfig) == 0x000000, "Member 'FKuroSunLensflareInfo::LensFlareConfig' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, LensFlareActor) == 0x000020, "Member 'FKuroSunLensflareInfo::LensFlareActor' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, HaloComponent) == 0x000028, "Member 'FKuroSunLensflareInfo::HaloComponent' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, GhostComponent) == 0x000030, "Member 'FKuroSunLensflareInfo::GhostComponent' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, GlareComponent) == 0x000038, "Member 'FKuroSunLensflareInfo::GlareComponent' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, HaloMaterialDynamic) == 0x000040, "Member 'FKuroSunLensflareInfo::HaloMaterialDynamic' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, GhostMaterialDynamic) == 0x000048, "Member 'FKuroSunLensflareInfo::GhostMaterialDynamic' has a wrong offset!");
static_assert(offsetof(FKuroSunLensflareInfo, GlareMaterialDynamic) == 0x000050, "Member 'FKuroSunLensflareInfo::GlareMaterialDynamic' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroSuperFarFogLayer
// 0x0020 (0x0020 - 0x0000)
struct FKuroSuperFarFogLayer final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1864[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroSuperFarFogLayer) == 0x000008, "Wrong alignment on FKuroSuperFarFogLayer");
static_assert(sizeof(FKuroSuperFarFogLayer) == 0x000020, "Wrong size on FKuroSuperFarFogLayer");
static_assert(offsetof(FKuroSuperFarFogLayer, Distance) == 0x000000, "Member 'FKuroSuperFarFogLayer::Distance' has a wrong offset!");
static_assert(offsetof(FKuroSuperFarFogLayer, StaticMesh) == 0x000008, "Member 'FKuroSuperFarFogLayer::StaticMesh' has a wrong offset!");
static_assert(offsetof(FKuroSuperFarFogLayer, Materials) == 0x000010, "Member 'FKuroSuperFarFogLayer::Materials' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroStreamingLevelInfo
// 0x0030 (0x0030 - 0x0000)
struct FKuroStreamingLevelInfo final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LayerName;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDistance;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1865[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShowDistance;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTileBaseOnLandscape;                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTile;                                           // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1866[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              TileXY;                                            // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHLOD;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBakeShadow;                                       // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamicShadow;                                    // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1867[0x1];                                     // 0x002F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroStreamingLevelInfo) == 0x000004, "Wrong alignment on FKuroStreamingLevelInfo");
static_assert(sizeof(FKuroStreamingLevelInfo) == 0x000030, "Wrong size on FKuroStreamingLevelInfo");
static_assert(offsetof(FKuroStreamingLevelInfo, PackageName) == 0x000000, "Member 'FKuroStreamingLevelInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, LayerName) == 0x00000C, "Member 'FKuroStreamingLevelInfo::LayerName' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bEnableDistance) == 0x000018, "Member 'FKuroStreamingLevelInfo::bEnableDistance' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, ShowDistance) == 0x00001C, "Member 'FKuroStreamingLevelInfo::ShowDistance' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bTileBaseOnLandscape) == 0x000020, "Member 'FKuroStreamingLevelInfo::bTileBaseOnLandscape' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bIsTile) == 0x000021, "Member 'FKuroStreamingLevelInfo::bIsTile' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, TileXY) == 0x000024, "Member 'FKuroStreamingLevelInfo::TileXY' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bUseHLOD) == 0x00002C, "Member 'FKuroStreamingLevelInfo::bUseHLOD' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bBakeShadow) == 0x00002D, "Member 'FKuroStreamingLevelInfo::bBakeShadow' has a wrong offset!");
static_assert(offsetof(FKuroStreamingLevelInfo, bDynamicShadow) == 0x00002E, "Member 'FKuroStreamingLevelInfo::bDynamicShadow' has a wrong offset!");

// ScriptStruct KuroRenderingRuntimeBPPlugin.KuroLandscapeInfo
// 0x0058 (0x0058 - 0x0000)
struct FKuroLandscapeInfo final
{
public:
	int32                                         TotalTileNumber;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalComponentNumber;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSectionNumber;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileRow;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileCol;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumberPerTile;                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionNumberPerComponent;                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              PerSectionResolution;                              // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              PerComponentResolution;                            // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              PerTileResolution;                                 // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              TotalResolution;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x003C(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroLandscapeInfo) == 0x000004, "Wrong alignment on FKuroLandscapeInfo");
static_assert(sizeof(FKuroLandscapeInfo) == 0x000058, "Wrong size on FKuroLandscapeInfo");
static_assert(offsetof(FKuroLandscapeInfo, TotalTileNumber) == 0x000000, "Member 'FKuroLandscapeInfo::TotalTileNumber' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TotalComponentNumber) == 0x000004, "Member 'FKuroLandscapeInfo::TotalComponentNumber' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TotalSectionNumber) == 0x000008, "Member 'FKuroLandscapeInfo::TotalSectionNumber' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TileRow) == 0x00000C, "Member 'FKuroLandscapeInfo::TileRow' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TileCol) == 0x000010, "Member 'FKuroLandscapeInfo::TileCol' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, ComponentNumberPerTile) == 0x000014, "Member 'FKuroLandscapeInfo::ComponentNumberPerTile' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, SectionNumberPerComponent) == 0x000018, "Member 'FKuroLandscapeInfo::SectionNumberPerComponent' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, PerSectionResolution) == 0x00001C, "Member 'FKuroLandscapeInfo::PerSectionResolution' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, PerComponentResolution) == 0x000024, "Member 'FKuroLandscapeInfo::PerComponentResolution' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, PerTileResolution) == 0x00002C, "Member 'FKuroLandscapeInfo::PerTileResolution' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, TotalResolution) == 0x000034, "Member 'FKuroLandscapeInfo::TotalResolution' has a wrong offset!");
static_assert(offsetof(FKuroLandscapeInfo, Bounds) == 0x00003C, "Member 'FKuroLandscapeInfo::Bounds' has a wrong offset!");

}

