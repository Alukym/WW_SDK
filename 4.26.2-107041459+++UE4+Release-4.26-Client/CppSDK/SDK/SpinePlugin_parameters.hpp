#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpinePlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SpinePlugin.SpineBoneDriverComponent.BeforeUpdateWorldTransform
// 0x0008 (0x0008 - 0x0000)
struct SpineBoneDriverComponent_BeforeUpdateWorldTransform final
{
public:
	class USpineSkeletonComponent*                Skeleton;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineBoneDriverComponent_BeforeUpdateWorldTransform) == 0x000008, "Wrong alignment on SpineBoneDriverComponent_BeforeUpdateWorldTransform");
static_assert(sizeof(SpineBoneDriverComponent_BeforeUpdateWorldTransform) == 0x000008, "Wrong size on SpineBoneDriverComponent_BeforeUpdateWorldTransform");
static_assert(offsetof(SpineBoneDriverComponent_BeforeUpdateWorldTransform, Skeleton) == 0x000000, "Member 'SpineBoneDriverComponent_BeforeUpdateWorldTransform::Skeleton' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetAlpha) == 0x000004, "Wrong alignment on TrackEntry_GetAlpha");
static_assert(sizeof(TrackEntry_GetAlpha) == 0x000004, "Wrong size on TrackEntry_GetAlpha");
static_assert(offsetof(TrackEntry_GetAlpha, ReturnValue) == 0x000000, "Member 'TrackEntry_GetAlpha::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.getAnimationDuration
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetAnimationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetAnimationDuration) == 0x000004, "Wrong alignment on TrackEntry_GetAnimationDuration");
static_assert(sizeof(TrackEntry_GetAnimationDuration) == 0x000004, "Wrong size on TrackEntry_GetAnimationDuration");
static_assert(offsetof(TrackEntry_GetAnimationDuration, ReturnValue) == 0x000000, "Member 'TrackEntry_GetAnimationDuration::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetAnimationEnd
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetAnimationEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetAnimationEnd) == 0x000004, "Wrong alignment on TrackEntry_GetAnimationEnd");
static_assert(sizeof(TrackEntry_GetAnimationEnd) == 0x000004, "Wrong size on TrackEntry_GetAnimationEnd");
static_assert(offsetof(TrackEntry_GetAnimationEnd, ReturnValue) == 0x000000, "Member 'TrackEntry_GetAnimationEnd::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetAnimationLast
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetAnimationLast final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetAnimationLast) == 0x000004, "Wrong alignment on TrackEntry_GetAnimationLast");
static_assert(sizeof(TrackEntry_GetAnimationLast) == 0x000004, "Wrong size on TrackEntry_GetAnimationLast");
static_assert(offsetof(TrackEntry_GetAnimationLast, ReturnValue) == 0x000000, "Member 'TrackEntry_GetAnimationLast::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.getAnimationName
// 0x0010 (0x0010 - 0x0000)
struct TrackEntry_GetAnimationName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetAnimationName) == 0x000008, "Wrong alignment on TrackEntry_GetAnimationName");
static_assert(sizeof(TrackEntry_GetAnimationName) == 0x000010, "Wrong size on TrackEntry_GetAnimationName");
static_assert(offsetof(TrackEntry_GetAnimationName, ReturnValue) == 0x000000, "Member 'TrackEntry_GetAnimationName::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetAnimationStart
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetAnimationStart final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetAnimationStart) == 0x000004, "Wrong alignment on TrackEntry_GetAnimationStart");
static_assert(sizeof(TrackEntry_GetAnimationStart) == 0x000004, "Wrong size on TrackEntry_GetAnimationStart");
static_assert(offsetof(TrackEntry_GetAnimationStart, ReturnValue) == 0x000000, "Member 'TrackEntry_GetAnimationStart::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetAttachmentThreshold
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetAttachmentThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetAttachmentThreshold) == 0x000004, "Wrong alignment on TrackEntry_GetAttachmentThreshold");
static_assert(sizeof(TrackEntry_GetAttachmentThreshold) == 0x000004, "Wrong size on TrackEntry_GetAttachmentThreshold");
static_assert(offsetof(TrackEntry_GetAttachmentThreshold, ReturnValue) == 0x000000, "Member 'TrackEntry_GetAttachmentThreshold::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetDelay
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetDelay) == 0x000004, "Wrong alignment on TrackEntry_GetDelay");
static_assert(sizeof(TrackEntry_GetDelay) == 0x000004, "Wrong size on TrackEntry_GetDelay");
static_assert(offsetof(TrackEntry_GetDelay, ReturnValue) == 0x000000, "Member 'TrackEntry_GetDelay::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetDrawOrderThreshold
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetDrawOrderThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetDrawOrderThreshold) == 0x000004, "Wrong alignment on TrackEntry_GetDrawOrderThreshold");
static_assert(sizeof(TrackEntry_GetDrawOrderThreshold) == 0x000004, "Wrong size on TrackEntry_GetDrawOrderThreshold");
static_assert(offsetof(TrackEntry_GetDrawOrderThreshold, ReturnValue) == 0x000000, "Member 'TrackEntry_GetDrawOrderThreshold::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetEventThreshold
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetEventThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetEventThreshold) == 0x000004, "Wrong alignment on TrackEntry_GetEventThreshold");
static_assert(sizeof(TrackEntry_GetEventThreshold) == 0x000004, "Wrong size on TrackEntry_GetEventThreshold");
static_assert(offsetof(TrackEntry_GetEventThreshold, ReturnValue) == 0x000000, "Member 'TrackEntry_GetEventThreshold::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetLoop
// 0x0001 (0x0001 - 0x0000)
struct TrackEntry_GetLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetLoop) == 0x000001, "Wrong alignment on TrackEntry_GetLoop");
static_assert(sizeof(TrackEntry_GetLoop) == 0x000001, "Wrong size on TrackEntry_GetLoop");
static_assert(offsetof(TrackEntry_GetLoop, ReturnValue) == 0x000000, "Member 'TrackEntry_GetLoop::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetMixDuration
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetMixDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetMixDuration) == 0x000004, "Wrong alignment on TrackEntry_GetMixDuration");
static_assert(sizeof(TrackEntry_GetMixDuration) == 0x000004, "Wrong size on TrackEntry_GetMixDuration");
static_assert(offsetof(TrackEntry_GetMixDuration, ReturnValue) == 0x000000, "Member 'TrackEntry_GetMixDuration::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetMixTime
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetMixTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetMixTime) == 0x000004, "Wrong alignment on TrackEntry_GetMixTime");
static_assert(sizeof(TrackEntry_GetMixTime) == 0x000004, "Wrong size on TrackEntry_GetMixTime");
static_assert(offsetof(TrackEntry_GetMixTime, ReturnValue) == 0x000000, "Member 'TrackEntry_GetMixTime::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetTimeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetTimeScale) == 0x000004, "Wrong alignment on TrackEntry_GetTimeScale");
static_assert(sizeof(TrackEntry_GetTimeScale) == 0x000004, "Wrong size on TrackEntry_GetTimeScale");
static_assert(offsetof(TrackEntry_GetTimeScale, ReturnValue) == 0x000000, "Member 'TrackEntry_GetTimeScale::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetTrackEnd
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetTrackEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetTrackEnd) == 0x000004, "Wrong alignment on TrackEntry_GetTrackEnd");
static_assert(sizeof(TrackEntry_GetTrackEnd) == 0x000004, "Wrong size on TrackEntry_GetTrackEnd");
static_assert(offsetof(TrackEntry_GetTrackEnd, ReturnValue) == 0x000000, "Member 'TrackEntry_GetTrackEnd::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetTrackIndex
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetTrackIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetTrackIndex) == 0x000004, "Wrong alignment on TrackEntry_GetTrackIndex");
static_assert(sizeof(TrackEntry_GetTrackIndex) == 0x000004, "Wrong size on TrackEntry_GetTrackIndex");
static_assert(offsetof(TrackEntry_GetTrackIndex, ReturnValue) == 0x000000, "Member 'TrackEntry_GetTrackIndex::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.GetTrackTime
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_GetTrackTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_GetTrackTime) == 0x000004, "Wrong alignment on TrackEntry_GetTrackTime");
static_assert(sizeof(TrackEntry_GetTrackTime) == 0x000004, "Wrong size on TrackEntry_GetTrackTime");
static_assert(offsetof(TrackEntry_GetTrackTime, ReturnValue) == 0x000000, "Member 'TrackEntry_GetTrackTime::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.isValidAnimation
// 0x0001 (0x0001 - 0x0000)
struct TrackEntry_IsValidAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_IsValidAnimation) == 0x000001, "Wrong alignment on TrackEntry_IsValidAnimation");
static_assert(sizeof(TrackEntry_IsValidAnimation) == 0x000001, "Wrong size on TrackEntry_IsValidAnimation");
static_assert(offsetof(TrackEntry_IsValidAnimation, ReturnValue) == 0x000000, "Member 'TrackEntry_IsValidAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetAlpha final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetAlpha) == 0x000004, "Wrong alignment on TrackEntry_SetAlpha");
static_assert(sizeof(TrackEntry_SetAlpha) == 0x000004, "Wrong size on TrackEntry_SetAlpha");
static_assert(offsetof(TrackEntry_SetAlpha, Alpha) == 0x000000, "Member 'TrackEntry_SetAlpha::Alpha' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetAnimationEnd
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetAnimationEnd final
{
public:
	float                                         Param_AnimationEnd;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetAnimationEnd) == 0x000004, "Wrong alignment on TrackEntry_SetAnimationEnd");
static_assert(sizeof(TrackEntry_SetAnimationEnd) == 0x000004, "Wrong size on TrackEntry_SetAnimationEnd");
static_assert(offsetof(TrackEntry_SetAnimationEnd, Param_AnimationEnd) == 0x000000, "Member 'TrackEntry_SetAnimationEnd::Param_AnimationEnd' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetAnimationLast
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetAnimationLast final
{
public:
	float                                         AnimationLast;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetAnimationLast) == 0x000004, "Wrong alignment on TrackEntry_SetAnimationLast");
static_assert(sizeof(TrackEntry_SetAnimationLast) == 0x000004, "Wrong size on TrackEntry_SetAnimationLast");
static_assert(offsetof(TrackEntry_SetAnimationLast, AnimationLast) == 0x000000, "Member 'TrackEntry_SetAnimationLast::AnimationLast' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetAnimationStart
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetAnimationStart final
{
public:
	float                                         Param_AnimationStart;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetAnimationStart) == 0x000004, "Wrong alignment on TrackEntry_SetAnimationStart");
static_assert(sizeof(TrackEntry_SetAnimationStart) == 0x000004, "Wrong size on TrackEntry_SetAnimationStart");
static_assert(offsetof(TrackEntry_SetAnimationStart, Param_AnimationStart) == 0x000000, "Member 'TrackEntry_SetAnimationStart::Param_AnimationStart' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetAttachmentThreshold
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetAttachmentThreshold final
{
public:
	float                                         AttachmentThreshold;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetAttachmentThreshold) == 0x000004, "Wrong alignment on TrackEntry_SetAttachmentThreshold");
static_assert(sizeof(TrackEntry_SetAttachmentThreshold) == 0x000004, "Wrong size on TrackEntry_SetAttachmentThreshold");
static_assert(offsetof(TrackEntry_SetAttachmentThreshold, AttachmentThreshold) == 0x000000, "Member 'TrackEntry_SetAttachmentThreshold::AttachmentThreshold' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetDelay
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetDelay) == 0x000004, "Wrong alignment on TrackEntry_SetDelay");
static_assert(sizeof(TrackEntry_SetDelay) == 0x000004, "Wrong size on TrackEntry_SetDelay");
static_assert(offsetof(TrackEntry_SetDelay, Delay) == 0x000000, "Member 'TrackEntry_SetDelay::Delay' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetDrawOrderThreshold
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetDrawOrderThreshold final
{
public:
	float                                         DrawOrderThreshold;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetDrawOrderThreshold) == 0x000004, "Wrong alignment on TrackEntry_SetDrawOrderThreshold");
static_assert(sizeof(TrackEntry_SetDrawOrderThreshold) == 0x000004, "Wrong size on TrackEntry_SetDrawOrderThreshold");
static_assert(offsetof(TrackEntry_SetDrawOrderThreshold, DrawOrderThreshold) == 0x000000, "Member 'TrackEntry_SetDrawOrderThreshold::DrawOrderThreshold' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetEventThreshold
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetEventThreshold final
{
public:
	float                                         EventThreshold;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetEventThreshold) == 0x000004, "Wrong alignment on TrackEntry_SetEventThreshold");
static_assert(sizeof(TrackEntry_SetEventThreshold) == 0x000004, "Wrong size on TrackEntry_SetEventThreshold");
static_assert(offsetof(TrackEntry_SetEventThreshold, EventThreshold) == 0x000000, "Member 'TrackEntry_SetEventThreshold::EventThreshold' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetLoop
// 0x0001 (0x0001 - 0x0000)
struct TrackEntry_SetLoop final
{
public:
	bool                                          Loop;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetLoop) == 0x000001, "Wrong alignment on TrackEntry_SetLoop");
static_assert(sizeof(TrackEntry_SetLoop) == 0x000001, "Wrong size on TrackEntry_SetLoop");
static_assert(offsetof(TrackEntry_SetLoop, Loop) == 0x000000, "Member 'TrackEntry_SetLoop::Loop' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetMixDuration
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetMixDuration final
{
public:
	float                                         MixDuration;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetMixDuration) == 0x000004, "Wrong alignment on TrackEntry_SetMixDuration");
static_assert(sizeof(TrackEntry_SetMixDuration) == 0x000004, "Wrong size on TrackEntry_SetMixDuration");
static_assert(offsetof(TrackEntry_SetMixDuration, MixDuration) == 0x000000, "Member 'TrackEntry_SetMixDuration::MixDuration' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetMixTime
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetMixTime final
{
public:
	float                                         MixTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetMixTime) == 0x000004, "Wrong alignment on TrackEntry_SetMixTime");
static_assert(sizeof(TrackEntry_SetMixTime) == 0x000004, "Wrong size on TrackEntry_SetMixTime");
static_assert(offsetof(TrackEntry_SetMixTime, MixTime) == 0x000000, "Member 'TrackEntry_SetMixTime::MixTime' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetTimeScale final
{
public:
	float                                         TimeScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetTimeScale) == 0x000004, "Wrong alignment on TrackEntry_SetTimeScale");
static_assert(sizeof(TrackEntry_SetTimeScale) == 0x000004, "Wrong size on TrackEntry_SetTimeScale");
static_assert(offsetof(TrackEntry_SetTimeScale, TimeScale) == 0x000000, "Member 'TrackEntry_SetTimeScale::TimeScale' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetTrackEnd
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetTrackEnd final
{
public:
	float                                         TrackEnd;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetTrackEnd) == 0x000004, "Wrong alignment on TrackEntry_SetTrackEnd");
static_assert(sizeof(TrackEntry_SetTrackEnd) == 0x000004, "Wrong size on TrackEntry_SetTrackEnd");
static_assert(offsetof(TrackEntry_SetTrackEnd, TrackEnd) == 0x000000, "Member 'TrackEntry_SetTrackEnd::TrackEnd' has a wrong offset!");

// Function SpinePlugin.TrackEntry.SetTrackTime
// 0x0004 (0x0004 - 0x0000)
struct TrackEntry_SetTrackTime final
{
public:
	float                                         TrackTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrackEntry_SetTrackTime) == 0x000004, "Wrong alignment on TrackEntry_SetTrackTime");
static_assert(sizeof(TrackEntry_SetTrackTime) == 0x000004, "Wrong size on TrackEntry_SetTrackTime");
static_assert(offsetof(TrackEntry_SetTrackTime, TrackTime) == 0x000000, "Member 'TrackEntry_SetTrackTime::TrackTime' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.GetAnimationDuration
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonComponent_GetAnimationDuration final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AB[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_GetAnimationDuration) == 0x000008, "Wrong alignment on SpineSkeletonComponent_GetAnimationDuration");
static_assert(sizeof(SpineSkeletonComponent_GetAnimationDuration) == 0x000018, "Wrong size on SpineSkeletonComponent_GetAnimationDuration");
static_assert(offsetof(SpineSkeletonComponent_GetAnimationDuration, AnimationName) == 0x000000, "Member 'SpineSkeletonComponent_GetAnimationDuration::AnimationName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_GetAnimationDuration, ReturnValue) == 0x000010, "Member 'SpineSkeletonComponent_GetAnimationDuration::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.GetAnimations
// 0x0010 (0x0010 - 0x0000)
struct SpineSkeletonComponent_GetAnimations final
{
public:
	TArray<class FString>                         Animations;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_GetAnimations) == 0x000008, "Wrong alignment on SpineSkeletonComponent_GetAnimations");
static_assert(sizeof(SpineSkeletonComponent_GetAnimations) == 0x000010, "Wrong size on SpineSkeletonComponent_GetAnimations");
static_assert(offsetof(SpineSkeletonComponent_GetAnimations, Animations) == 0x000000, "Member 'SpineSkeletonComponent_GetAnimations::Animations' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.GetBones
// 0x0010 (0x0010 - 0x0000)
struct SpineSkeletonComponent_GetBones final
{
public:
	TArray<class FString>                         Bones;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_GetBones) == 0x000008, "Wrong alignment on SpineSkeletonComponent_GetBones");
static_assert(sizeof(SpineSkeletonComponent_GetBones) == 0x000010, "Wrong size on SpineSkeletonComponent_GetBones");
static_assert(offsetof(SpineSkeletonComponent_GetBones, Bones) == 0x000000, "Member 'SpineSkeletonComponent_GetBones::Bones' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.GetBoneWorldTransform
// 0x0040 (0x0040 - 0x0000)
struct SpineSkeletonComponent_GetBoneWorldTransform final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_GetBoneWorldTransform) == 0x000010, "Wrong alignment on SpineSkeletonComponent_GetBoneWorldTransform");
static_assert(sizeof(SpineSkeletonComponent_GetBoneWorldTransform) == 0x000040, "Wrong size on SpineSkeletonComponent_GetBoneWorldTransform");
static_assert(offsetof(SpineSkeletonComponent_GetBoneWorldTransform, BoneName) == 0x000000, "Member 'SpineSkeletonComponent_GetBoneWorldTransform::BoneName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_GetBoneWorldTransform, ReturnValue) == 0x000010, "Member 'SpineSkeletonComponent_GetBoneWorldTransform::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.GetScaleX
// 0x0004 (0x0004 - 0x0000)
struct SpineSkeletonComponent_GetScaleX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_GetScaleX) == 0x000004, "Wrong alignment on SpineSkeletonComponent_GetScaleX");
static_assert(sizeof(SpineSkeletonComponent_GetScaleX) == 0x000004, "Wrong size on SpineSkeletonComponent_GetScaleX");
static_assert(offsetof(SpineSkeletonComponent_GetScaleX, ReturnValue) == 0x000000, "Member 'SpineSkeletonComponent_GetScaleX::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.GetScaleY
// 0x0004 (0x0004 - 0x0000)
struct SpineSkeletonComponent_GetScaleY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_GetScaleY) == 0x000004, "Wrong alignment on SpineSkeletonComponent_GetScaleY");
static_assert(sizeof(SpineSkeletonComponent_GetScaleY) == 0x000004, "Wrong size on SpineSkeletonComponent_GetScaleY");
static_assert(offsetof(SpineSkeletonComponent_GetScaleY, ReturnValue) == 0x000000, "Member 'SpineSkeletonComponent_GetScaleY::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.GetSkins
// 0x0010 (0x0010 - 0x0000)
struct SpineSkeletonComponent_GetSkins final
{
public:
	TArray<class FString>                         Skins;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_GetSkins) == 0x000008, "Wrong alignment on SpineSkeletonComponent_GetSkins");
static_assert(sizeof(SpineSkeletonComponent_GetSkins) == 0x000010, "Wrong size on SpineSkeletonComponent_GetSkins");
static_assert(offsetof(SpineSkeletonComponent_GetSkins, Skins) == 0x000000, "Member 'SpineSkeletonComponent_GetSkins::Skins' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.GetSlots
// 0x0010 (0x0010 - 0x0000)
struct SpineSkeletonComponent_GetSlots final
{
public:
	TArray<class FString>                         Slots;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_GetSlots) == 0x000008, "Wrong alignment on SpineSkeletonComponent_GetSlots");
static_assert(sizeof(SpineSkeletonComponent_GetSlots) == 0x000010, "Wrong size on SpineSkeletonComponent_GetSlots");
static_assert(offsetof(SpineSkeletonComponent_GetSlots, Slots) == 0x000000, "Member 'SpineSkeletonComponent_GetSlots::Slots' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.HasAnimation
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonComponent_HasAnimation final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_HasAnimation) == 0x000008, "Wrong alignment on SpineSkeletonComponent_HasAnimation");
static_assert(sizeof(SpineSkeletonComponent_HasAnimation) == 0x000018, "Wrong size on SpineSkeletonComponent_HasAnimation");
static_assert(offsetof(SpineSkeletonComponent_HasAnimation, AnimationName) == 0x000000, "Member 'SpineSkeletonComponent_HasAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_HasAnimation, ReturnValue) == 0x000010, "Member 'SpineSkeletonComponent_HasAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.HasBone
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonComponent_HasBone final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_HasBone) == 0x000008, "Wrong alignment on SpineSkeletonComponent_HasBone");
static_assert(sizeof(SpineSkeletonComponent_HasBone) == 0x000018, "Wrong size on SpineSkeletonComponent_HasBone");
static_assert(offsetof(SpineSkeletonComponent_HasBone, BoneName) == 0x000000, "Member 'SpineSkeletonComponent_HasBone::BoneName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_HasBone, ReturnValue) == 0x000010, "Member 'SpineSkeletonComponent_HasBone::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.HasSkin
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonComponent_HasSkin final
{
public:
	class FString                                 SkinName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_HasSkin) == 0x000008, "Wrong alignment on SpineSkeletonComponent_HasSkin");
static_assert(sizeof(SpineSkeletonComponent_HasSkin) == 0x000018, "Wrong size on SpineSkeletonComponent_HasSkin");
static_assert(offsetof(SpineSkeletonComponent_HasSkin, SkinName) == 0x000000, "Member 'SpineSkeletonComponent_HasSkin::SkinName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_HasSkin, ReturnValue) == 0x000010, "Member 'SpineSkeletonComponent_HasSkin::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.HasSlot
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonComponent_HasSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AF[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_HasSlot) == 0x000008, "Wrong alignment on SpineSkeletonComponent_HasSlot");
static_assert(sizeof(SpineSkeletonComponent_HasSlot) == 0x000018, "Wrong size on SpineSkeletonComponent_HasSlot");
static_assert(offsetof(SpineSkeletonComponent_HasSlot, SlotName) == 0x000000, "Member 'SpineSkeletonComponent_HasSlot::SlotName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_HasSlot, ReturnValue) == 0x000010, "Member 'SpineSkeletonComponent_HasSlot::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.SetAttachment
// 0x0028 (0x0028 - 0x0000)
struct SpineSkeletonComponent_SetAttachment final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachmentName;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B0[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_SetAttachment) == 0x000008, "Wrong alignment on SpineSkeletonComponent_SetAttachment");
static_assert(sizeof(SpineSkeletonComponent_SetAttachment) == 0x000028, "Wrong size on SpineSkeletonComponent_SetAttachment");
static_assert(offsetof(SpineSkeletonComponent_SetAttachment, SlotName) == 0x000000, "Member 'SpineSkeletonComponent_SetAttachment::SlotName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_SetAttachment, AttachmentName) == 0x000010, "Member 'SpineSkeletonComponent_SetAttachment::AttachmentName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_SetAttachment, ReturnValue) == 0x000020, "Member 'SpineSkeletonComponent_SetAttachment::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.SetBoneWorldPosition
// 0x0020 (0x0020 - 0x0000)
struct SpineSkeletonComponent_SetBoneWorldPosition final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B1[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_SetBoneWorldPosition) == 0x000008, "Wrong alignment on SpineSkeletonComponent_SetBoneWorldPosition");
static_assert(sizeof(SpineSkeletonComponent_SetBoneWorldPosition) == 0x000020, "Wrong size on SpineSkeletonComponent_SetBoneWorldPosition");
static_assert(offsetof(SpineSkeletonComponent_SetBoneWorldPosition, BoneName) == 0x000000, "Member 'SpineSkeletonComponent_SetBoneWorldPosition::BoneName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_SetBoneWorldPosition, Position) == 0x000010, "Member 'SpineSkeletonComponent_SetBoneWorldPosition::Position' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.SetScaleX
// 0x0004 (0x0004 - 0x0000)
struct SpineSkeletonComponent_SetScaleX final
{
public:
	float                                         ScaleX;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_SetScaleX) == 0x000004, "Wrong alignment on SpineSkeletonComponent_SetScaleX");
static_assert(sizeof(SpineSkeletonComponent_SetScaleX) == 0x000004, "Wrong size on SpineSkeletonComponent_SetScaleX");
static_assert(offsetof(SpineSkeletonComponent_SetScaleX, ScaleX) == 0x000000, "Member 'SpineSkeletonComponent_SetScaleX::ScaleX' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.SetScaleY
// 0x0004 (0x0004 - 0x0000)
struct SpineSkeletonComponent_SetScaleY final
{
public:
	float                                         ScaleY;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonComponent_SetScaleY) == 0x000004, "Wrong alignment on SpineSkeletonComponent_SetScaleY");
static_assert(sizeof(SpineSkeletonComponent_SetScaleY) == 0x000004, "Wrong size on SpineSkeletonComponent_SetScaleY");
static_assert(offsetof(SpineSkeletonComponent_SetScaleY, ScaleY) == 0x000000, "Member 'SpineSkeletonComponent_SetScaleY::ScaleY' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.SetSkin
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonComponent_SetSkin final
{
public:
	class FString                                 SkinName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B2[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_SetSkin) == 0x000008, "Wrong alignment on SpineSkeletonComponent_SetSkin");
static_assert(sizeof(SpineSkeletonComponent_SetSkin) == 0x000018, "Wrong size on SpineSkeletonComponent_SetSkin");
static_assert(offsetof(SpineSkeletonComponent_SetSkin, SkinName) == 0x000000, "Member 'SpineSkeletonComponent_SetSkin::SkinName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_SetSkin, ReturnValue) == 0x000010, "Member 'SpineSkeletonComponent_SetSkin::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.SetSkins
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonComponent_SetSkins final
{
public:
	TArray<class FString>                         SkinNames;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_SetSkins) == 0x000008, "Wrong alignment on SpineSkeletonComponent_SetSkins");
static_assert(sizeof(SpineSkeletonComponent_SetSkins) == 0x000018, "Wrong size on SpineSkeletonComponent_SetSkins");
static_assert(offsetof(SpineSkeletonComponent_SetSkins, SkinNames) == 0x000000, "Member 'SpineSkeletonComponent_SetSkins::SkinNames' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_SetSkins, ReturnValue) == 0x000010, "Member 'SpineSkeletonComponent_SetSkins::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonComponent.SetSlotColor
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonComponent_SetSlotColor final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B4[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonComponent_SetSlotColor) == 0x000008, "Wrong alignment on SpineSkeletonComponent_SetSlotColor");
static_assert(sizeof(SpineSkeletonComponent_SetSlotColor) == 0x000018, "Wrong size on SpineSkeletonComponent_SetSlotColor");
static_assert(offsetof(SpineSkeletonComponent_SetSlotColor, SlotName) == 0x000000, "Member 'SpineSkeletonComponent_SetSlotColor::SlotName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonComponent_SetSlotColor, Color) == 0x000010, "Member 'SpineSkeletonComponent_SetSlotColor::Color' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.AddAnimation
// 0x0028 (0x0028 - 0x0000)
struct SpineSkeletonAnimationComponent_AddAnimation final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimationName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B8[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTrackEntry*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_AddAnimation) == 0x000008, "Wrong alignment on SpineSkeletonAnimationComponent_AddAnimation");
static_assert(sizeof(SpineSkeletonAnimationComponent_AddAnimation) == 0x000028, "Wrong size on SpineSkeletonAnimationComponent_AddAnimation");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddAnimation, TrackIndex) == 0x000000, "Member 'SpineSkeletonAnimationComponent_AddAnimation::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddAnimation, AnimationName) == 0x000008, "Member 'SpineSkeletonAnimationComponent_AddAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddAnimation, Loop) == 0x000018, "Member 'SpineSkeletonAnimationComponent_AddAnimation::Loop' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddAnimation, Delay) == 0x00001C, "Member 'SpineSkeletonAnimationComponent_AddAnimation::Delay' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddAnimation, ReturnValue) == 0x000020, "Member 'SpineSkeletonAnimationComponent_AddAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.AddEmptyAnimation
// 0x0018 (0x0018 - 0x0000)
struct SpineSkeletonAnimationComponent_AddEmptyAnimation final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixDuration;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_AddEmptyAnimation) == 0x000008, "Wrong alignment on SpineSkeletonAnimationComponent_AddEmptyAnimation");
static_assert(sizeof(SpineSkeletonAnimationComponent_AddEmptyAnimation) == 0x000018, "Wrong size on SpineSkeletonAnimationComponent_AddEmptyAnimation");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddEmptyAnimation, TrackIndex) == 0x000000, "Member 'SpineSkeletonAnimationComponent_AddEmptyAnimation::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddEmptyAnimation, MixDuration) == 0x000004, "Member 'SpineSkeletonAnimationComponent_AddEmptyAnimation::MixDuration' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddEmptyAnimation, Delay) == 0x000008, "Member 'SpineSkeletonAnimationComponent_AddEmptyAnimation::Delay' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_AddEmptyAnimation, ReturnValue) == 0x000010, "Member 'SpineSkeletonAnimationComponent_AddEmptyAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.ClearTrack
// 0x0004 (0x0004 - 0x0000)
struct SpineSkeletonAnimationComponent_ClearTrack final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_ClearTrack) == 0x000004, "Wrong alignment on SpineSkeletonAnimationComponent_ClearTrack");
static_assert(sizeof(SpineSkeletonAnimationComponent_ClearTrack) == 0x000004, "Wrong size on SpineSkeletonAnimationComponent_ClearTrack");
static_assert(offsetof(SpineSkeletonAnimationComponent_ClearTrack, TrackIndex) == 0x000000, "Member 'SpineSkeletonAnimationComponent_ClearTrack::TrackIndex' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.GetCurrent
// 0x0010 (0x0010 - 0x0000)
struct SpineSkeletonAnimationComponent_GetCurrent final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_GetCurrent) == 0x000008, "Wrong alignment on SpineSkeletonAnimationComponent_GetCurrent");
static_assert(sizeof(SpineSkeletonAnimationComponent_GetCurrent) == 0x000010, "Wrong size on SpineSkeletonAnimationComponent_GetCurrent");
static_assert(offsetof(SpineSkeletonAnimationComponent_GetCurrent, TrackIndex) == 0x000000, "Member 'SpineSkeletonAnimationComponent_GetCurrent::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_GetCurrent, ReturnValue) == 0x000008, "Member 'SpineSkeletonAnimationComponent_GetCurrent::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.GetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct SpineSkeletonAnimationComponent_GetTimeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_GetTimeScale) == 0x000004, "Wrong alignment on SpineSkeletonAnimationComponent_GetTimeScale");
static_assert(sizeof(SpineSkeletonAnimationComponent_GetTimeScale) == 0x000004, "Wrong size on SpineSkeletonAnimationComponent_GetTimeScale");
static_assert(offsetof(SpineSkeletonAnimationComponent_GetTimeScale, ReturnValue) == 0x000000, "Member 'SpineSkeletonAnimationComponent_GetTimeScale::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.SetAnimation
// 0x0028 (0x0028 - 0x0000)
struct SpineSkeletonAnimationComponent_SetAnimation final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimationName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BC[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_SetAnimation) == 0x000008, "Wrong alignment on SpineSkeletonAnimationComponent_SetAnimation");
static_assert(sizeof(SpineSkeletonAnimationComponent_SetAnimation) == 0x000028, "Wrong size on SpineSkeletonAnimationComponent_SetAnimation");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetAnimation, TrackIndex) == 0x000000, "Member 'SpineSkeletonAnimationComponent_SetAnimation::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetAnimation, AnimationName) == 0x000008, "Member 'SpineSkeletonAnimationComponent_SetAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetAnimation, Loop) == 0x000018, "Member 'SpineSkeletonAnimationComponent_SetAnimation::Loop' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetAnimation, ReturnValue) == 0x000020, "Member 'SpineSkeletonAnimationComponent_SetAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.SetAutoPlay
// 0x0001 (0x0001 - 0x0000)
struct SpineSkeletonAnimationComponent_SetAutoPlay final
{
public:
	bool                                          bInAutoPlays;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_SetAutoPlay) == 0x000001, "Wrong alignment on SpineSkeletonAnimationComponent_SetAutoPlay");
static_assert(sizeof(SpineSkeletonAnimationComponent_SetAutoPlay) == 0x000001, "Wrong size on SpineSkeletonAnimationComponent_SetAutoPlay");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetAutoPlay, bInAutoPlays) == 0x000000, "Member 'SpineSkeletonAnimationComponent_SetAutoPlay::bInAutoPlays' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.SetEmptyAnimation
// 0x0010 (0x0010 - 0x0000)
struct SpineSkeletonAnimationComponent_SetEmptyAnimation final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixDuration;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTrackEntry*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_SetEmptyAnimation) == 0x000008, "Wrong alignment on SpineSkeletonAnimationComponent_SetEmptyAnimation");
static_assert(sizeof(SpineSkeletonAnimationComponent_SetEmptyAnimation) == 0x000010, "Wrong size on SpineSkeletonAnimationComponent_SetEmptyAnimation");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetEmptyAnimation, TrackIndex) == 0x000000, "Member 'SpineSkeletonAnimationComponent_SetEmptyAnimation::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetEmptyAnimation, MixDuration) == 0x000004, "Member 'SpineSkeletonAnimationComponent_SetEmptyAnimation::MixDuration' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetEmptyAnimation, ReturnValue) == 0x000008, "Member 'SpineSkeletonAnimationComponent_SetEmptyAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.SetPlaybackTime
// 0x0008 (0x0008 - 0x0000)
struct SpineSkeletonAnimationComponent_SetPlaybackTime final
{
public:
	float                                         InPlaybackTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallDelegates;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BD[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineSkeletonAnimationComponent_SetPlaybackTime) == 0x000004, "Wrong alignment on SpineSkeletonAnimationComponent_SetPlaybackTime");
static_assert(sizeof(SpineSkeletonAnimationComponent_SetPlaybackTime) == 0x000008, "Wrong size on SpineSkeletonAnimationComponent_SetPlaybackTime");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetPlaybackTime, InPlaybackTime) == 0x000000, "Member 'SpineSkeletonAnimationComponent_SetPlaybackTime::InPlaybackTime' has a wrong offset!");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetPlaybackTime, bCallDelegates) == 0x000004, "Member 'SpineSkeletonAnimationComponent_SetPlaybackTime::bCallDelegates' has a wrong offset!");

// Function SpinePlugin.SpineSkeletonAnimationComponent.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct SpineSkeletonAnimationComponent_SetTimeScale final
{
public:
	float                                         TimeScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineSkeletonAnimationComponent_SetTimeScale) == 0x000004, "Wrong alignment on SpineSkeletonAnimationComponent_SetTimeScale");
static_assert(sizeof(SpineSkeletonAnimationComponent_SetTimeScale) == 0x000004, "Wrong size on SpineSkeletonAnimationComponent_SetTimeScale");
static_assert(offsetof(SpineSkeletonAnimationComponent_SetTimeScale, TimeScale) == 0x000000, "Member 'SpineSkeletonAnimationComponent_SetTimeScale::TimeScale' has a wrong offset!");

// Function SpinePlugin.SpineWidget.AddAnimation
// 0x0028 (0x0028 - 0x0000)
struct SpineWidget_AddAnimation final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimationName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C9[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTrackEntry*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_AddAnimation) == 0x000008, "Wrong alignment on SpineWidget_AddAnimation");
static_assert(sizeof(SpineWidget_AddAnimation) == 0x000028, "Wrong size on SpineWidget_AddAnimation");
static_assert(offsetof(SpineWidget_AddAnimation, TrackIndex) == 0x000000, "Member 'SpineWidget_AddAnimation::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineWidget_AddAnimation, AnimationName) == 0x000008, "Member 'SpineWidget_AddAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(SpineWidget_AddAnimation, Loop) == 0x000018, "Member 'SpineWidget_AddAnimation::Loop' has a wrong offset!");
static_assert(offsetof(SpineWidget_AddAnimation, Delay) == 0x00001C, "Member 'SpineWidget_AddAnimation::Delay' has a wrong offset!");
static_assert(offsetof(SpineWidget_AddAnimation, ReturnValue) == 0x000020, "Member 'SpineWidget_AddAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.AddEmptyAnimation
// 0x0018 (0x0018 - 0x0000)
struct SpineWidget_AddEmptyAnimation final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixDuration;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_AddEmptyAnimation) == 0x000008, "Wrong alignment on SpineWidget_AddEmptyAnimation");
static_assert(sizeof(SpineWidget_AddEmptyAnimation) == 0x000018, "Wrong size on SpineWidget_AddEmptyAnimation");
static_assert(offsetof(SpineWidget_AddEmptyAnimation, TrackIndex) == 0x000000, "Member 'SpineWidget_AddEmptyAnimation::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineWidget_AddEmptyAnimation, MixDuration) == 0x000004, "Member 'SpineWidget_AddEmptyAnimation::MixDuration' has a wrong offset!");
static_assert(offsetof(SpineWidget_AddEmptyAnimation, Delay) == 0x000008, "Member 'SpineWidget_AddEmptyAnimation::Delay' has a wrong offset!");
static_assert(offsetof(SpineWidget_AddEmptyAnimation, ReturnValue) == 0x000010, "Member 'SpineWidget_AddEmptyAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.ClearTrack
// 0x0004 (0x0004 - 0x0000)
struct SpineWidget_ClearTrack final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_ClearTrack) == 0x000004, "Wrong alignment on SpineWidget_ClearTrack");
static_assert(sizeof(SpineWidget_ClearTrack) == 0x000004, "Wrong size on SpineWidget_ClearTrack");
static_assert(offsetof(SpineWidget_ClearTrack, TrackIndex) == 0x000000, "Member 'SpineWidget_ClearTrack::TrackIndex' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetAnimationDuration
// 0x0018 (0x0018 - 0x0000)
struct SpineWidget_GetAnimationDuration final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CB[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_GetAnimationDuration) == 0x000008, "Wrong alignment on SpineWidget_GetAnimationDuration");
static_assert(sizeof(SpineWidget_GetAnimationDuration) == 0x000018, "Wrong size on SpineWidget_GetAnimationDuration");
static_assert(offsetof(SpineWidget_GetAnimationDuration, AnimationName) == 0x000000, "Member 'SpineWidget_GetAnimationDuration::AnimationName' has a wrong offset!");
static_assert(offsetof(SpineWidget_GetAnimationDuration, ReturnValue) == 0x000010, "Member 'SpineWidget_GetAnimationDuration::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetAnimations
// 0x0010 (0x0010 - 0x0000)
struct SpineWidget_GetAnimations final
{
public:
	TArray<class FString>                         Animations;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetAnimations) == 0x000008, "Wrong alignment on SpineWidget_GetAnimations");
static_assert(sizeof(SpineWidget_GetAnimations) == 0x000010, "Wrong size on SpineWidget_GetAnimations");
static_assert(offsetof(SpineWidget_GetAnimations, Animations) == 0x000000, "Member 'SpineWidget_GetAnimations::Animations' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetBones
// 0x0010 (0x0010 - 0x0000)
struct SpineWidget_GetBones final
{
public:
	TArray<class FString>                         Bones;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetBones) == 0x000008, "Wrong alignment on SpineWidget_GetBones");
static_assert(sizeof(SpineWidget_GetBones) == 0x000010, "Wrong size on SpineWidget_GetBones");
static_assert(offsetof(SpineWidget_GetBones, Bones) == 0x000000, "Member 'SpineWidget_GetBones::Bones' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetBoneTransform
// 0x0040 (0x0040 - 0x0000)
struct SpineWidget_GetBoneTransform final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetBoneTransform) == 0x000010, "Wrong alignment on SpineWidget_GetBoneTransform");
static_assert(sizeof(SpineWidget_GetBoneTransform) == 0x000040, "Wrong size on SpineWidget_GetBoneTransform");
static_assert(offsetof(SpineWidget_GetBoneTransform, BoneName) == 0x000000, "Member 'SpineWidget_GetBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(SpineWidget_GetBoneTransform, ReturnValue) == 0x000010, "Member 'SpineWidget_GetBoneTransform::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetCurrent
// 0x0010 (0x0010 - 0x0000)
struct SpineWidget_GetCurrent final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetCurrent) == 0x000008, "Wrong alignment on SpineWidget_GetCurrent");
static_assert(sizeof(SpineWidget_GetCurrent) == 0x000010, "Wrong size on SpineWidget_GetCurrent");
static_assert(offsetof(SpineWidget_GetCurrent, TrackIndex) == 0x000000, "Member 'SpineWidget_GetCurrent::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineWidget_GetCurrent, ReturnValue) == 0x000008, "Member 'SpineWidget_GetCurrent::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetScaleX
// 0x0004 (0x0004 - 0x0000)
struct SpineWidget_GetScaleX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetScaleX) == 0x000004, "Wrong alignment on SpineWidget_GetScaleX");
static_assert(sizeof(SpineWidget_GetScaleX) == 0x000004, "Wrong size on SpineWidget_GetScaleX");
static_assert(offsetof(SpineWidget_GetScaleX, ReturnValue) == 0x000000, "Member 'SpineWidget_GetScaleX::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetScaleY
// 0x0004 (0x0004 - 0x0000)
struct SpineWidget_GetScaleY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetScaleY) == 0x000004, "Wrong alignment on SpineWidget_GetScaleY");
static_assert(sizeof(SpineWidget_GetScaleY) == 0x000004, "Wrong size on SpineWidget_GetScaleY");
static_assert(offsetof(SpineWidget_GetScaleY, ReturnValue) == 0x000000, "Member 'SpineWidget_GetScaleY::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetSkins
// 0x0010 (0x0010 - 0x0000)
struct SpineWidget_GetSkins final
{
public:
	TArray<class FString>                         Skins;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetSkins) == 0x000008, "Wrong alignment on SpineWidget_GetSkins");
static_assert(sizeof(SpineWidget_GetSkins) == 0x000010, "Wrong size on SpineWidget_GetSkins");
static_assert(offsetof(SpineWidget_GetSkins, Skins) == 0x000000, "Member 'SpineWidget_GetSkins::Skins' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetSlots
// 0x0010 (0x0010 - 0x0000)
struct SpineWidget_GetSlots final
{
public:
	TArray<class FString>                         Slots;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetSlots) == 0x000008, "Wrong alignment on SpineWidget_GetSlots");
static_assert(sizeof(SpineWidget_GetSlots) == 0x000010, "Wrong size on SpineWidget_GetSlots");
static_assert(offsetof(SpineWidget_GetSlots, Slots) == 0x000000, "Member 'SpineWidget_GetSlots::Slots' has a wrong offset!");

// Function SpinePlugin.SpineWidget.GetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct SpineWidget_GetTimeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_GetTimeScale) == 0x000004, "Wrong alignment on SpineWidget_GetTimeScale");
static_assert(sizeof(SpineWidget_GetTimeScale) == 0x000004, "Wrong size on SpineWidget_GetTimeScale");
static_assert(offsetof(SpineWidget_GetTimeScale, ReturnValue) == 0x000000, "Member 'SpineWidget_GetTimeScale::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.HasAnimation
// 0x0018 (0x0018 - 0x0000)
struct SpineWidget_HasAnimation final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_HasAnimation) == 0x000008, "Wrong alignment on SpineWidget_HasAnimation");
static_assert(sizeof(SpineWidget_HasAnimation) == 0x000018, "Wrong size on SpineWidget_HasAnimation");
static_assert(offsetof(SpineWidget_HasAnimation, AnimationName) == 0x000000, "Member 'SpineWidget_HasAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(SpineWidget_HasAnimation, ReturnValue) == 0x000010, "Member 'SpineWidget_HasAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.HasBone
// 0x0018 (0x0018 - 0x0000)
struct SpineWidget_HasBone final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_HasBone) == 0x000008, "Wrong alignment on SpineWidget_HasBone");
static_assert(sizeof(SpineWidget_HasBone) == 0x000018, "Wrong size on SpineWidget_HasBone");
static_assert(offsetof(SpineWidget_HasBone, BoneName) == 0x000000, "Member 'SpineWidget_HasBone::BoneName' has a wrong offset!");
static_assert(offsetof(SpineWidget_HasBone, ReturnValue) == 0x000010, "Member 'SpineWidget_HasBone::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.HasSkin
// 0x0018 (0x0018 - 0x0000)
struct SpineWidget_HasSkin final
{
public:
	class FString                                 SkinName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CF[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_HasSkin) == 0x000008, "Wrong alignment on SpineWidget_HasSkin");
static_assert(sizeof(SpineWidget_HasSkin) == 0x000018, "Wrong size on SpineWidget_HasSkin");
static_assert(offsetof(SpineWidget_HasSkin, SkinName) == 0x000000, "Member 'SpineWidget_HasSkin::SkinName' has a wrong offset!");
static_assert(offsetof(SpineWidget_HasSkin, ReturnValue) == 0x000010, "Member 'SpineWidget_HasSkin::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.HasSlot
// 0x0018 (0x0018 - 0x0000)
struct SpineWidget_HasSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D0[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_HasSlot) == 0x000008, "Wrong alignment on SpineWidget_HasSlot");
static_assert(sizeof(SpineWidget_HasSlot) == 0x000018, "Wrong size on SpineWidget_HasSlot");
static_assert(offsetof(SpineWidget_HasSlot, SlotName) == 0x000000, "Member 'SpineWidget_HasSlot::SlotName' has a wrong offset!");
static_assert(offsetof(SpineWidget_HasSlot, ReturnValue) == 0x000010, "Member 'SpineWidget_HasSlot::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetAnimation
// 0x0028 (0x0028 - 0x0000)
struct SpineWidget_SetAnimation final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimationName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D2[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTrackEntry*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_SetAnimation) == 0x000008, "Wrong alignment on SpineWidget_SetAnimation");
static_assert(sizeof(SpineWidget_SetAnimation) == 0x000028, "Wrong size on SpineWidget_SetAnimation");
static_assert(offsetof(SpineWidget_SetAnimation, TrackIndex) == 0x000000, "Member 'SpineWidget_SetAnimation::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetAnimation, AnimationName) == 0x000008, "Member 'SpineWidget_SetAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetAnimation, Loop) == 0x000018, "Member 'SpineWidget_SetAnimation::Loop' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetAnimation, ReturnValue) == 0x000020, "Member 'SpineWidget_SetAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetAttachment
// 0x0028 (0x0028 - 0x0000)
struct SpineWidget_SetAttachment final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachmentName;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D3[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_SetAttachment) == 0x000008, "Wrong alignment on SpineWidget_SetAttachment");
static_assert(sizeof(SpineWidget_SetAttachment) == 0x000028, "Wrong size on SpineWidget_SetAttachment");
static_assert(offsetof(SpineWidget_SetAttachment, SlotName) == 0x000000, "Member 'SpineWidget_SetAttachment::SlotName' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetAttachment, AttachmentName) == 0x000010, "Member 'SpineWidget_SetAttachment::AttachmentName' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetAttachment, ReturnValue) == 0x000020, "Member 'SpineWidget_SetAttachment::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetAutoPlay
// 0x0001 (0x0001 - 0x0000)
struct SpineWidget_SetAutoPlay final
{
public:
	bool                                          bInAutoPlays;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_SetAutoPlay) == 0x000001, "Wrong alignment on SpineWidget_SetAutoPlay");
static_assert(sizeof(SpineWidget_SetAutoPlay) == 0x000001, "Wrong size on SpineWidget_SetAutoPlay");
static_assert(offsetof(SpineWidget_SetAutoPlay, bInAutoPlays) == 0x000000, "Member 'SpineWidget_SetAutoPlay::bInAutoPlays' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetEmptyAnimation
// 0x0010 (0x0010 - 0x0000)
struct SpineWidget_SetEmptyAnimation final
{
public:
	int32                                         TrackIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MixDuration;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTrackEntry*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_SetEmptyAnimation) == 0x000008, "Wrong alignment on SpineWidget_SetEmptyAnimation");
static_assert(sizeof(SpineWidget_SetEmptyAnimation) == 0x000010, "Wrong size on SpineWidget_SetEmptyAnimation");
static_assert(offsetof(SpineWidget_SetEmptyAnimation, TrackIndex) == 0x000000, "Member 'SpineWidget_SetEmptyAnimation::TrackIndex' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetEmptyAnimation, MixDuration) == 0x000004, "Member 'SpineWidget_SetEmptyAnimation::MixDuration' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetEmptyAnimation, ReturnValue) == 0x000008, "Member 'SpineWidget_SetEmptyAnimation::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetPlaybackTime
// 0x0008 (0x0008 - 0x0000)
struct SpineWidget_SetPlaybackTime final
{
public:
	float                                         InPlaybackTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallDelegates;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D4[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_SetPlaybackTime) == 0x000004, "Wrong alignment on SpineWidget_SetPlaybackTime");
static_assert(sizeof(SpineWidget_SetPlaybackTime) == 0x000008, "Wrong size on SpineWidget_SetPlaybackTime");
static_assert(offsetof(SpineWidget_SetPlaybackTime, InPlaybackTime) == 0x000000, "Member 'SpineWidget_SetPlaybackTime::InPlaybackTime' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetPlaybackTime, bCallDelegates) == 0x000004, "Member 'SpineWidget_SetPlaybackTime::bCallDelegates' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetScaleX
// 0x0004 (0x0004 - 0x0000)
struct SpineWidget_SetScaleX final
{
public:
	float                                         ScaleX;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_SetScaleX) == 0x000004, "Wrong alignment on SpineWidget_SetScaleX");
static_assert(sizeof(SpineWidget_SetScaleX) == 0x000004, "Wrong size on SpineWidget_SetScaleX");
static_assert(offsetof(SpineWidget_SetScaleX, ScaleX) == 0x000000, "Member 'SpineWidget_SetScaleX::ScaleX' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetScaleY
// 0x0004 (0x0004 - 0x0000)
struct SpineWidget_SetScaleY final
{
public:
	float                                         ScaleY;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_SetScaleY) == 0x000004, "Wrong alignment on SpineWidget_SetScaleY");
static_assert(sizeof(SpineWidget_SetScaleY) == 0x000004, "Wrong size on SpineWidget_SetScaleY");
static_assert(offsetof(SpineWidget_SetScaleY, ScaleY) == 0x000000, "Member 'SpineWidget_SetScaleY::ScaleY' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetSkin
// 0x0018 (0x0018 - 0x0000)
struct SpineWidget_SetSkin final
{
public:
	class FString                                 SkinName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_SetSkin) == 0x000008, "Wrong alignment on SpineWidget_SetSkin");
static_assert(sizeof(SpineWidget_SetSkin) == 0x000018, "Wrong size on SpineWidget_SetSkin");
static_assert(offsetof(SpineWidget_SetSkin, SkinName) == 0x000000, "Member 'SpineWidget_SetSkin::SkinName' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetSkin, ReturnValue) == 0x000010, "Member 'SpineWidget_SetSkin::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetSkins
// 0x0018 (0x0018 - 0x0000)
struct SpineWidget_SetSkins final
{
public:
	TArray<class FString>                         SkinNames;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D6[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_SetSkins) == 0x000008, "Wrong alignment on SpineWidget_SetSkins");
static_assert(sizeof(SpineWidget_SetSkins) == 0x000018, "Wrong size on SpineWidget_SetSkins");
static_assert(offsetof(SpineWidget_SetSkins, SkinNames) == 0x000000, "Member 'SpineWidget_SetSkins::SkinNames' has a wrong offset!");
static_assert(offsetof(SpineWidget_SetSkins, ReturnValue) == 0x000010, "Member 'SpineWidget_SetSkins::ReturnValue' has a wrong offset!");

// Function SpinePlugin.SpineWidget.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct SpineWidget_SetTimeScale final
{
public:
	float                                         TimeScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineWidget_SetTimeScale) == 0x000004, "Wrong alignment on SpineWidget_SetTimeScale");
static_assert(sizeof(SpineWidget_SetTimeScale) == 0x000004, "Wrong size on SpineWidget_SetTimeScale");
static_assert(offsetof(SpineWidget_SetTimeScale, TimeScale) == 0x000000, "Member 'SpineWidget_SetTimeScale::TimeScale' has a wrong offset!");

// Function SpinePlugin.SpineWidget.Tick
// 0x0008 (0x0008 - 0x0000)
struct SpineWidget_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallDelegates;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D7[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpineWidget_Tick) == 0x000004, "Wrong alignment on SpineWidget_Tick");
static_assert(sizeof(SpineWidget_Tick) == 0x000008, "Wrong size on SpineWidget_Tick");
static_assert(offsetof(SpineWidget_Tick, DeltaTime) == 0x000000, "Member 'SpineWidget_Tick::DeltaTime' has a wrong offset!");
static_assert(offsetof(SpineWidget_Tick, CallDelegates) == 0x000004, "Member 'SpineWidget_Tick::CallDelegates' has a wrong offset!");

}

