#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroGameScreenshot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function KuroGameScreenshot.GameScreenshotTask.OnIOSPhotoLibraryAuthorizationCompleted
// 0x0001 (0x0001 - 0x0000)
struct GameScreenshotTask_OnIOSPhotoLibraryAuthorizationCompleted final
{
public:
	bool                                          IsGranted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameScreenshotTask_OnIOSPhotoLibraryAuthorizationCompleted) == 0x000001, "Wrong alignment on GameScreenshotTask_OnIOSPhotoLibraryAuthorizationCompleted");
static_assert(sizeof(GameScreenshotTask_OnIOSPhotoLibraryAuthorizationCompleted) == 0x000001, "Wrong size on GameScreenshotTask_OnIOSPhotoLibraryAuthorizationCompleted");
static_assert(offsetof(GameScreenshotTask_OnIOSPhotoLibraryAuthorizationCompleted, IsGranted) == 0x000000, "Member 'GameScreenshotTask_OnIOSPhotoLibraryAuthorizationCompleted::IsGranted' has a wrong offset!");

// Function KuroGameScreenshot.GameScreenshotTask.OnScreenshotCaptured
// 0x0018 (0x0018 - 0x0000)
struct GameScreenshotTask_OnScreenshotCaptured final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Colors;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameScreenshotTask_OnScreenshotCaptured) == 0x000008, "Wrong alignment on GameScreenshotTask_OnScreenshotCaptured");
static_assert(sizeof(GameScreenshotTask_OnScreenshotCaptured) == 0x000018, "Wrong size on GameScreenshotTask_OnScreenshotCaptured");
static_assert(offsetof(GameScreenshotTask_OnScreenshotCaptured, Width) == 0x000000, "Member 'GameScreenshotTask_OnScreenshotCaptured::Width' has a wrong offset!");
static_assert(offsetof(GameScreenshotTask_OnScreenshotCaptured, Height) == 0x000004, "Member 'GameScreenshotTask_OnScreenshotCaptured::Height' has a wrong offset!");
static_assert(offsetof(GameScreenshotTask_OnScreenshotCaptured, Colors) == 0x000008, "Member 'GameScreenshotTask_OnScreenshotCaptured::Colors' has a wrong offset!");

// Function KuroGameScreenshot.GameScreenshotTask.TakeScreenshot
// 0x0001 (0x0001 - 0x0000)
struct GameScreenshotTask_TakeScreenshot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameScreenshotTask_TakeScreenshot) == 0x000001, "Wrong alignment on GameScreenshotTask_TakeScreenshot");
static_assert(sizeof(GameScreenshotTask_TakeScreenshot) == 0x000001, "Wrong size on GameScreenshotTask_TakeScreenshot");
static_assert(offsetof(GameScreenshotTask_TakeScreenshot, ReturnValue) == 0x000000, "Member 'GameScreenshotTask_TakeScreenshot::ReturnValue' has a wrong offset!");

// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.CompressConvertColorsToBitmap
// 0x0028 (0x0028 - 0x0000)
struct KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Colors;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BitMap;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap) == 0x000008, "Wrong alignment on KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap");
static_assert(sizeof(KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap) == 0x000028, "Wrong size on KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap");
static_assert(offsetof(KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap, Width) == 0x000000, "Member 'KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap::Width' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap, Height) == 0x000004, "Member 'KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap::Height' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap, Colors) == 0x000008, "Member 'KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap::Colors' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap, BitMap) == 0x000018, "Member 'KuroGameScreenshotBPLibrary_CompressConvertColorsToBitmap::BitMap' has a wrong offset!");

// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.ConvertColorsToBitmap
// 0x0028 (0x0028 - 0x0000)
struct KuroGameScreenshotBPLibrary_ConvertColorsToBitmap final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Colors;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BitMap;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroGameScreenshotBPLibrary_ConvertColorsToBitmap) == 0x000008, "Wrong alignment on KuroGameScreenshotBPLibrary_ConvertColorsToBitmap");
static_assert(sizeof(KuroGameScreenshotBPLibrary_ConvertColorsToBitmap) == 0x000028, "Wrong size on KuroGameScreenshotBPLibrary_ConvertColorsToBitmap");
static_assert(offsetof(KuroGameScreenshotBPLibrary_ConvertColorsToBitmap, Width) == 0x000000, "Member 'KuroGameScreenshotBPLibrary_ConvertColorsToBitmap::Width' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_ConvertColorsToBitmap, Height) == 0x000004, "Member 'KuroGameScreenshotBPLibrary_ConvertColorsToBitmap::Height' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_ConvertColorsToBitmap, Colors) == 0x000008, "Member 'KuroGameScreenshotBPLibrary_ConvertColorsToBitmap::Colors' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_ConvertColorsToBitmap, BitMap) == 0x000018, "Member 'KuroGameScreenshotBPLibrary_ConvertColorsToBitmap::BitMap' has a wrong offset!");

// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.IsPhotoLibraryAuthorized
// 0x0001 (0x0001 - 0x0000)
struct KuroGameScreenshotBPLibrary_IsPhotoLibraryAuthorized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroGameScreenshotBPLibrary_IsPhotoLibraryAuthorized) == 0x000001, "Wrong alignment on KuroGameScreenshotBPLibrary_IsPhotoLibraryAuthorized");
static_assert(sizeof(KuroGameScreenshotBPLibrary_IsPhotoLibraryAuthorized) == 0x000001, "Wrong size on KuroGameScreenshotBPLibrary_IsPhotoLibraryAuthorized");
static_assert(offsetof(KuroGameScreenshotBPLibrary_IsPhotoLibraryAuthorized, ReturnValue) == 0x000000, "Member 'KuroGameScreenshotBPLibrary_IsPhotoLibraryAuthorized::ReturnValue' has a wrong offset!");

// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.PrepareTakeScreenshot
// 0x0040 (0x0040 - 0x0000)
struct KuroGameScreenshotBPLibrary_PrepareTakeScreenshot final
{
public:
	class UObject*                                Param_Outer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFilename;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MinCaptureRegion;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxCaptureRegion;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenshotResolutionX;                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenshotResolutionY;                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SaveFile;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_177D[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameScreenshotTask*                    ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot) == 0x000008, "Wrong alignment on KuroGameScreenshotBPLibrary_PrepareTakeScreenshot");
static_assert(sizeof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot) == 0x000040, "Wrong size on KuroGameScreenshotBPLibrary_PrepareTakeScreenshot");
static_assert(offsetof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot, Param_Outer) == 0x000000, "Member 'KuroGameScreenshotBPLibrary_PrepareTakeScreenshot::Param_Outer' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot, InFilename) == 0x000008, "Member 'KuroGameScreenshotBPLibrary_PrepareTakeScreenshot::InFilename' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot, MinCaptureRegion) == 0x000018, "Member 'KuroGameScreenshotBPLibrary_PrepareTakeScreenshot::MinCaptureRegion' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot, MaxCaptureRegion) == 0x000020, "Member 'KuroGameScreenshotBPLibrary_PrepareTakeScreenshot::MaxCaptureRegion' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot, ScreenshotResolutionX) == 0x000028, "Member 'KuroGameScreenshotBPLibrary_PrepareTakeScreenshot::ScreenshotResolutionX' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot, ScreenshotResolutionY) == 0x00002C, "Member 'KuroGameScreenshotBPLibrary_PrepareTakeScreenshot::ScreenshotResolutionY' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot, SaveFile) == 0x000030, "Member 'KuroGameScreenshotBPLibrary_PrepareTakeScreenshot::SaveFile' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_PrepareTakeScreenshot, ReturnValue) == 0x000038, "Member 'KuroGameScreenshotBPLibrary_PrepareTakeScreenshot::ReturnValue' has a wrong offset!");

// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.SaveColorArrayToAndroidAlbum
// 0x0018 (0x0018 - 0x0000)
struct KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BitMap;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum) == 0x000008, "Wrong alignment on KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum");
static_assert(sizeof(KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum) == 0x000018, "Wrong size on KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum");
static_assert(offsetof(KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum, Width) == 0x000000, "Member 'KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum::Width' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum, Height) == 0x000004, "Member 'KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum::Height' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum, BitMap) == 0x000008, "Member 'KuroGameScreenshotBPLibrary_SaveColorArrayToAndroidAlbum::BitMap' has a wrong offset!");

// Function KuroGameScreenshot.KuroGameScreenshotBPLibrary.SaveColorArrayToIosAlbum
// 0x0018 (0x0018 - 0x0000)
struct KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Colors;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum) == 0x000008, "Wrong alignment on KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum");
static_assert(sizeof(KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum) == 0x000018, "Wrong size on KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum");
static_assert(offsetof(KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum, Width) == 0x000000, "Member 'KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum::Width' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum, Height) == 0x000004, "Member 'KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum::Height' has a wrong offset!");
static_assert(offsetof(KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum, Colors) == 0x000008, "Member 'KuroGameScreenshotBPLibrary_SaveColorArrayToIosAlbum::Colors' has a wrong offset!");

}

