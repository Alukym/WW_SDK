#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: T4MRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class T4MRuntime.T4MLandscapeActor
// 0x0008 (0x02B0 - 0x02A8)
class AT4MLandscapeActor final : public AActor
{
public:
	class UT4MLandscapeComponent*                 T4MLandscapeComponent;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T4MLandscapeActor">();
	}
	static class AT4MLandscapeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AT4MLandscapeActor>();
	}
};
static_assert(alignof(AT4MLandscapeActor) == 0x000008, "Wrong alignment on AT4MLandscapeActor");
static_assert(sizeof(AT4MLandscapeActor) == 0x0002B0, "Wrong size on AT4MLandscapeActor");
static_assert(offsetof(AT4MLandscapeActor, T4MLandscapeComponent) == 0x0002A8, "Member 'AT4MLandscapeActor::T4MLandscapeComponent' has a wrong offset!");

// Class T4MRuntime.T4MLandscapeComponent
// 0x0090 (0x0620 - 0x0590)
class UT4MLandscapeComponent final : public UStaticMeshComponent
{
public:
	struct FGuid                                  MapBuildDataId;                                    // 0x0588(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionBaseX;                                      // 0x0598(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionBaseY;                                      // 0x059C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentSizeQuads;                                // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubsectionSizeQuads;                               // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSubsections;                                    // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2246[0x4];                                     // 0x05AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               WeightmapScaleBias;                                // 0x05B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightmapSubsectionOffset;                         // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightmapSubsectionOffsetU;                        // 0x05C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightmapSubsectionOffsetV;                        // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2247[0x4];                                     // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               HeightmapScaleBias;                                // 0x05D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BlendableLayerMask;                                // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2248[0x3];                                     // 0x05E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticLightingLOD;                                 // 0x05E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticLightingResolution;                          // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2249[0x4];                                     // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             NormalmapTexture;                                  // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     WeightmapTextures;                                 // 0x05F8(0x0010)(ZeroConstructor, TextExportTransient, NativeAccessSpecifierPublic)
	class UTexture2D*                             IndexmapTexture;                                   // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceConstant*>      MaterialInstances;                                 // 0x0610(0x0010)(ZeroConstructor, TextExportTransient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T4MLandscapeComponent">();
	}
	static class UT4MLandscapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UT4MLandscapeComponent>();
	}
};
static_assert(alignof(UT4MLandscapeComponent) == 0x000010, "Wrong alignment on UT4MLandscapeComponent");
static_assert(sizeof(UT4MLandscapeComponent) == 0x000620, "Wrong size on UT4MLandscapeComponent");
static_assert(offsetof(UT4MLandscapeComponent, MapBuildDataId) == 0x000588, "Member 'UT4MLandscapeComponent::MapBuildDataId' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, SectionBaseX) == 0x000598, "Member 'UT4MLandscapeComponent::SectionBaseX' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, SectionBaseY) == 0x00059C, "Member 'UT4MLandscapeComponent::SectionBaseY' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, ComponentSizeQuads) == 0x0005A0, "Member 'UT4MLandscapeComponent::ComponentSizeQuads' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, SubsectionSizeQuads) == 0x0005A4, "Member 'UT4MLandscapeComponent::SubsectionSizeQuads' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, NumSubsections) == 0x0005A8, "Member 'UT4MLandscapeComponent::NumSubsections' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, WeightmapScaleBias) == 0x0005B0, "Member 'UT4MLandscapeComponent::WeightmapScaleBias' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, WeightmapSubsectionOffset) == 0x0005C0, "Member 'UT4MLandscapeComponent::WeightmapSubsectionOffset' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, HeightmapSubsectionOffsetU) == 0x0005C4, "Member 'UT4MLandscapeComponent::HeightmapSubsectionOffsetU' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, HeightmapSubsectionOffsetV) == 0x0005C8, "Member 'UT4MLandscapeComponent::HeightmapSubsectionOffsetV' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, HeightmapScaleBias) == 0x0005D0, "Member 'UT4MLandscapeComponent::HeightmapScaleBias' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, BlendableLayerMask) == 0x0005E0, "Member 'UT4MLandscapeComponent::BlendableLayerMask' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, StaticLightingLOD) == 0x0005E4, "Member 'UT4MLandscapeComponent::StaticLightingLOD' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, StaticLightingResolution) == 0x0005E8, "Member 'UT4MLandscapeComponent::StaticLightingResolution' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, NormalmapTexture) == 0x0005F0, "Member 'UT4MLandscapeComponent::NormalmapTexture' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, WeightmapTextures) == 0x0005F8, "Member 'UT4MLandscapeComponent::WeightmapTextures' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, IndexmapTexture) == 0x000608, "Member 'UT4MLandscapeComponent::IndexmapTexture' has a wrong offset!");
static_assert(offsetof(UT4MLandscapeComponent, MaterialInstances) == 0x000610, "Member 'UT4MLandscapeComponent::MaterialInstances' has a wrong offset!");

}

