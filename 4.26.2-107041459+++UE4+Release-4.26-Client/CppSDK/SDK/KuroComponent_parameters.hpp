#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KuroComponent_structs.hpp"


namespace SDK::Params
{

// Function KuroComponent.KuroCharacterAnimationComponent.AddModelQuat
// 0x0020 (0x0020 - 0x0000)
struct KuroCharacterAnimationComponent_AddModelQuat final
{
public:
	struct FQuat                                  Quat;                                              // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          LockCenter;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7A[0xF];                                     // 0x0011(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroCharacterAnimationComponent_AddModelQuat) == 0x000010, "Wrong alignment on KuroCharacterAnimationComponent_AddModelQuat");
static_assert(sizeof(KuroCharacterAnimationComponent_AddModelQuat) == 0x000020, "Wrong size on KuroCharacterAnimationComponent_AddModelQuat");
static_assert(offsetof(KuroCharacterAnimationComponent_AddModelQuat, Quat) == 0x000000, "Member 'KuroCharacterAnimationComponent_AddModelQuat::Quat' has a wrong offset!");
static_assert(offsetof(KuroCharacterAnimationComponent_AddModelQuat, LockCenter) == 0x000010, "Member 'KuroCharacterAnimationComponent_AddModelQuat::LockCenter' has a wrong offset!");

// Function KuroComponent.KuroCharacterAnimationComponent.GetTransformOffsetInWorld
// 0x0060 (0x0060 - 0x0000)
struct KuroCharacterAnimationComponent_GetTransformOffsetInWorld final
{
public:
	struct FTransform                             Child;                                             // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Parent;                                            // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroCharacterAnimationComponent_GetTransformOffsetInWorld) == 0x000010, "Wrong alignment on KuroCharacterAnimationComponent_GetTransformOffsetInWorld");
static_assert(sizeof(KuroCharacterAnimationComponent_GetTransformOffsetInWorld) == 0x000060, "Wrong size on KuroCharacterAnimationComponent_GetTransformOffsetInWorld");
static_assert(offsetof(KuroCharacterAnimationComponent_GetTransformOffsetInWorld, Child) == 0x000000, "Member 'KuroCharacterAnimationComponent_GetTransformOffsetInWorld::Child' has a wrong offset!");
static_assert(offsetof(KuroCharacterAnimationComponent_GetTransformOffsetInWorld, Parent) == 0x000030, "Member 'KuroCharacterAnimationComponent_GetTransformOffsetInWorld::Parent' has a wrong offset!");

// Function KuroComponent.KuroRegionDetectComponent.GetRegionEvent
// 0x0018 (0x0018 - 0x0000)
struct KuroRegionDetectComponent_GetRegionEvent final
{
public:
	class FString                                 RegionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKuroRegionEventBinder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroRegionDetectComponent_GetRegionEvent) == 0x000008, "Wrong alignment on KuroRegionDetectComponent_GetRegionEvent");
static_assert(sizeof(KuroRegionDetectComponent_GetRegionEvent) == 0x000018, "Wrong size on KuroRegionDetectComponent_GetRegionEvent");
static_assert(offsetof(KuroRegionDetectComponent_GetRegionEvent, RegionName) == 0x000000, "Member 'KuroRegionDetectComponent_GetRegionEvent::RegionName' has a wrong offset!");
static_assert(offsetof(KuroRegionDetectComponent_GetRegionEvent, ReturnValue) == 0x000010, "Member 'KuroRegionDetectComponent_GetRegionEvent::ReturnValue' has a wrong offset!");

// Function KuroComponent.KuroRegionDetectComponent.SetDebugMode
// 0x0001 (0x0001 - 0x0000)
struct KuroRegionDetectComponent_SetDebugMode final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroRegionDetectComponent_SetDebugMode) == 0x000001, "Wrong alignment on KuroRegionDetectComponent_SetDebugMode");
static_assert(sizeof(KuroRegionDetectComponent_SetDebugMode) == 0x000001, "Wrong size on KuroRegionDetectComponent_SetDebugMode");
static_assert(offsetof(KuroRegionDetectComponent_SetDebugMode, IsOpen) == 0x000000, "Member 'KuroRegionDetectComponent_SetDebugMode::IsOpen' has a wrong offset!");

// Function KuroComponent.KuroRegionDetectComponent.SetEventTarget
// 0x0008 (0x0008 - 0x0000)
struct KuroRegionDetectComponent_SetEventTarget final
{
public:
	class AActor*                                 DetectTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroRegionDetectComponent_SetEventTarget) == 0x000008, "Wrong alignment on KuroRegionDetectComponent_SetEventTarget");
static_assert(sizeof(KuroRegionDetectComponent_SetEventTarget) == 0x000008, "Wrong size on KuroRegionDetectComponent_SetEventTarget");
static_assert(offsetof(KuroRegionDetectComponent_SetEventTarget, DetectTarget) == 0x000000, "Member 'KuroRegionDetectComponent_SetEventTarget::DetectTarget' has a wrong offset!");

// Function KuroComponent.KuroRegionDetectComponent.SetEventTargets
// 0x0010 (0x0010 - 0x0000)
struct KuroRegionDetectComponent_SetEventTargets final
{
public:
	TArray<class AActor*>                         DetectTargets;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroRegionDetectComponent_SetEventTargets) == 0x000008, "Wrong alignment on KuroRegionDetectComponent_SetEventTargets");
static_assert(sizeof(KuroRegionDetectComponent_SetEventTargets) == 0x000010, "Wrong size on KuroRegionDetectComponent_SetEventTargets");
static_assert(offsetof(KuroRegionDetectComponent_SetEventTargets, DetectTargets) == 0x000000, "Member 'KuroRegionDetectComponent_SetEventTargets::DetectTargets' has a wrong offset!");

// Function KuroComponent.KuroRegionDetectComponent.Detect
// 0x0028 (0x0028 - 0x0000)
struct KuroRegionDetectComponent_Detect final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroRegionDetectComponent_Detect) == 0x000008, "Wrong alignment on KuroRegionDetectComponent_Detect");
static_assert(sizeof(KuroRegionDetectComponent_Detect) == 0x000028, "Wrong size on KuroRegionDetectComponent_Detect");
static_assert(offsetof(KuroRegionDetectComponent_Detect, Point) == 0x000000, "Member 'KuroRegionDetectComponent_Detect::Point' has a wrong offset!");
static_assert(offsetof(KuroRegionDetectComponent_Detect, RegionName) == 0x000010, "Member 'KuroRegionDetectComponent_Detect::RegionName' has a wrong offset!");
static_assert(offsetof(KuroRegionDetectComponent_Detect, ReturnValue) == 0x000020, "Member 'KuroRegionDetectComponent_Detect::ReturnValue' has a wrong offset!");

// Function KuroComponent.KuroSceneItemGuidePathComponent.StartTick
// 0x0044 (0x0044 - 0x0000)
struct KuroSceneItemGuidePathComponent_StartTick final
{
public:
	struct FLinearColor                           Normal;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ChangeCoefficient;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Finish;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalCountDown;                                    // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurCountDown;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemGuidePathComponent_StartTick) == 0x000004, "Wrong alignment on KuroSceneItemGuidePathComponent_StartTick");
static_assert(sizeof(KuroSceneItemGuidePathComponent_StartTick) == 0x000044, "Wrong size on KuroSceneItemGuidePathComponent_StartTick");
static_assert(offsetof(KuroSceneItemGuidePathComponent_StartTick, Normal) == 0x000000, "Member 'KuroSceneItemGuidePathComponent_StartTick::Normal' has a wrong offset!");
static_assert(offsetof(KuroSceneItemGuidePathComponent_StartTick, ChangeCoefficient) == 0x000010, "Member 'KuroSceneItemGuidePathComponent_StartTick::ChangeCoefficient' has a wrong offset!");
static_assert(offsetof(KuroSceneItemGuidePathComponent_StartTick, Finish) == 0x000020, "Member 'KuroSceneItemGuidePathComponent_StartTick::Finish' has a wrong offset!");
static_assert(offsetof(KuroSceneItemGuidePathComponent_StartTick, ParameterName) == 0x000030, "Member 'KuroSceneItemGuidePathComponent_StartTick::ParameterName' has a wrong offset!");
static_assert(offsetof(KuroSceneItemGuidePathComponent_StartTick, TotalCountDown) == 0x00003C, "Member 'KuroSceneItemGuidePathComponent_StartTick::TotalCountDown' has a wrong offset!");
static_assert(offsetof(KuroSceneItemGuidePathComponent_StartTick, CurCountDown) == 0x000040, "Member 'KuroSceneItemGuidePathComponent_StartTick::CurCountDown' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.AddMoveTarget
// 0x0014 (0x0014 - 0x0000)
struct KuroSceneItemMoveComponent_AddMoveTarget final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemMoveComponent_AddMoveTarget) == 0x000004, "Wrong alignment on KuroSceneItemMoveComponent_AddMoveTarget");
static_assert(sizeof(KuroSceneItemMoveComponent_AddMoveTarget) == 0x000014, "Wrong size on KuroSceneItemMoveComponent_AddMoveTarget");
static_assert(offsetof(KuroSceneItemMoveComponent_AddMoveTarget, Loc) == 0x000000, "Member 'KuroSceneItemMoveComponent_AddMoveTarget::Loc' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_AddMoveTarget, MoveTime) == 0x00000C, "Member 'KuroSceneItemMoveComponent_AddMoveTarget::MoveTime' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_AddMoveTarget, WaitTime) == 0x000010, "Member 'KuroSceneItemMoveComponent_AddMoveTarget::WaitTime' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.AddRotationStep
// 0x0030 (0x0030 - 0x0000)
struct KuroSceneItemMoveComponent_AddRotationStep final
{
public:
	struct FRotator                               BeginRotation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               EndRotation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeSec;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CdSec;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotateCurve;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A86[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroSceneItemMoveComponent_AddRotationStep) == 0x000008, "Wrong alignment on KuroSceneItemMoveComponent_AddRotationStep");
static_assert(sizeof(KuroSceneItemMoveComponent_AddRotationStep) == 0x000030, "Wrong size on KuroSceneItemMoveComponent_AddRotationStep");
static_assert(offsetof(KuroSceneItemMoveComponent_AddRotationStep, BeginRotation) == 0x000000, "Member 'KuroSceneItemMoveComponent_AddRotationStep::BeginRotation' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_AddRotationStep, EndRotation) == 0x00000C, "Member 'KuroSceneItemMoveComponent_AddRotationStep::EndRotation' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_AddRotationStep, TimeSec) == 0x000018, "Member 'KuroSceneItemMoveComponent_AddRotationStep::TimeSec' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_AddRotationStep, CdSec) == 0x00001C, "Member 'KuroSceneItemMoveComponent_AddRotationStep::CdSec' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_AddRotationStep, RotateCurve) == 0x000020, "Member 'KuroSceneItemMoveComponent_AddRotationStep::RotateCurve' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_AddRotationStep, ReturnValue) == 0x000028, "Member 'KuroSceneItemMoveComponent_AddRotationStep::ReturnValue' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.InitRotationData
// 0x0010 (0x0010 - 0x0000)
struct KuroSceneItemMoveComponent_InitRotationData final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A87[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroSceneItemMoveComponent_InitRotationData) == 0x000008, "Wrong alignment on KuroSceneItemMoveComponent_InitRotationData");
static_assert(sizeof(KuroSceneItemMoveComponent_InitRotationData) == 0x000010, "Wrong size on KuroSceneItemMoveComponent_InitRotationData");
static_assert(offsetof(KuroSceneItemMoveComponent_InitRotationData, TargetActor) == 0x000000, "Member 'KuroSceneItemMoveComponent_InitRotationData::TargetActor' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_InitRotationData, IsLoop) == 0x000008, "Member 'KuroSceneItemMoveComponent_InitRotationData::IsLoop' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_InitRotationData, ReturnValue) == 0x000009, "Member 'KuroSceneItemMoveComponent_InitRotationData::ReturnValue' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.SetTickingMoveEnable
// 0x0001 (0x0001 - 0x0000)
struct KuroSceneItemMoveComponent_SetTickingMoveEnable final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemMoveComponent_SetTickingMoveEnable) == 0x000001, "Wrong alignment on KuroSceneItemMoveComponent_SetTickingMoveEnable");
static_assert(sizeof(KuroSceneItemMoveComponent_SetTickingMoveEnable) == 0x000001, "Wrong size on KuroSceneItemMoveComponent_SetTickingMoveEnable");
static_assert(offsetof(KuroSceneItemMoveComponent_SetTickingMoveEnable, bEnabled) == 0x000000, "Member 'KuroSceneItemMoveComponent_SetTickingMoveEnable::bEnabled' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.SetTickingRotateEnable
// 0x0001 (0x0001 - 0x0000)
struct KuroSceneItemMoveComponent_SetTickingRotateEnable final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemMoveComponent_SetTickingRotateEnable) == 0x000001, "Wrong alignment on KuroSceneItemMoveComponent_SetTickingRotateEnable");
static_assert(sizeof(KuroSceneItemMoveComponent_SetTickingRotateEnable) == 0x000001, "Wrong size on KuroSceneItemMoveComponent_SetTickingRotateEnable");
static_assert(offsetof(KuroSceneItemMoveComponent_SetTickingRotateEnable, bEnabled) == 0x000000, "Member 'KuroSceneItemMoveComponent_SetTickingRotateEnable::bEnabled' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.StartMoveWithSpline
// 0x0020 (0x0020 - 0x0000)
struct KuroSceneItemMoveComponent_StartMoveWithSpline final
{
public:
	class USplineComponent*                       SplineComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Repeat;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cycle;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepLookAt;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A88[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Speeds;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemMoveComponent_StartMoveWithSpline) == 0x000008, "Wrong alignment on KuroSceneItemMoveComponent_StartMoveWithSpline");
static_assert(sizeof(KuroSceneItemMoveComponent_StartMoveWithSpline) == 0x000020, "Wrong size on KuroSceneItemMoveComponent_StartMoveWithSpline");
static_assert(offsetof(KuroSceneItemMoveComponent_StartMoveWithSpline, SplineComponent) == 0x000000, "Member 'KuroSceneItemMoveComponent_StartMoveWithSpline::SplineComponent' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_StartMoveWithSpline, Repeat) == 0x000008, "Member 'KuroSceneItemMoveComponent_StartMoveWithSpline::Repeat' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_StartMoveWithSpline, Cycle) == 0x000009, "Member 'KuroSceneItemMoveComponent_StartMoveWithSpline::Cycle' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_StartMoveWithSpline, KeepLookAt) == 0x00000A, "Member 'KuroSceneItemMoveComponent_StartMoveWithSpline::KeepLookAt' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_StartMoveWithSpline, Speeds) == 0x000010, "Member 'KuroSceneItemMoveComponent_StartMoveWithSpline::Speeds' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.StartRotate
// 0x0001 (0x0001 - 0x0000)
struct KuroSceneItemMoveComponent_StartRotate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemMoveComponent_StartRotate) == 0x000001, "Wrong alignment on KuroSceneItemMoveComponent_StartRotate");
static_assert(sizeof(KuroSceneItemMoveComponent_StartRotate) == 0x000001, "Wrong size on KuroSceneItemMoveComponent_StartRotate");
static_assert(offsetof(KuroSceneItemMoveComponent_StartRotate, ReturnValue) == 0x000000, "Member 'KuroSceneItemMoveComponent_StartRotate::ReturnValue' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.StopRotate
// 0x0002 (0x0002 - 0x0000)
struct KuroSceneItemMoveComponent_StopRotate final
{
public:
	EKuroSceneItemStopRotateMethod                StopMethod;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemMoveComponent_StopRotate) == 0x000001, "Wrong alignment on KuroSceneItemMoveComponent_StopRotate");
static_assert(sizeof(KuroSceneItemMoveComponent_StopRotate) == 0x000002, "Wrong size on KuroSceneItemMoveComponent_StopRotate");
static_assert(offsetof(KuroSceneItemMoveComponent_StopRotate, StopMethod) == 0x000000, "Member 'KuroSceneItemMoveComponent_StopRotate::StopMethod' has a wrong offset!");
static_assert(offsetof(KuroSceneItemMoveComponent_StopRotate, ReturnValue) == 0x000001, "Member 'KuroSceneItemMoveComponent_StopRotate::ReturnValue' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct KuroSceneItemMoveComponent_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemMoveComponent_IsMoving) == 0x000001, "Wrong alignment on KuroSceneItemMoveComponent_IsMoving");
static_assert(sizeof(KuroSceneItemMoveComponent_IsMoving) == 0x000001, "Wrong size on KuroSceneItemMoveComponent_IsMoving");
static_assert(offsetof(KuroSceneItemMoveComponent_IsMoving, ReturnValue) == 0x000000, "Member 'KuroSceneItemMoveComponent_IsMoving::ReturnValue' has a wrong offset!");

// Function KuroComponent.KuroSceneItemMoveComponent.IsRotating
// 0x0001 (0x0001 - 0x0000)
struct KuroSceneItemMoveComponent_IsRotating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSceneItemMoveComponent_IsRotating) == 0x000001, "Wrong alignment on KuroSceneItemMoveComponent_IsRotating");
static_assert(sizeof(KuroSceneItemMoveComponent_IsRotating) == 0x000001, "Wrong size on KuroSceneItemMoveComponent_IsRotating");
static_assert(offsetof(KuroSceneItemMoveComponent_IsRotating, ReturnValue) == 0x000000, "Member 'KuroSceneItemMoveComponent_IsRotating::ReturnValue' has a wrong offset!");

}

