#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroComponent

#include "Basic.hpp"

#include "KuroComponent_classes.hpp"
#include "KuroComponent_parameters.hpp"


namespace SDK
{

// Function KuroComponent.KuroAnimPerfTestComponent.DestroySkeletalMeshActors
// (Final, Native, Public, BlueprintCallable)

void UKuroAnimPerfTestComponent::DestroySkeletalMeshActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroAnimPerfTestComponent", "DestroySkeletalMeshActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroAnimPerfTestComponent.GenerateSkeletalMeshActors
// (Final, Native, Public, BlueprintCallable)

void UKuroAnimPerfTestComponent::GenerateSkeletalMeshActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroAnimPerfTestComponent", "GenerateSkeletalMeshActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroChainComponent.InitChain
// (Native, Protected, BlueprintCallable)

void UKuroChainComponent::InitChain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroChainComponent", "InitChain");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroCharacterAnimationComponent.AddModelQuat
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FQuat                            Quat                                                   (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    LockCenter                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroCharacterAnimationComponent::AddModelQuat(const struct FQuat& Quat, bool LockCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroCharacterAnimationComponent", "AddModelQuat");

	Params::KuroCharacterAnimationComponent_AddModelQuat Parms{};

	Parms.Quat = std::move(Quat);
	Parms.LockCenter = LockCenter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroCharacterAnimationComponent.GetTransformOffsetInWorld
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Child                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       Parent                                                 (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKuroCharacterAnimationComponent::GetTransformOffsetInWorld(const struct FTransform& Child, const struct FTransform& Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroCharacterAnimationComponent", "GetTransformOffsetInWorld");

	Params::KuroCharacterAnimationComponent_GetTransformOffsetInWorld Parms{};

	Parms.Child = std::move(Child);
	Parms.Parent = std::move(Parent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroCharacterAnimationComponent.ResetModelQuat
// (Final, Native, Public, BlueprintCallable)

void UKuroCharacterAnimationComponent::ResetModelQuat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroCharacterAnimationComponent", "ResetModelQuat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroCharacterAnimationComponent.StopModelBuffer
// (Final, Native, Public, BlueprintCallable)

void UKuroCharacterAnimationComponent::StopModelBuffer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroCharacterAnimationComponent", "StopModelBuffer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroRegionDetectComponent.GetRegionEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RegionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UKuroRegionEventBinder*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKuroRegionEventBinder* UKuroRegionDetectComponent::GetRegionEvent(const class FString& RegionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroRegionDetectComponent", "GetRegionEvent");

	Params::KuroRegionDetectComponent_GetRegionEvent Parms{};

	Parms.RegionName = std::move(RegionName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroComponent.KuroRegionDetectComponent.SetDebugMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsOpen                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroRegionDetectComponent::SetDebugMode(const bool IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroRegionDetectComponent", "SetDebugMode");

	Params::KuroRegionDetectComponent_SetDebugMode Parms{};

	Parms.IsOpen = IsOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroRegionDetectComponent.SetEventTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DetectTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroRegionDetectComponent::SetEventTarget(class AActor* DetectTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroRegionDetectComponent", "SetEventTarget");

	Params::KuroRegionDetectComponent_SetEventTarget Parms{};

	Parms.DetectTarget = DetectTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroRegionDetectComponent.SetEventTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>                   DetectTargets                                          (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UKuroRegionDetectComponent::SetEventTargets(const TArray<class AActor*>& DetectTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroRegionDetectComponent", "SetEventTargets");

	Params::KuroRegionDetectComponent_SetEventTargets Parms{};

	Parms.DetectTargets = std::move(DetectTargets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroRegionDetectComponent.Detect
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RegionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroRegionDetectComponent::Detect(const struct FVector& Point, const class FString& RegionName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroRegionDetectComponent", "Detect");

	Params::KuroRegionDetectComponent_Detect Parms{};

	Parms.Point = std::move(Point);
	Parms.RegionName = std::move(RegionName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroComponent.KuroSceneItemGuidePathComponent.StartTick
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     Normal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ChangeCoefficient                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Finish                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalCountDown                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurCountDown                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSceneItemGuidePathComponent::StartTick(const struct FLinearColor& Normal, const struct FLinearColor& ChangeCoefficient, const struct FLinearColor& Finish, class FName ParameterName, float TotalCountDown, float CurCountDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemGuidePathComponent", "StartTick");

	Params::KuroSceneItemGuidePathComponent_StartTick Parms{};

	Parms.Normal = std::move(Normal);
	Parms.ChangeCoefficient = std::move(ChangeCoefficient);
	Parms.Finish = std::move(Finish);
	Parms.ParameterName = ParameterName;
	Parms.TotalCountDown = TotalCountDown;
	Parms.CurCountDown = CurCountDown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroSceneItemMoveComponent.AddMoveTarget
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Loc                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MoveTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WaitTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSceneItemMoveComponent::AddMoveTarget(const struct FVector& Loc, float MoveTime, float WaitTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "AddMoveTarget");

	Params::KuroSceneItemMoveComponent_AddMoveTarget Parms{};

	Parms.Loc = std::move(Loc);
	Parms.MoveTime = MoveTime;
	Parms.WaitTime = WaitTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroSceneItemMoveComponent.AddRotationStep
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FRotator                         BeginRotation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         EndRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeSec                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CdSec                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      RotateCurve                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSceneItemMoveComponent::AddRotationStep(const struct FRotator& BeginRotation, const struct FRotator& EndRotation, float TimeSec, float CdSec, class UCurveFloat* RotateCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "AddRotationStep");

	Params::KuroSceneItemMoveComponent_AddRotationStep Parms{};

	Parms.BeginRotation = std::move(BeginRotation);
	Parms.EndRotation = std::move(EndRotation);
	Parms.TimeSec = TimeSec;
	Parms.CdSec = CdSec;
	Parms.RotateCurve = RotateCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroComponent.KuroSceneItemMoveComponent.InitRotationData
// (Final, Native, Public)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSceneItemMoveComponent::InitRotationData(class AActor* TargetActor, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "InitRotationData");

	Params::KuroSceneItemMoveComponent_InitRotationData Parms{};

	Parms.TargetActor = TargetActor;
	Parms.IsLoop = IsLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroComponent.KuroSceneItemMoveComponent.OnStopMoveToFirstPoint
// (Final, Native, Private)

void UKuroSceneItemMoveComponent::OnStopMoveToFirstPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "OnStopMoveToFirstPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroSceneItemMoveComponent.SetTickingMoveEnable
// (Final, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSceneItemMoveComponent::SetTickingMoveEnable(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "SetTickingMoveEnable");

	Params::KuroSceneItemMoveComponent_SetTickingMoveEnable Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroSceneItemMoveComponent.SetTickingRotateEnable
// (Final, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSceneItemMoveComponent::SetTickingRotateEnable(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "SetTickingRotateEnable");

	Params::KuroSceneItemMoveComponent_SetTickingRotateEnable Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroSceneItemMoveComponent.StartMoveWithSpline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 SplineComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Repeat                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Cycle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepLookAt                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           Speeds                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UKuroSceneItemMoveComponent::StartMoveWithSpline(class USplineComponent* SplineComponent, bool Repeat, bool Cycle, bool KeepLookAt, const TArray<float>& Speeds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "StartMoveWithSpline");

	Params::KuroSceneItemMoveComponent_StartMoveWithSpline Parms{};

	Parms.SplineComponent = SplineComponent;
	Parms.Repeat = Repeat;
	Parms.Cycle = Cycle;
	Parms.KeepLookAt = KeepLookAt;
	Parms.Speeds = std::move(Speeds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroComponent.KuroSceneItemMoveComponent.StartRotate
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSceneItemMoveComponent::StartRotate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "StartRotate");

	Params::KuroSceneItemMoveComponent_StartRotate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroComponent.KuroSceneItemMoveComponent.StopRotate
// (Final, Native, Public)
// Parameters:
// EKuroSceneItemStopRotateMethod          StopMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSceneItemMoveComponent::StopRotate(EKuroSceneItemStopRotateMethod StopMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "StopRotate");

	Params::KuroSceneItemMoveComponent_StopRotate Parms{};

	Parms.StopMethod = StopMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroComponent.KuroSceneItemMoveComponent.IsMoving
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSceneItemMoveComponent::IsMoving() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "IsMoving");

	Params::KuroSceneItemMoveComponent_IsMoving Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroComponent.KuroSceneItemMoveComponent.IsRotating
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroSceneItemMoveComponent::IsRotating() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSceneItemMoveComponent", "IsRotating");

	Params::KuroSceneItemMoveComponent_IsRotating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroComponent.KuroSplineChainComponent.UpdateSplineChainIndex
// (Native, Protected, BlueprintCallable)

void UKuroSplineChainComponent::UpdateSplineChainIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSplineChainComponent", "UpdateSplineChainIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

