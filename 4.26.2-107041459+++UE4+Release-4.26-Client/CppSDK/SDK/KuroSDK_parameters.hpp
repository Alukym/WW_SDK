#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroSDK

#include "Basic.hpp"

#include "KuroSDK_structs.hpp"


namespace SDK::Params
{

// Function KuroSDK.KuroSDKManager.CheckPhotoPermission
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_CheckPhotoPermission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_CheckPhotoPermission) == 0x000001, "Wrong alignment on KuroSDKManager_CheckPhotoPermission");
static_assert(sizeof(KuroSDKManager_CheckPhotoPermission) == 0x000001, "Wrong size on KuroSDKManager_CheckPhotoPermission");
static_assert(offsetof(KuroSDKManager_CheckPhotoPermission, ReturnValue) == 0x000000, "Member 'KuroSDKManager_CheckPhotoPermission::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.Get
// 0x0008 (0x0008 - 0x0000)
struct KuroSDKManager_Get final
{
public:
	class UKuroSDKManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_Get) == 0x000008, "Wrong alignment on KuroSDKManager_Get");
static_assert(sizeof(KuroSDKManager_Get) == 0x000008, "Wrong size on KuroSDKManager_Get");
static_assert(offsetof(KuroSDKManager_Get, ReturnValue) == 0x000000, "Member 'KuroSDKManager_Get::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetAdsValue
// 0x0020 (0x0020 - 0x0000)
struct KuroSDKManager_GetAdsValue final
{
public:
	class FString                                 Income;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetAdsValue) == 0x000008, "Wrong alignment on KuroSDKManager_GetAdsValue");
static_assert(sizeof(KuroSDKManager_GetAdsValue) == 0x000020, "Wrong size on KuroSDKManager_GetAdsValue");
static_assert(offsetof(KuroSDKManager_GetAdsValue, Income) == 0x000000, "Member 'KuroSDKManager_GetAdsValue::Income' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_GetAdsValue, Data) == 0x000010, "Member 'KuroSDKManager_GetAdsValue::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetAgreementUrl
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_GetAgreementUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetAgreementUrl) == 0x000008, "Wrong alignment on KuroSDKManager_GetAgreementUrl");
static_assert(sizeof(KuroSDKManager_GetAgreementUrl) == 0x000010, "Wrong size on KuroSDKManager_GetAgreementUrl");
static_assert(offsetof(KuroSDKManager_GetAgreementUrl, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetAgreementUrl::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetAppChannelId
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_GetAppChannelId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetAppChannelId) == 0x000008, "Wrong alignment on KuroSDKManager_GetAppChannelId");
static_assert(sizeof(KuroSDKManager_GetAppChannelId) == 0x000010, "Wrong size on KuroSDKManager_GetAppChannelId");
static_assert(offsetof(KuroSDKManager_GetAppChannelId, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetAppChannelId::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetBasicInfo
// 0x0048 (0x0048 - 0x0000)
struct KuroSDKManager_GetBasicInfo final
{
public:
	struct FBasicInfo                             ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetBasicInfo) == 0x000008, "Wrong alignment on KuroSDKManager_GetBasicInfo");
static_assert(sizeof(KuroSDKManager_GetBasicInfo) == 0x000048, "Wrong size on KuroSDKManager_GetBasicInfo");
static_assert(offsetof(KuroSDKManager_GetBasicInfo, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetBasicInfo::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetChannelId
// 0x0004 (0x0004 - 0x0000)
struct KuroSDKManager_GetChannelId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetChannelId) == 0x000004, "Wrong alignment on KuroSDKManager_GetChannelId");
static_assert(sizeof(KuroSDKManager_GetChannelId) == 0x000004, "Wrong size on KuroSDKManager_GetChannelId");
static_assert(offsetof(KuroSDKManager_GetChannelId, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetChannelId::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetChannelName
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_GetChannelName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetChannelName) == 0x000008, "Wrong alignment on KuroSDKManager_GetChannelName");
static_assert(sizeof(KuroSDKManager_GetChannelName) == 0x000010, "Wrong size on KuroSDKManager_GetChannelName");
static_assert(offsetof(KuroSDKManager_GetChannelName, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetChannelName::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetCurrentLoginInfo
// 0x0058 (0x0058 - 0x0000)
struct KuroSDKManager_GetCurrentLoginInfo final
{
public:
	struct FLoginStruct                           ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetCurrentLoginInfo) == 0x000008, "Wrong alignment on KuroSDKManager_GetCurrentLoginInfo");
static_assert(sizeof(KuroSDKManager_GetCurrentLoginInfo) == 0x000058, "Wrong size on KuroSDKManager_GetCurrentLoginInfo");
static_assert(offsetof(KuroSDKManager_GetCurrentLoginInfo, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetCurrentLoginInfo::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetDeepLinkStr
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_GetDeepLinkStr final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetDeepLinkStr) == 0x000008, "Wrong alignment on KuroSDKManager_GetDeepLinkStr");
static_assert(sizeof(KuroSDKManager_GetDeepLinkStr) == 0x000010, "Wrong size on KuroSDKManager_GetDeepLinkStr");
static_assert(offsetof(KuroSDKManager_GetDeepLinkStr, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetDeepLinkStr::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetIsAgreeProtocol
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_GetIsAgreeProtocol final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetIsAgreeProtocol) == 0x000001, "Wrong alignment on KuroSDKManager_GetIsAgreeProtocol");
static_assert(sizeof(KuroSDKManager_GetIsAgreeProtocol) == 0x000001, "Wrong size on KuroSDKManager_GetIsAgreeProtocol");
static_assert(offsetof(KuroSDKManager_GetIsAgreeProtocol, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetIsAgreeProtocol::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetPackageId
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_GetPackageId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetPackageId) == 0x000008, "Wrong alignment on KuroSDKManager_GetPackageId");
static_assert(sizeof(KuroSDKManager_GetPackageId) == 0x000010, "Wrong size on KuroSDKManager_GetPackageId");
static_assert(offsetof(KuroSDKManager_GetPackageId, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetPackageId::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetPostWebViewInitState
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_GetPostWebViewInitState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetPostWebViewInitState) == 0x000001, "Wrong alignment on KuroSDKManager_GetPostWebViewInitState");
static_assert(sizeof(KuroSDKManager_GetPostWebViewInitState) == 0x000001, "Wrong size on KuroSDKManager_GetPostWebViewInitState");
static_assert(offsetof(KuroSDKManager_GetPostWebViewInitState, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetPostWebViewInitState::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetProjectId
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_GetProjectId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetProjectId) == 0x000008, "Wrong alignment on KuroSDKManager_GetProjectId");
static_assert(sizeof(KuroSDKManager_GetProjectId) == 0x000010, "Wrong size on KuroSDKManager_GetProjectId");
static_assert(offsetof(KuroSDKManager_GetProjectId, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetProjectId::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetSdkInitState
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_GetSdkInitState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetSdkInitState) == 0x000001, "Wrong alignment on KuroSDKManager_GetSdkInitState");
static_assert(sizeof(KuroSDKManager_GetSdkInitState) == 0x000001, "Wrong size on KuroSDKManager_GetSdkInitState");
static_assert(offsetof(KuroSDKManager_GetSdkInitState, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetSdkInitState::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetSdkIsQRScan
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_GetSdkIsQRScan final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetSdkIsQRScan) == 0x000001, "Wrong alignment on KuroSDKManager_GetSdkIsQRScan");
static_assert(sizeof(KuroSDKManager_GetSdkIsQRScan) == 0x000001, "Wrong size on KuroSDKManager_GetSdkIsQRScan");
static_assert(offsetof(KuroSDKManager_GetSdkIsQRScan, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetSdkIsQRScan::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetSdkIsShowQuitTips
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_GetSdkIsShowQuitTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetSdkIsShowQuitTips) == 0x000001, "Wrong alignment on KuroSDKManager_GetSdkIsShowQuitTips");
static_assert(sizeof(KuroSDKManager_GetSdkIsShowQuitTips) == 0x000001, "Wrong size on KuroSDKManager_GetSdkIsShowQuitTips");
static_assert(offsetof(KuroSDKManager_GetSdkIsShowQuitTips, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetSdkIsShowQuitTips::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetSdkLoginInfo
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_GetSdkLoginInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetSdkLoginInfo) == 0x000008, "Wrong alignment on KuroSDKManager_GetSdkLoginInfo");
static_assert(sizeof(KuroSDKManager_GetSdkLoginInfo) == 0x000010, "Wrong size on KuroSDKManager_GetSdkLoginInfo");
static_assert(offsetof(KuroSDKManager_GetSdkLoginInfo, ReturnValue) == 0x000000, "Member 'KuroSDKManager_GetSdkLoginInfo::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.GetSdkParams
// 0x0020 (0x0020 - 0x0000)
struct KuroSDKManager_GetSdkParams final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_GetSdkParams) == 0x000008, "Wrong alignment on KuroSDKManager_GetSdkParams");
static_assert(sizeof(KuroSDKManager_GetSdkParams) == 0x000020, "Wrong size on KuroSDKManager_GetSdkParams");
static_assert(offsetof(KuroSDKManager_GetSdkParams, Data) == 0x000000, "Member 'KuroSDKManager_GetSdkParams::Data' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_GetSdkParams, ReturnValue) == 0x000010, "Member 'KuroSDKManager_GetSdkParams::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.IsCustomerServiceEnable
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_IsCustomerServiceEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_IsCustomerServiceEnable) == 0x000001, "Wrong alignment on KuroSDKManager_IsCustomerServiceEnable");
static_assert(sizeof(KuroSDKManager_IsCustomerServiceEnable) == 0x000001, "Wrong size on KuroSDKManager_IsCustomerServiceEnable");
static_assert(offsetof(KuroSDKManager_IsCustomerServiceEnable, ReturnValue) == 0x000000, "Member 'KuroSDKManager_IsCustomerServiceEnable::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.IsLogin
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_IsLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_IsLogin) == 0x000001, "Wrong alignment on KuroSDKManager_IsLogin");
static_assert(sizeof(KuroSDKManager_IsLogin) == 0x000001, "Wrong size on KuroSDKManager_IsLogin");
static_assert(offsetof(KuroSDKManager_IsLogin, ReturnValue) == 0x000000, "Member 'KuroSDKManager_IsLogin::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.IsUserCenterEnable
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_IsUserCenterEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_IsUserCenterEnable) == 0x000001, "Wrong alignment on KuroSDKManager_IsUserCenterEnable");
static_assert(sizeof(KuroSDKManager_IsUserCenterEnable) == 0x000001, "Wrong size on KuroSDKManager_IsUserCenterEnable");
static_assert(offsetof(KuroSDKManager_IsUserCenterEnable, ReturnValue) == 0x000000, "Member 'KuroSDKManager_IsUserCenterEnable::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.KuroSDKEvent
// 0x0018 (0x0018 - 0x0000)
struct KuroSDKManager_KuroSDKEvent final
{
public:
	EUKuroSDKEventType                            IKuroSDKEvent;                                     // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2474[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SKuroSDKEventParameter;                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_KuroSDKEvent) == 0x000008, "Wrong alignment on KuroSDKManager_KuroSDKEvent");
static_assert(sizeof(KuroSDKManager_KuroSDKEvent) == 0x000018, "Wrong size on KuroSDKManager_KuroSDKEvent");
static_assert(offsetof(KuroSDKManager_KuroSDKEvent, IKuroSDKEvent) == 0x000000, "Member 'KuroSDKManager_KuroSDKEvent::IKuroSDKEvent' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_KuroSDKEvent, SKuroSDKEventParameter) == 0x000008, "Member 'KuroSDKManager_KuroSDKEvent::SKuroSDKEventParameter' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.LogMarketingEvent
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_LogMarketingEvent final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_LogMarketingEvent) == 0x000008, "Wrong alignment on KuroSDKManager_LogMarketingEvent");
static_assert(sizeof(KuroSDKManager_LogMarketingEvent) == 0x000010, "Wrong size on KuroSDKManager_LogMarketingEvent");
static_assert(offsetof(KuroSDKManager_LogMarketingEvent, Data) == 0x000000, "Member 'KuroSDKManager_LogMarketingEvent::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.OpenCustomerService
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_OpenCustomerService final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_OpenCustomerService) == 0x000008, "Wrong alignment on KuroSDKManager_OpenCustomerService");
static_assert(sizeof(KuroSDKManager_OpenCustomerService) == 0x000010, "Wrong size on KuroSDKManager_OpenCustomerService");
static_assert(offsetof(KuroSDKManager_OpenCustomerService, Data) == 0x000000, "Member 'KuroSDKManager_OpenCustomerService::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.OpenDefaultWebView
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_OpenDefaultWebView final
{
public:
	class FString                                 Url;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_OpenDefaultWebView) == 0x000008, "Wrong alignment on KuroSDKManager_OpenDefaultWebView");
static_assert(sizeof(KuroSDKManager_OpenDefaultWebView) == 0x000010, "Wrong size on KuroSDKManager_OpenDefaultWebView");
static_assert(offsetof(KuroSDKManager_OpenDefaultWebView, Url) == 0x000000, "Member 'KuroSDKManager_OpenDefaultWebView::Url' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.OpenWebView
// 0x0038 (0x0038 - 0x0000)
struct KuroSDKManager_OpenWebView final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLandscape;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Transparent;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WebAccelerated;                                    // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2475[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_OpenWebView) == 0x000008, "Wrong alignment on KuroSDKManager_OpenWebView");
static_assert(sizeof(KuroSDKManager_OpenWebView) == 0x000038, "Wrong size on KuroSDKManager_OpenWebView");
static_assert(offsetof(KuroSDKManager_OpenWebView, Title) == 0x000000, "Member 'KuroSDKManager_OpenWebView::Title' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_OpenWebView, Url) == 0x000010, "Member 'KuroSDKManager_OpenWebView::Url' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_OpenWebView, IsLandscape) == 0x000020, "Member 'KuroSDKManager_OpenWebView::IsLandscape' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_OpenWebView, Transparent) == 0x000021, "Member 'KuroSDKManager_OpenWebView::Transparent' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_OpenWebView, WebAccelerated) == 0x000022, "Member 'KuroSDKManager_OpenWebView::WebAccelerated' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_OpenWebView, Data) == 0x000028, "Member 'KuroSDKManager_OpenWebView::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.QueryProductInfo
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_QueryProductInfo final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_QueryProductInfo) == 0x000008, "Wrong alignment on KuroSDKManager_QueryProductInfo");
static_assert(sizeof(KuroSDKManager_QueryProductInfo) == 0x000010, "Wrong size on KuroSDKManager_QueryProductInfo");
static_assert(offsetof(KuroSDKManager_QueryProductInfo, Data) == 0x000000, "Member 'KuroSDKManager_QueryProductInfo::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.SetFont
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKManager_SetFont final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_SetFont) == 0x000008, "Wrong alignment on KuroSDKManager_SetFont");
static_assert(sizeof(KuroSDKManager_SetFont) == 0x000010, "Wrong size on KuroSDKManager_SetFont");
static_assert(offsetof(KuroSDKManager_SetFont, Data) == 0x000000, "Member 'KuroSDKManager_SetFont::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.SetIfGlobalSdk
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_SetIfGlobalSdk final
{
public:
	bool                                          IfGlobal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_SetIfGlobalSdk) == 0x000001, "Wrong alignment on KuroSDKManager_SetIfGlobalSdk");
static_assert(sizeof(KuroSDKManager_SetIfGlobalSdk) == 0x000001, "Wrong size on KuroSDKManager_SetIfGlobalSdk");
static_assert(offsetof(KuroSDKManager_SetIfGlobalSdk, IfGlobal) == 0x000000, "Member 'KuroSDKManager_SetIfGlobalSdk::IfGlobal' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.SetWindowsMode
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKManager_SetWindowsMode final
{
public:
	bool                                          Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_SetWindowsMode) == 0x000001, "Wrong alignment on KuroSDKManager_SetWindowsMode");
static_assert(sizeof(KuroSDKManager_SetWindowsMode) == 0x000001, "Wrong size on KuroSDKManager_SetWindowsMode");
static_assert(offsetof(KuroSDKManager_SetWindowsMode, Mode) == 0x000000, "Member 'KuroSDKManager_SetWindowsMode::Mode' has a wrong offset!");

// Function KuroSDK.KuroSDKManager.Share
// 0x0020 (0x0020 - 0x0000)
struct KuroSDKManager_Share final
{
public:
	TArray<uint8>                                 ImageData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 SKuroSDKEventParameter;                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKManager_Share) == 0x000008, "Wrong alignment on KuroSDKManager_Share");
static_assert(sizeof(KuroSDKManager_Share) == 0x000020, "Wrong size on KuroSDKManager_Share");
static_assert(offsetof(KuroSDKManager_Share, ImageData) == 0x000000, "Member 'KuroSDKManager_Share::ImageData' has a wrong offset!");
static_assert(offsetof(KuroSDKManager_Share, SKuroSDKEventParameter) == 0x000010, "Member 'KuroSDKManager_Share::SKuroSDKEventParameter' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.Get
// 0x0008 (0x0008 - 0x0000)
struct KuroSDKStaticLibrary_Get final
{
public:
	class UKuroSDKManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_Get) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_Get");
static_assert(sizeof(KuroSDKStaticLibrary_Get) == 0x000008, "Wrong size on KuroSDKStaticLibrary_Get");
static_assert(offsetof(KuroSDKStaticLibrary_Get, ReturnValue) == 0x000000, "Member 'KuroSDKStaticLibrary_Get::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.GetAdsValue
// 0x0020 (0x0020 - 0x0000)
struct KuroSDKStaticLibrary_GetAdsValue final
{
public:
	class FString                                 Income;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_GetAdsValue) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_GetAdsValue");
static_assert(sizeof(KuroSDKStaticLibrary_GetAdsValue) == 0x000020, "Wrong size on KuroSDKStaticLibrary_GetAdsValue");
static_assert(offsetof(KuroSDKStaticLibrary_GetAdsValue, Income) == 0x000000, "Member 'KuroSDKStaticLibrary_GetAdsValue::Income' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_GetAdsValue, Data) == 0x000010, "Member 'KuroSDKStaticLibrary_GetAdsValue::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.GetAndroidGalleryExternalFilePath
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKStaticLibrary_GetAndroidGalleryExternalFilePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_GetAndroidGalleryExternalFilePath) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_GetAndroidGalleryExternalFilePath");
static_assert(sizeof(KuroSDKStaticLibrary_GetAndroidGalleryExternalFilePath) == 0x000010, "Wrong size on KuroSDKStaticLibrary_GetAndroidGalleryExternalFilePath");
static_assert(offsetof(KuroSDKStaticLibrary_GetAndroidGalleryExternalFilePath, ReturnValue) == 0x000000, "Member 'KuroSDKStaticLibrary_GetAndroidGalleryExternalFilePath::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.GetCurrentLoginInfo
// 0x0058 (0x0058 - 0x0000)
struct KuroSDKStaticLibrary_GetCurrentLoginInfo final
{
public:
	struct FLoginStruct                           ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_GetCurrentLoginInfo) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_GetCurrentLoginInfo");
static_assert(sizeof(KuroSDKStaticLibrary_GetCurrentLoginInfo) == 0x000058, "Wrong size on KuroSDKStaticLibrary_GetCurrentLoginInfo");
static_assert(offsetof(KuroSDKStaticLibrary_GetCurrentLoginInfo, ReturnValue) == 0x000000, "Member 'KuroSDKStaticLibrary_GetCurrentLoginInfo::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.GetIsAgreeProtocol
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKStaticLibrary_GetIsAgreeProtocol final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_GetIsAgreeProtocol) == 0x000001, "Wrong alignment on KuroSDKStaticLibrary_GetIsAgreeProtocol");
static_assert(sizeof(KuroSDKStaticLibrary_GetIsAgreeProtocol) == 0x000001, "Wrong size on KuroSDKStaticLibrary_GetIsAgreeProtocol");
static_assert(offsetof(KuroSDKStaticLibrary_GetIsAgreeProtocol, ReturnValue) == 0x000000, "Member 'KuroSDKStaticLibrary_GetIsAgreeProtocol::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.GetPostWebViewInitState
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKStaticLibrary_GetPostWebViewInitState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_GetPostWebViewInitState) == 0x000001, "Wrong alignment on KuroSDKStaticLibrary_GetPostWebViewInitState");
static_assert(sizeof(KuroSDKStaticLibrary_GetPostWebViewInitState) == 0x000001, "Wrong size on KuroSDKStaticLibrary_GetPostWebViewInitState");
static_assert(offsetof(KuroSDKStaticLibrary_GetPostWebViewInitState, ReturnValue) == 0x000000, "Member 'KuroSDKStaticLibrary_GetPostWebViewInitState::ReturnValue' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.GetSdkParams
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKStaticLibrary_GetSdkParams final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_GetSdkParams) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_GetSdkParams");
static_assert(sizeof(KuroSDKStaticLibrary_GetSdkParams) == 0x000010, "Wrong size on KuroSDKStaticLibrary_GetSdkParams");
static_assert(offsetof(KuroSDKStaticLibrary_GetSdkParams, Data) == 0x000000, "Member 'KuroSDKStaticLibrary_GetSdkParams::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.KuroSDKEvent
// 0x0018 (0x0018 - 0x0000)
struct KuroSDKStaticLibrary_KuroSDKEvent final
{
public:
	EUKuroSDKEventType                            IKuroSDKEvent;                                     // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2476[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SKuroSDKEventParameter;                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_KuroSDKEvent) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_KuroSDKEvent");
static_assert(sizeof(KuroSDKStaticLibrary_KuroSDKEvent) == 0x000018, "Wrong size on KuroSDKStaticLibrary_KuroSDKEvent");
static_assert(offsetof(KuroSDKStaticLibrary_KuroSDKEvent, IKuroSDKEvent) == 0x000000, "Member 'KuroSDKStaticLibrary_KuroSDKEvent::IKuroSDKEvent' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_KuroSDKEvent, SKuroSDKEventParameter) == 0x000008, "Member 'KuroSDKStaticLibrary_KuroSDKEvent::SKuroSDKEventParameter' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.LogMarketingEvent
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKStaticLibrary_LogMarketingEvent final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_LogMarketingEvent) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_LogMarketingEvent");
static_assert(sizeof(KuroSDKStaticLibrary_LogMarketingEvent) == 0x000010, "Wrong size on KuroSDKStaticLibrary_LogMarketingEvent");
static_assert(offsetof(KuroSDKStaticLibrary_LogMarketingEvent, Data) == 0x000000, "Member 'KuroSDKStaticLibrary_LogMarketingEvent::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.OpenCustomerService
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKStaticLibrary_OpenCustomerService final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_OpenCustomerService) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_OpenCustomerService");
static_assert(sizeof(KuroSDKStaticLibrary_OpenCustomerService) == 0x000010, "Wrong size on KuroSDKStaticLibrary_OpenCustomerService");
static_assert(offsetof(KuroSDKStaticLibrary_OpenCustomerService, Data) == 0x000000, "Member 'KuroSDKStaticLibrary_OpenCustomerService::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.OpenDefaultWebView
// 0x0010 (0x0010 - 0x0000)
struct KuroSDKStaticLibrary_OpenDefaultWebView final
{
public:
	class FString                                 Url;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_OpenDefaultWebView) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_OpenDefaultWebView");
static_assert(sizeof(KuroSDKStaticLibrary_OpenDefaultWebView) == 0x000010, "Wrong size on KuroSDKStaticLibrary_OpenDefaultWebView");
static_assert(offsetof(KuroSDKStaticLibrary_OpenDefaultWebView, Url) == 0x000000, "Member 'KuroSDKStaticLibrary_OpenDefaultWebView::Url' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.OpenWebView
// 0x0038 (0x0038 - 0x0000)
struct KuroSDKStaticLibrary_OpenWebView final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLandScape;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Transparent;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WebAccelerated;                                    // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2477[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_OpenWebView) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_OpenWebView");
static_assert(sizeof(KuroSDKStaticLibrary_OpenWebView) == 0x000038, "Wrong size on KuroSDKStaticLibrary_OpenWebView");
static_assert(offsetof(KuroSDKStaticLibrary_OpenWebView, Title) == 0x000000, "Member 'KuroSDKStaticLibrary_OpenWebView::Title' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_OpenWebView, Url) == 0x000010, "Member 'KuroSDKStaticLibrary_OpenWebView::Url' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_OpenWebView, IsLandScape) == 0x000020, "Member 'KuroSDKStaticLibrary_OpenWebView::IsLandScape' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_OpenWebView, Transparent) == 0x000021, "Member 'KuroSDKStaticLibrary_OpenWebView::Transparent' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_OpenWebView, WebAccelerated) == 0x000022, "Member 'KuroSDKStaticLibrary_OpenWebView::WebAccelerated' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_OpenWebView, Data) == 0x000028, "Member 'KuroSDKStaticLibrary_OpenWebView::Data' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.SetIfGlobalSdk
// 0x0001 (0x0001 - 0x0000)
struct KuroSDKStaticLibrary_SetIfGlobalSdk final
{
public:
	bool                                          IfGlobal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_SetIfGlobalSdk) == 0x000001, "Wrong alignment on KuroSDKStaticLibrary_SetIfGlobalSdk");
static_assert(sizeof(KuroSDKStaticLibrary_SetIfGlobalSdk) == 0x000001, "Wrong size on KuroSDKStaticLibrary_SetIfGlobalSdk");
static_assert(offsetof(KuroSDKStaticLibrary_SetIfGlobalSdk, IfGlobal) == 0x000000, "Member 'KuroSDKStaticLibrary_SetIfGlobalSdk::IfGlobal' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.Share
// 0x0020 (0x0020 - 0x0000)
struct KuroSDKStaticLibrary_Share final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SKuroSDKEventParameter;                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_Share) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_Share");
static_assert(sizeof(KuroSDKStaticLibrary_Share) == 0x000020, "Wrong size on KuroSDKStaticLibrary_Share");
static_assert(offsetof(KuroSDKStaticLibrary_Share, ImagePath) == 0x000000, "Member 'KuroSDKStaticLibrary_Share::ImagePath' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_Share, SKuroSDKEventParameter) == 0x000010, "Member 'KuroSDKStaticLibrary_Share::SKuroSDKEventParameter' has a wrong offset!");

// Function KuroSDK.KuroSDKStaticLibrary.ShareTexture
// 0x0020 (0x0020 - 0x0000)
struct KuroSDKStaticLibrary_ShareTexture final
{
public:
	class FString                                 TexturePath;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SKuroSDKEventParameter;                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroSDKStaticLibrary_ShareTexture) == 0x000008, "Wrong alignment on KuroSDKStaticLibrary_ShareTexture");
static_assert(sizeof(KuroSDKStaticLibrary_ShareTexture) == 0x000020, "Wrong size on KuroSDKStaticLibrary_ShareTexture");
static_assert(offsetof(KuroSDKStaticLibrary_ShareTexture, TexturePath) == 0x000000, "Member 'KuroSDKStaticLibrary_ShareTexture::TexturePath' has a wrong offset!");
static_assert(offsetof(KuroSDKStaticLibrary_ShareTexture, SKuroSDKEventParameter) == 0x000010, "Member 'KuroSDKStaticLibrary_ShareTexture::SKuroSDKEventParameter' has a wrong offset!");

}

