#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroPointCloud

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "KuroPointCloud_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KuroPointCloud.KuroPointCloudActor
// 0x0088 (0x0330 - 0x02A8)
class AKuroPointCloudActor final : public AActor
{
public:
	class UInstancedStaticMeshComponent*          InstancedStaticMeshComponent;                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKuroPointCloudCache*                   PointCloudAsset;                                   // 0x02B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointNumToStopDivide;                              // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoxLengthToStopDivide;                             // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstanceScale;                                     // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180F[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroPointKdTree                       KdTree;                                            // 0x02C8(0x0058)(NativeAccessSpecifierPrivate)
	TArray<float>                                 CustomData;                                        // 0x0320(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void BuildKdTreeData();
	void ClearMark();
	void MarkPointsInBox(const struct FBox& BoxWS);
	void UpdateIsm();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroPointCloudActor">();
	}
	static class AKuroPointCloudActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKuroPointCloudActor>();
	}
};
static_assert(alignof(AKuroPointCloudActor) == 0x000008, "Wrong alignment on AKuroPointCloudActor");
static_assert(sizeof(AKuroPointCloudActor) == 0x000330, "Wrong size on AKuroPointCloudActor");
static_assert(offsetof(AKuroPointCloudActor, InstancedStaticMeshComponent) == 0x0002A8, "Member 'AKuroPointCloudActor::InstancedStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(AKuroPointCloudActor, PointCloudAsset) == 0x0002B0, "Member 'AKuroPointCloudActor::PointCloudAsset' has a wrong offset!");
static_assert(offsetof(AKuroPointCloudActor, PointNumToStopDivide) == 0x0002B8, "Member 'AKuroPointCloudActor::PointNumToStopDivide' has a wrong offset!");
static_assert(offsetof(AKuroPointCloudActor, BoxLengthToStopDivide) == 0x0002BC, "Member 'AKuroPointCloudActor::BoxLengthToStopDivide' has a wrong offset!");
static_assert(offsetof(AKuroPointCloudActor, InstanceScale) == 0x0002C0, "Member 'AKuroPointCloudActor::InstanceScale' has a wrong offset!");
static_assert(offsetof(AKuroPointCloudActor, KdTree) == 0x0002C8, "Member 'AKuroPointCloudActor::KdTree' has a wrong offset!");
static_assert(offsetof(AKuroPointCloudActor, CustomData) == 0x000320, "Member 'AKuroPointCloudActor::CustomData' has a wrong offset!");

// Class KuroPointCloud.KuroPointCloudCache
// 0x0040 (0x0070 - 0x0030)
class UKuroPointCloudCache final : public UObject
{
public:
	TArray<struct FVector>                        PositionCache;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          RotationCache;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ScaleCache;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IndexCache;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroPointCloudCache">();
	}
	static class UKuroPointCloudCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroPointCloudCache>();
	}
};
static_assert(alignof(UKuroPointCloudCache) == 0x000008, "Wrong alignment on UKuroPointCloudCache");
static_assert(sizeof(UKuroPointCloudCache) == 0x000070, "Wrong size on UKuroPointCloudCache");
static_assert(offsetof(UKuroPointCloudCache, PositionCache) == 0x000030, "Member 'UKuroPointCloudCache::PositionCache' has a wrong offset!");
static_assert(offsetof(UKuroPointCloudCache, RotationCache) == 0x000040, "Member 'UKuroPointCloudCache::RotationCache' has a wrong offset!");
static_assert(offsetof(UKuroPointCloudCache, ScaleCache) == 0x000050, "Member 'UKuroPointCloudCache::ScaleCache' has a wrong offset!");
static_assert(offsetof(UKuroPointCloudCache, IndexCache) == 0x000060, "Member 'UKuroPointCloudCache::IndexCache' has a wrong offset!");

}

