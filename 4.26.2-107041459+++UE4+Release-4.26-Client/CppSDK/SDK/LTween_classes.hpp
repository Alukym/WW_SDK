#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LTween

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "LTween_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class LTween.LTweenActor
// 0x0038 (0x02E0 - 0x02A8)
class ALTweenActor final : public AActor
{
public:
	TArray<class ULTweener*>                      TweenerList;                                       // 0x02A8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C1[0x28];                                    // 0x02B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ALTweenActor* GetLTweenInstance(class UObject* WorldContextObject);

	void CustomTick(float DeltaTime);
	void DisableTick();
	void EnableTick();
	void KillAllTweens(bool CallComplete);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenActor">();
	}
	static class ALTweenActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALTweenActor>();
	}
};
static_assert(alignof(ALTweenActor) == 0x000008, "Wrong alignment on ALTweenActor");
static_assert(sizeof(ALTweenActor) == 0x0002E0, "Wrong size on ALTweenActor");
static_assert(offsetof(ALTweenActor, TweenerList) == 0x0002A8, "Member 'ALTweenActor::TweenerList' has a wrong offset!");

// Class LTween.LTweenBPLibrary
// 0x0000 (0x0030 - 0x0030)
class ULTweenBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ArrayKillIfIsTweening(class UObject* WorldContextObject, const TArray<class ULTweener*>& InTweenerArray, bool CallComplete);
	static class ULTweener* ColorTo(class UObject* WorldContextObject, TDelegate<void(struct FColor& Value)> Setter, const struct FColor& StartValue, const struct FColor& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* DelayCall(class UObject* WorldContextObject, float DelayTime, TDelegate<void()> DelayComplete);
	static class ULTweener* DelayFrameCall(class UObject* WorldContextObject, int32 FrameCount, TDelegate<void()> DelayComplete);
	static class ULTweener* FloatTo(class UObject* WorldContextObject, TDelegate<void(float Value)> Setter, float StartValue, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* IntTo(class UObject* WorldContextObject, TDelegate<void(int32 Value)> Setter, int32 StartValue, int32 EndValue, float Duration, float Delay, ELTweenEase Ease);
	static bool IsTweening(class UObject* WorldContextObject, class ULTweener* InTweener);
	static void KillIfIsTweening(class UObject* WorldContextObject, class ULTweener* InTweener, bool CallComplete);
	static class ULTweener* LinearColorTo(class UObject* WorldContextObject, TDelegate<void(struct FLinearColor& Value)> Setter, const struct FLinearColor& StartValue, const struct FLinearColor& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionTo(class USceneComponent* Target, const struct FVector& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionTo_Sweep(class USceneComponent* Target, const struct FVector& EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionXTo(class USceneComponent* Target, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionXTo_Sweep(class USceneComponent* Target, float EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionYTo(class USceneComponent* Target, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionYTo_Sweep(class USceneComponent* Target, float EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionZTo(class USceneComponent* Target, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionZTo_Sweep(class USceneComponent* Target, float EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotateEulerAngleTo(class USceneComponent* Target, const struct FVector& EulerAngle, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotateEulerAngleTo_Sweep(class USceneComponent* Target, const struct FVector& EulerAngle, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotationQuaternionTo(class USceneComponent* Target, const struct FQuat& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotationQuaternionTo_Sweep(class USceneComponent* Target, const struct FQuat& EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotatorTo(class USceneComponent* Target, const struct FRotator& EndValue, bool ShortestPath, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotatorTo_Sweep(class USceneComponent* Target, const struct FRotator& EndValue, bool ShortestPath, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalScaleTo(class USceneComponent* Target, const struct FVector& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* MaterialScalarParameterTo(class UMaterialInstanceDynamic* Target, class FName ParameterName, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* MaterialVectorParameterTo(class UMaterialInstanceDynamic* Target, class FName ParameterName, const struct FLinearColor& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* MeshMaterialScalarParameterTo(class UMeshComponent* Target, int32 MaterialIndex, class FName ParameterName, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* MeshMaterialVectorParameterTo(class UMeshComponent* Target, int32 MaterialIndex, class FName ParameterName, const struct FLinearColor& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* QuaternionTo(class UObject* WorldContextObject, TDelegate<void(struct FQuat& Value)> Setter, const struct FQuat& StartValue, const struct FQuat& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static struct FLTweenDelegateHandleWrapper RegisterUpdateEvent(class UObject* WorldContextObject, const TDelegate<void(float InProgress)>& Update);
	static class ULTweener* RotatorTo(class UObject* WorldContextObject, TDelegate<void(struct FRotator& Value)> Setter, const struct FRotator& StartValue, const struct FRotator& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static void UnregisterUpdateEvent(class UObject* WorldContextObject, const struct FLTweenDelegateHandleWrapper& DelegateHandle);
	static class ULTweener* Vector2To(class UObject* WorldContextObject, TDelegate<void(struct FVector2D& Value)> Setter, const struct FVector2D& StartValue, const struct FVector2D& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* Vector3To(class UObject* WorldContextObject, TDelegate<void(struct FVector& Value)> Setter, const struct FVector& StartValue, const struct FVector& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* Vector4To(class UObject* WorldContextObject, TDelegate<void(struct FVector4& Value)> Setter, const struct FVector4& StartValue, const struct FVector4& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* VirtualCall(class UObject* WorldContextObject, float Duration, float Delay, TDelegate<void()> Start, TDelegate<void(float InProgress)> Update, TDelegate<void()> Complete);
	static class ULTweener* WorldPositionTo(class USceneComponent* Target, const struct FVector& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionTo_Sweep(class USceneComponent* Target, const struct FVector& EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionXTo(class USceneComponent* Target, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionXTo_Sweep(class USceneComponent* Target, float EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionYTo(class USceneComponent* Target, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionYTo_Sweep(class USceneComponent* Target, float EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionZTo(class USceneComponent* Target, float EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionZTo_Sweep(class USceneComponent* Target, float EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotateEulerAngleTo(class USceneComponent* Target, const struct FVector& EulerAngle, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotateEulerAngleTo_Sweep(class USceneComponent* Target, const struct FVector& EulerAngle, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotationQuaternionTo(class USceneComponent* Target, const struct FQuat& EndValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotationQuaternionTo_Sweep(class USceneComponent* Target, const struct FQuat& EndValue, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotatorTo(class USceneComponent* Target, const struct FRotator& EndValue, bool ShortestPath, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotatorTo_Sweep(class USceneComponent* Target, const struct FRotator& EndValue, bool ShortestPath, struct FHitResult* SweepHitResult, bool Sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenBPLibrary">();
	}
	static class ULTweenBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenBPLibrary>();
	}
};
static_assert(alignof(ULTweenBPLibrary) == 0x000008, "Wrong alignment on ULTweenBPLibrary");
static_assert(sizeof(ULTweenBPLibrary) == 0x000030, "Wrong size on ULTweenBPLibrary");

// Class LTween.LTweener
// 0x00C0 (0x00F0 - 0x0030)
class ULTweener : public UObject
{
public:
	uint8                                         Pad_140D[0x70];                                    // 0x0030(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnStartCallBack;                                   // 0x00A0(0x0014)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnUpdateCallBack;                                  // 0x00B4(0x0014)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnCompleteCallBack;                                // 0x00C8(0x0014)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_140E[0x14];                                    // 0x00DC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceComplete();
	int32 GetLoopCount();
	void Kill(bool CallComplete);
	class ULTweener* OnComplete(const TDelegate<void()>& NewComplete);
	class ULTweener* OnCycleComplete(const TDelegate<void()>& NewCycleComplete);
	class ULTweener* OnStart(const TDelegate<void()>& NewStart);
	class ULTweener* OnUpdate(const TDelegate<void(float InProgress)>& NewUpdate);
	void Pause();
	void Resume();
	class ULTweener* SetCurveFloat(class UCurveFloat* NewCurveFloat);
	class ULTweener* SetDelay(float NewDelay);
	class ULTweener* SetEase(ELTweenEase Easetype);
	class ULTweener* SetEaseCurve(class UCurveFloat* NewCurve);
	class ULTweener* SetLoop(ELTweenLoop NewLoopType, int32 NewLoopCount);
	class ULTweener* SetLoopType(ELTweenLoop NewLoopType);

	int32 GetLoopCycleCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweener">();
	}
	static class ULTweener* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweener>();
	}
};
static_assert(alignof(ULTweener) == 0x000008, "Wrong alignment on ULTweener");
static_assert(sizeof(ULTweener) == 0x0000F0, "Wrong size on ULTweener");
static_assert(offsetof(ULTweener, OnStartCallBack) == 0x0000A0, "Member 'ULTweener::OnStartCallBack' has a wrong offset!");
static_assert(offsetof(ULTweener, OnUpdateCallBack) == 0x0000B4, "Member 'ULTweener::OnUpdateCallBack' has a wrong offset!");
static_assert(offsetof(ULTweener, OnCompleteCallBack) == 0x0000C8, "Member 'ULTweener::OnCompleteCallBack' has a wrong offset!");

// Class LTween.LTweenerColor
// 0x0030 (0x0120 - 0x00F0)
class ULTweenerColor final : public ULTweener
{
public:
	uint8                                         Pad_1417[0x30];                                    // 0x00F0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerColor">();
	}
	static class ULTweenerColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerColor>();
	}
};
static_assert(alignof(ULTweenerColor) == 0x000008, "Wrong alignment on ULTweenerColor");
static_assert(sizeof(ULTweenerColor) == 0x000120, "Wrong size on ULTweenerColor");

// Class LTween.LTweenerFloat
// 0x0030 (0x0120 - 0x00F0)
class ULTweenerFloat final : public ULTweener
{
public:
	uint8                                         Pad_1418[0x30];                                    // 0x00F0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerFloat">();
	}
	static class ULTweenerFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerFloat>();
	}
};
static_assert(alignof(ULTweenerFloat) == 0x000008, "Wrong alignment on ULTweenerFloat");
static_assert(sizeof(ULTweenerFloat) == 0x000120, "Wrong size on ULTweenerFloat");

// Class LTween.LTweenerFrame
// 0x0008 (0x00F8 - 0x00F0)
class ULTweenerFrame final : public ULTweener
{
public:
	uint8                                         Pad_1419[0x8];                                     // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerFrame">();
	}
	static class ULTweenerFrame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerFrame>();
	}
};
static_assert(alignof(ULTweenerFrame) == 0x000008, "Wrong alignment on ULTweenerFrame");
static_assert(sizeof(ULTweenerFrame) == 0x0000F8, "Wrong size on ULTweenerFrame");

// Class LTween.LTweenerInteger
// 0x0030 (0x0120 - 0x00F0)
class ULTweenerInteger final : public ULTweener
{
public:
	uint8                                         Pad_141A[0x30];                                    // 0x00F0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerInteger">();
	}
	static class ULTweenerInteger* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerInteger>();
	}
};
static_assert(alignof(ULTweenerInteger) == 0x000008, "Wrong alignment on ULTweenerInteger");
static_assert(sizeof(ULTweenerInteger) == 0x000120, "Wrong size on ULTweenerInteger");

// Class LTween.LTweenerLinearColor
// 0x0048 (0x0138 - 0x00F0)
class ULTweenerLinearColor final : public ULTweener
{
public:
	uint8                                         Pad_141B[0x48];                                    // 0x00F0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerLinearColor">();
	}
	static class ULTweenerLinearColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerLinearColor>();
	}
};
static_assert(alignof(ULTweenerLinearColor) == 0x000008, "Wrong alignment on ULTweenerLinearColor");
static_assert(sizeof(ULTweenerLinearColor) == 0x000138, "Wrong size on ULTweenerLinearColor");

// Class LTween.LTweenerMaterialScalar
// 0x0030 (0x0120 - 0x00F0)
class ULTweenerMaterialScalar final : public ULTweener
{
public:
	uint8                                         Pad_141C[0x30];                                    // 0x00F0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerMaterialScalar">();
	}
	static class ULTweenerMaterialScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerMaterialScalar>();
	}
};
static_assert(alignof(ULTweenerMaterialScalar) == 0x000008, "Wrong alignment on ULTweenerMaterialScalar");
static_assert(sizeof(ULTweenerMaterialScalar) == 0x000120, "Wrong size on ULTweenerMaterialScalar");

// Class LTween.LTweenerMaterialVector
// 0x0050 (0x0140 - 0x00F0)
class ULTweenerMaterialVector final : public ULTweener
{
public:
	uint8                                         Pad_141D[0x50];                                    // 0x00F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerMaterialVector">();
	}
	static class ULTweenerMaterialVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerMaterialVector>();
	}
};
static_assert(alignof(ULTweenerMaterialVector) == 0x000008, "Wrong alignment on ULTweenerMaterialVector");
static_assert(sizeof(ULTweenerMaterialVector) == 0x000140, "Wrong size on ULTweenerMaterialVector");

// Class LTween.LTweenerPosition
// 0x0058 (0x0148 - 0x00F0)
class ULTweenerPosition final : public ULTweener
{
public:
	uint8                                         Pad_141E[0x58];                                    // 0x00F0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerPosition">();
	}
	static class ULTweenerPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerPosition>();
	}
};
static_assert(alignof(ULTweenerPosition) == 0x000008, "Wrong alignment on ULTweenerPosition");
static_assert(sizeof(ULTweenerPosition) == 0x000148, "Wrong size on ULTweenerPosition");

// Class LTween.LTweenerQuaternion
// 0x0050 (0x0140 - 0x00F0)
class ULTweenerQuaternion final : public ULTweener
{
public:
	uint8                                         Pad_141F[0x50];                                    // 0x00F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerQuaternion">();
	}
	static class ULTweenerQuaternion* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerQuaternion>();
	}
};
static_assert(alignof(ULTweenerQuaternion) == 0x000008, "Wrong alignment on ULTweenerQuaternion");
static_assert(sizeof(ULTweenerQuaternion) == 0x000140, "Wrong size on ULTweenerQuaternion");

// Class LTween.LTweenerRotationEuler
// 0x0060 (0x0150 - 0x00F0)
class ULTweenerRotationEuler final : public ULTweener
{
public:
	uint8                                         Pad_1420[0x60];                                    // 0x00F0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotationEuler">();
	}
	static class ULTweenerRotationEuler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotationEuler>();
	}
};
static_assert(alignof(ULTweenerRotationEuler) == 0x000008, "Wrong alignment on ULTweenerRotationEuler");
static_assert(sizeof(ULTweenerRotationEuler) == 0x000150, "Wrong size on ULTweenerRotationEuler");

// Class LTween.LTweenerRotationQuat
// 0x0070 (0x0160 - 0x00F0)
class ULTweenerRotationQuat final : public ULTweener
{
public:
	uint8                                         Pad_1421[0x70];                                    // 0x00F0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotationQuat">();
	}
	static class ULTweenerRotationQuat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotationQuat>();
	}
};
static_assert(alignof(ULTweenerRotationQuat) == 0x000008, "Wrong alignment on ULTweenerRotationQuat");
static_assert(sizeof(ULTweenerRotationQuat) == 0x000160, "Wrong size on ULTweenerRotationQuat");

// Class LTween.LTweenerRotator
// 0x0040 (0x0130 - 0x00F0)
class ULTweenerRotator final : public ULTweener
{
public:
	uint8                                         Pad_1422[0x40];                                    // 0x00F0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotator">();
	}
	static class ULTweenerRotator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotator>();
	}
};
static_assert(alignof(ULTweenerRotator) == 0x000008, "Wrong alignment on ULTweenerRotator");
static_assert(sizeof(ULTweenerRotator) == 0x000130, "Wrong size on ULTweenerRotator");

// Class LTween.LTweenerScale
// 0x0040 (0x0130 - 0x00F0)
class ULTweenerScale final : public ULTweener
{
public:
	uint8                                         Pad_1423[0x40];                                    // 0x00F0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerScale">();
	}
	static class ULTweenerScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerScale>();
	}
};
static_assert(alignof(ULTweenerScale) == 0x000008, "Wrong alignment on ULTweenerScale");
static_assert(sizeof(ULTweenerScale) == 0x000130, "Wrong size on ULTweenerScale");

// Class LTween.LTweenerVector
// 0x0040 (0x0130 - 0x00F0)
class ULTweenerVector final : public ULTweener
{
public:
	uint8                                         Pad_1424[0x40];                                    // 0x00F0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector">();
	}
	static class ULTweenerVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector>();
	}
};
static_assert(alignof(ULTweenerVector) == 0x000008, "Wrong alignment on ULTweenerVector");
static_assert(sizeof(ULTweenerVector) == 0x000130, "Wrong size on ULTweenerVector");

// Class LTween.LTweenerVector2D
// 0x0038 (0x0128 - 0x00F0)
class ULTweenerVector2D final : public ULTweener
{
public:
	uint8                                         Pad_1425[0x38];                                    // 0x00F0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector2D">();
	}
	static class ULTweenerVector2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector2D>();
	}
};
static_assert(alignof(ULTweenerVector2D) == 0x000008, "Wrong alignment on ULTweenerVector2D");
static_assert(sizeof(ULTweenerVector2D) == 0x000128, "Wrong size on ULTweenerVector2D");

// Class LTween.LTweenerVector4
// 0x0050 (0x0140 - 0x00F0)
class ULTweenerVector4 final : public ULTweener
{
public:
	uint8                                         Pad_1426[0x50];                                    // 0x00F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector4">();
	}
	static class ULTweenerVector4* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector4>();
	}
};
static_assert(alignof(ULTweenerVector4) == 0x000008, "Wrong alignment on ULTweenerVector4");
static_assert(sizeof(ULTweenerVector4) == 0x000140, "Wrong size on ULTweenerVector4");

// Class LTween.LTweenerVirtual
// 0x0000 (0x00F0 - 0x00F0)
class ULTweenerVirtual final : public ULTweener
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVirtual">();
	}
	static class ULTweenerVirtual* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVirtual>();
	}
};
static_assert(alignof(ULTweenerVirtual) == 0x000008, "Wrong alignment on ULTweenerVirtual");
static_assert(sizeof(ULTweenerVirtual) == 0x0000F0, "Wrong size on ULTweenerVirtual");

}

