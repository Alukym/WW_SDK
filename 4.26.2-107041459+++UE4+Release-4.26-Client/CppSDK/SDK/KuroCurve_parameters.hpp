#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroCurve

#include "Basic.hpp"

#include "KuroCurve_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function KuroCurve.KuroCurveLibrary.GetValue_Float
// 0x0098 (0x0098 - 0x0000)
struct KuroCurveLibrary_GetValue_Float final
{
public:
	struct FKuroCurveFloat                        CurveFloat;                                        // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0094(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroCurveLibrary_GetValue_Float) == 0x000008, "Wrong alignment on KuroCurveLibrary_GetValue_Float");
static_assert(sizeof(KuroCurveLibrary_GetValue_Float) == 0x000098, "Wrong size on KuroCurveLibrary_GetValue_Float");
static_assert(offsetof(KuroCurveLibrary_GetValue_Float, CurveFloat) == 0x000000, "Member 'KuroCurveLibrary_GetValue_Float::CurveFloat' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_GetValue_Float, Time) == 0x000090, "Member 'KuroCurveLibrary_GetValue_Float::Time' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_GetValue_Float, ReturnValue) == 0x000094, "Member 'KuroCurveLibrary_GetValue_Float::ReturnValue' has a wrong offset!");

// Function KuroCurve.KuroCurveLibrary.GetValue_LinearColor
// 0x0238 (0x0238 - 0x0000)
struct KuroCurveLibrary_GetValue_LinearColor final
{
public:
	struct FKuroCurveLinearColor                  CurveLinearColor;                                  // 0x0000(0x0220)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0220(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0224(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A69[0x4];                                     // 0x0234(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroCurveLibrary_GetValue_LinearColor) == 0x000008, "Wrong alignment on KuroCurveLibrary_GetValue_LinearColor");
static_assert(sizeof(KuroCurveLibrary_GetValue_LinearColor) == 0x000238, "Wrong size on KuroCurveLibrary_GetValue_LinearColor");
static_assert(offsetof(KuroCurveLibrary_GetValue_LinearColor, CurveLinearColor) == 0x000000, "Member 'KuroCurveLibrary_GetValue_LinearColor::CurveLinearColor' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_GetValue_LinearColor, Time) == 0x000220, "Member 'KuroCurveLibrary_GetValue_LinearColor::Time' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_GetValue_LinearColor, ReturnValue) == 0x000224, "Member 'KuroCurveLibrary_GetValue_LinearColor::ReturnValue' has a wrong offset!");

// Function KuroCurve.KuroCurveLibrary.GetValue_Vector
// 0x01B8 (0x01B8 - 0x0000)
struct KuroCurveLibrary_GetValue_Vector final
{
public:
	struct FKuroCurveVector                       CurveVector;                                       // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x01A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x01AC(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroCurveLibrary_GetValue_Vector) == 0x000008, "Wrong alignment on KuroCurveLibrary_GetValue_Vector");
static_assert(sizeof(KuroCurveLibrary_GetValue_Vector) == 0x0001B8, "Wrong size on KuroCurveLibrary_GetValue_Vector");
static_assert(offsetof(KuroCurveLibrary_GetValue_Vector, CurveVector) == 0x000000, "Member 'KuroCurveLibrary_GetValue_Vector::CurveVector' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_GetValue_Vector, Time) == 0x0001A8, "Member 'KuroCurveLibrary_GetValue_Vector::Time' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_GetValue_Vector, ReturnValue) == 0x0001AC, "Member 'KuroCurveLibrary_GetValue_Vector::ReturnValue' has a wrong offset!");

// Function KuroCurve.KuroCurveLibrary.GetValue_Vector2D
// 0x0130 (0x0130 - 0x0000)
struct KuroCurveLibrary_GetValue_Vector2D final
{
public:
	struct FKuroCurveVector2D                     CurveVector2D;                                     // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0124(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6A[0x4];                                     // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroCurveLibrary_GetValue_Vector2D) == 0x000008, "Wrong alignment on KuroCurveLibrary_GetValue_Vector2D");
static_assert(sizeof(KuroCurveLibrary_GetValue_Vector2D) == 0x000130, "Wrong size on KuroCurveLibrary_GetValue_Vector2D");
static_assert(offsetof(KuroCurveLibrary_GetValue_Vector2D, CurveVector2D) == 0x000000, "Member 'KuroCurveLibrary_GetValue_Vector2D::CurveVector2D' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_GetValue_Vector2D, Time) == 0x000120, "Member 'KuroCurveLibrary_GetValue_Vector2D::Time' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_GetValue_Vector2D, ReturnValue) == 0x000124, "Member 'KuroCurveLibrary_GetValue_Vector2D::ReturnValue' has a wrong offset!");

// Function KuroCurve.KuroCurveLibrary.UseCurve_Float
// 0x0098 (0x0098 - 0x0000)
struct KuroCurveLibrary_UseCurve_Float final
{
public:
	struct FKuroCurveFloat                        CurveFloat;                                        // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6B[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroCurveLibrary_UseCurve_Float) == 0x000008, "Wrong alignment on KuroCurveLibrary_UseCurve_Float");
static_assert(sizeof(KuroCurveLibrary_UseCurve_Float) == 0x000098, "Wrong size on KuroCurveLibrary_UseCurve_Float");
static_assert(offsetof(KuroCurveLibrary_UseCurve_Float, CurveFloat) == 0x000000, "Member 'KuroCurveLibrary_UseCurve_Float::CurveFloat' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_UseCurve_Float, ReturnValue) == 0x000090, "Member 'KuroCurveLibrary_UseCurve_Float::ReturnValue' has a wrong offset!");

// Function KuroCurve.KuroCurveLibrary.UseCurve_LinearColor
// 0x0228 (0x0228 - 0x0000)
struct KuroCurveLibrary_UseCurve_LinearColor final
{
public:
	struct FKuroCurveLinearColor                  CurveLinearColor;                                  // 0x0000(0x0220)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0220(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6C[0x7];                                     // 0x0221(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroCurveLibrary_UseCurve_LinearColor) == 0x000008, "Wrong alignment on KuroCurveLibrary_UseCurve_LinearColor");
static_assert(sizeof(KuroCurveLibrary_UseCurve_LinearColor) == 0x000228, "Wrong size on KuroCurveLibrary_UseCurve_LinearColor");
static_assert(offsetof(KuroCurveLibrary_UseCurve_LinearColor, CurveLinearColor) == 0x000000, "Member 'KuroCurveLibrary_UseCurve_LinearColor::CurveLinearColor' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_UseCurve_LinearColor, ReturnValue) == 0x000220, "Member 'KuroCurveLibrary_UseCurve_LinearColor::ReturnValue' has a wrong offset!");

// Function KuroCurve.KuroCurveLibrary.UseCurve_Vector
// 0x01B0 (0x01B0 - 0x0000)
struct KuroCurveLibrary_UseCurve_Vector final
{
public:
	struct FKuroCurveVector                       CurveVector;                                       // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6D[0x7];                                     // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroCurveLibrary_UseCurve_Vector) == 0x000008, "Wrong alignment on KuroCurveLibrary_UseCurve_Vector");
static_assert(sizeof(KuroCurveLibrary_UseCurve_Vector) == 0x0001B0, "Wrong size on KuroCurveLibrary_UseCurve_Vector");
static_assert(offsetof(KuroCurveLibrary_UseCurve_Vector, CurveVector) == 0x000000, "Member 'KuroCurveLibrary_UseCurve_Vector::CurveVector' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_UseCurve_Vector, ReturnValue) == 0x0001A8, "Member 'KuroCurveLibrary_UseCurve_Vector::ReturnValue' has a wrong offset!");

// Function KuroCurve.KuroCurveLibrary.UseCurve_Vector2D
// 0x0128 (0x0128 - 0x0000)
struct KuroCurveLibrary_UseCurve_Vector2D final
{
public:
	struct FKuroCurveVector2D                     CurveVector2D;                                     // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6E[0x7];                                     // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroCurveLibrary_UseCurve_Vector2D) == 0x000008, "Wrong alignment on KuroCurveLibrary_UseCurve_Vector2D");
static_assert(sizeof(KuroCurveLibrary_UseCurve_Vector2D) == 0x000128, "Wrong size on KuroCurveLibrary_UseCurve_Vector2D");
static_assert(offsetof(KuroCurveLibrary_UseCurve_Vector2D, CurveVector2D) == 0x000000, "Member 'KuroCurveLibrary_UseCurve_Vector2D::CurveVector2D' has a wrong offset!");
static_assert(offsetof(KuroCurveLibrary_UseCurve_Vector2D, ReturnValue) == 0x000120, "Member 'KuroCurveLibrary_UseCurve_Vector2D::ReturnValue' has a wrong offset!");

}

