#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapARPinInfoActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MagicLeapARPin_structs.hpp"
#include "MagicLeapARPin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MagicLeapARPinInfoActor.MagicLeapARPinInfoActor_C
// 0x0090 (0x0350 - 0x02C0)
class AMagicLeapARPinInfoActor_C final : public AMagicLeapARPinInfoActorBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Right;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Forward;                                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Up;                                                // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ValidRadiusVisualizer;                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AxisRoot;                                          // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VisualizerRoot;                                    // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TypeValue;                                         // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TransErrValue;                                     // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   RotErrValue;                                       // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   ConfidenceValue;                                   // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TransErrLabel;                                     // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   RotErrLabel;                                       // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   ConfidenceLabel;                                   // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   PinIDValue;                                        // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InfoRoot;                                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSmoothSpeed;                               // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MagicLeapARPinInfoActor(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnUpdateARPinState();
	void UserConstructionScript();
	void UpdatePinState();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MagicLeapARPinInfoActor_C">();
	}
	static class AMagicLeapARPinInfoActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMagicLeapARPinInfoActor_C>();
	}
};
static_assert(alignof(AMagicLeapARPinInfoActor_C) == 0x000008, "Wrong alignment on AMagicLeapARPinInfoActor_C");
static_assert(sizeof(AMagicLeapARPinInfoActor_C) == 0x000350, "Wrong size on AMagicLeapARPinInfoActor_C");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, UberGraphFrame) == 0x0002C0, "Member 'AMagicLeapARPinInfoActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, Right) == 0x0002C8, "Member 'AMagicLeapARPinInfoActor_C::Right' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, Forward) == 0x0002D0, "Member 'AMagicLeapARPinInfoActor_C::Forward' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, Up) == 0x0002D8, "Member 'AMagicLeapARPinInfoActor_C::Up' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, ValidRadiusVisualizer) == 0x0002E0, "Member 'AMagicLeapARPinInfoActor_C::ValidRadiusVisualizer' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, AxisRoot) == 0x0002E8, "Member 'AMagicLeapARPinInfoActor_C::AxisRoot' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, VisualizerRoot) == 0x0002F0, "Member 'AMagicLeapARPinInfoActor_C::VisualizerRoot' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, TypeValue) == 0x0002F8, "Member 'AMagicLeapARPinInfoActor_C::TypeValue' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, TransErrValue) == 0x000300, "Member 'AMagicLeapARPinInfoActor_C::TransErrValue' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, RotErrValue) == 0x000308, "Member 'AMagicLeapARPinInfoActor_C::RotErrValue' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, ConfidenceValue) == 0x000310, "Member 'AMagicLeapARPinInfoActor_C::ConfidenceValue' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, TransErrLabel) == 0x000318, "Member 'AMagicLeapARPinInfoActor_C::TransErrLabel' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, RotErrLabel) == 0x000320, "Member 'AMagicLeapARPinInfoActor_C::RotErrLabel' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, ConfidenceLabel) == 0x000328, "Member 'AMagicLeapARPinInfoActor_C::ConfidenceLabel' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, PinIDValue) == 0x000330, "Member 'AMagicLeapARPinInfoActor_C::PinIDValue' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, InfoRoot) == 0x000338, "Member 'AMagicLeapARPinInfoActor_C::InfoRoot' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, Root) == 0x000340, "Member 'AMagicLeapARPinInfoActor_C::Root' has a wrong offset!");
static_assert(offsetof(AMagicLeapARPinInfoActor_C, RotationSmoothSpeed) == 0x000348, "Member 'AMagicLeapARPinInfoActor_C::RotationSmoothSpeed' has a wrong offset!");

}

