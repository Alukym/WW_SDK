#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapHandTracking

#include "Basic.hpp"

#include "LiveLinkInterface_classes.hpp"
#include "MagicLeapHandTracking_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Class MagicLeapHandTracking.LiveLinkMagicLeapHandTrackingSourceFactory
// 0x0000 (0x0030 - 0x0030)
class ULiveLinkMagicLeapHandTrackingSourceFactory final : public ULiveLinkSourceFactory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkMagicLeapHandTrackingSourceFactory">();
	}
	static class ULiveLinkMagicLeapHandTrackingSourceFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkMagicLeapHandTrackingSourceFactory>();
	}
};
static_assert(alignof(ULiveLinkMagicLeapHandTrackingSourceFactory) == 0x000008, "Wrong alignment on ULiveLinkMagicLeapHandTrackingSourceFactory");
static_assert(sizeof(ULiveLinkMagicLeapHandTrackingSourceFactory) == 0x000030, "Wrong size on ULiveLinkMagicLeapHandTrackingSourceFactory");

// Class MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMagicLeapHandTrackingFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetConfiguration(TArray<EMagicLeapHandTrackingGesture>* ActiveStaticGestures, EMagicLeapHandTrackingKeypointFilterLevel* KeypointsFilterLevel, EMagicLeapHandTrackingGestureFilterLevel* GestureFilterLevel, bool* bTrackingEnabled);
	static bool GetCurrentGesture(EControllerHand Hand, EMagicLeapHandTrackingGesture* Gesture);
	static bool GetCurrentGestureConfidence(EControllerHand Hand, float* Confidence);
	static bool GetGestureKeypoints(EControllerHand Hand, TArray<struct FTransform>* Keypoints);
	static bool GetGestureKeypointTransform(EControllerHand Hand, EMagicLeapHandTrackingKeypoint Keypoint, EMagicLeapGestureTransformSpace TransformSpace, struct FTransform* Transform);
	static bool GetHandCenter(EControllerHand Hand, struct FTransform* HandCenter);
	static bool GetHandCenterNormalized(EControllerHand Hand, struct FVector* HandCenterNormalized);
	static bool GetHandIndexFingerTip(EControllerHand Hand, EMagicLeapGestureTransformSpace TransformSpace, struct FTransform* Pointer);
	static bool GetHandKeypointForMotionSource(class FName MotionSource, EMagicLeapHandTrackingKeypoint* OutKeyPoint);
	static bool GetHandThumbTip(EControllerHand Hand, EMagicLeapGestureTransformSpace TransformSpace, struct FTransform* Secondary);
	static bool GetMagicLeapHandTrackingLiveLinkSource(struct FLiveLinkSourceHandle* SourceHandle);
	static bool GetMotionSourceForHandKeypoint(EControllerHand Hand, EMagicLeapHandTrackingKeypoint Keypoint, class FName* OutMotionSource);
	static float GetStaticGestureConfidenceThreshold(EMagicLeapHandTrackingGesture Gesture);
	static bool IsHoldingControl(EControllerHand Hand);
	static bool SetConfiguration(const TArray<EMagicLeapHandTrackingGesture>& StaticGesturesToActivate, EMagicLeapHandTrackingKeypointFilterLevel KeypointsFilterLevel, EMagicLeapHandTrackingGestureFilterLevel GestureFilterLevel, bool bTrackingEnabled);
	static void SetStaticGestureConfidenceThreshold(EMagicLeapHandTrackingGesture Gesture, float Confidence);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MagicLeapHandTrackingFunctionLibrary">();
	}
	static class UMagicLeapHandTrackingFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMagicLeapHandTrackingFunctionLibrary>();
	}
};
static_assert(alignof(UMagicLeapHandTrackingFunctionLibrary) == 0x000008, "Wrong alignment on UMagicLeapHandTrackingFunctionLibrary");
static_assert(sizeof(UMagicLeapHandTrackingFunctionLibrary) == 0x000030, "Wrong size on UMagicLeapHandTrackingFunctionLibrary");

}

