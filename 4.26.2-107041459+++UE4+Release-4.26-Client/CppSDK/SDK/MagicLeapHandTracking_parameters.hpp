#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapHandTracking

#include "Basic.hpp"

#include "MagicLeapHandTracking_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "LiveLinkInterface_structs.hpp"


namespace SDK::Params
{

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetConfiguration
// 0x0018 (0x0018 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetConfiguration final
{
public:
	TArray<EMagicLeapHandTrackingGesture>         ActiveStaticGestures;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EMagicLeapHandTrackingKeypointFilterLevel     KeypointsFilterLevel;                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapHandTrackingGestureFilterLevel      GestureFilterLevel;                                // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackingEnabled;                                  // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2409[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetConfiguration) == 0x000008, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetConfiguration");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetConfiguration) == 0x000018, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetConfiguration");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetConfiguration, ActiveStaticGestures) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetConfiguration::ActiveStaticGestures' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetConfiguration, KeypointsFilterLevel) == 0x000010, "Member 'MagicLeapHandTrackingFunctionLibrary_GetConfiguration::KeypointsFilterLevel' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetConfiguration, GestureFilterLevel) == 0x000011, "Member 'MagicLeapHandTrackingFunctionLibrary_GetConfiguration::GestureFilterLevel' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetConfiguration, bTrackingEnabled) == 0x000012, "Member 'MagicLeapHandTrackingFunctionLibrary_GetConfiguration::bTrackingEnabled' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetConfiguration, ReturnValue) == 0x000013, "Member 'MagicLeapHandTrackingFunctionLibrary_GetConfiguration::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetCurrentGesture
// 0x0003 (0x0003 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapHandTrackingGesture                 Gesture;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture) == 0x000001, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture) == 0x000003, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture, Gesture) == 0x000001, "Member 'MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture::Gesture' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture, ReturnValue) == 0x000002, "Member 'MagicLeapHandTrackingFunctionLibrary_GetCurrentGesture::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetCurrentGestureConfidence
// 0x000C (0x000C - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Confidence;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240B[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence) == 0x000004, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence) == 0x00000C, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence, Confidence) == 0x000004, "Member 'MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence::Confidence' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence, ReturnValue) == 0x000008, "Member 'MagicLeapHandTrackingFunctionLibrary_GetCurrentGestureConfidence::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetGestureKeypoints
// 0x0020 (0x0020 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Keypoints;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240D[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints) == 0x000008, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints) == 0x000020, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints, Keypoints) == 0x000008, "Member 'MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints::Keypoints' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints, ReturnValue) == 0x000018, "Member 'MagicLeapHandTrackingFunctionLibrary_GetGestureKeypoints::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetGestureKeypointTransform
// 0x0050 (0x0050 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapHandTrackingKeypoint                Keypoint;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapGestureTransformSpace               TransformSpace;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240E[0xD];                                     // 0x0003(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240F[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform) == 0x000010, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform) == 0x000050, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform, Keypoint) == 0x000001, "Member 'MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform::Keypoint' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform, TransformSpace) == 0x000002, "Member 'MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform::TransformSpace' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform, Transform) == 0x000010, "Member 'MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform::Transform' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform, ReturnValue) == 0x000040, "Member 'MagicLeapHandTrackingFunctionLibrary_GetGestureKeypointTransform::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetHandCenter
// 0x0050 (0x0050 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetHandCenter final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2410[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HandCenter;                                        // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2411[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetHandCenter) == 0x000010, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetHandCenter");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetHandCenter) == 0x000050, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetHandCenter");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandCenter, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandCenter::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandCenter, HandCenter) == 0x000010, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandCenter::HandCenter' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandCenter, ReturnValue) == 0x000040, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandCenter::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetHandCenterNormalized
// 0x0014 (0x0014 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2412[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HandCenterNormalized;                              // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2413[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized) == 0x000004, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized) == 0x000014, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized, HandCenterNormalized) == 0x000004, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized::HandCenterNormalized' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized, ReturnValue) == 0x000010, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandCenterNormalized::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetHandIndexFingerTip
// 0x0050 (0x0050 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapGestureTransformSpace               TransformSpace;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2414[0xE];                                     // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Pointer;                                           // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2415[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip) == 0x000010, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip) == 0x000050, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip, TransformSpace) == 0x000001, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip::TransformSpace' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip, Pointer) == 0x000010, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip::Pointer' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip, ReturnValue) == 0x000040, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandIndexFingerTip::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetHandKeypointForMotionSource
// 0x0010 (0x0010 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource final
{
public:
	class FName                                   MotionSource;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapHandTrackingKeypoint                OutKeyPoint;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2416[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource) == 0x000004, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource) == 0x000010, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource, MotionSource) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource::MotionSource' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource, OutKeyPoint) == 0x00000C, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource::OutKeyPoint' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource, ReturnValue) == 0x00000D, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandKeypointForMotionSource::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetHandThumbTip
// 0x0050 (0x0050 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapGestureTransformSpace               TransformSpace;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2417[0xE];                                     // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Secondary;                                         // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2418[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip) == 0x000010, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip) == 0x000050, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip, TransformSpace) == 0x000001, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip::TransformSpace' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip, Secondary) == 0x000010, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip::Secondary' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip, ReturnValue) == 0x000040, "Member 'MagicLeapHandTrackingFunctionLibrary_GetHandThumbTip::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetMagicLeapHandTrackingLiveLinkSource
// 0x0020 (0x0020 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource final
{
public:
	struct FLiveLinkSourceHandle                  SourceHandle;                                      // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2419[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource) == 0x000008, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource) == 0x000020, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource, SourceHandle) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource::SourceHandle' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource, ReturnValue) == 0x000018, "Member 'MagicLeapHandTrackingFunctionLibrary_GetMagicLeapHandTrackingLiveLinkSource::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetMotionSourceForHandKeypoint
// 0x0014 (0x0014 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapHandTrackingKeypoint                Keypoint;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OutMotionSource;                                   // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241B[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint) == 0x000004, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint) == 0x000014, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint, Keypoint) == 0x000001, "Member 'MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint::Keypoint' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint, OutMotionSource) == 0x000004, "Member 'MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint::OutMotionSource' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint, ReturnValue) == 0x000010, "Member 'MagicLeapHandTrackingFunctionLibrary_GetMotionSourceForHandKeypoint::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.GetStaticGestureConfidenceThreshold
// 0x0008 (0x0008 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold final
{
public:
	EMagicLeapHandTrackingGesture                 Gesture;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold) == 0x000004, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold) == 0x000008, "Wrong size on MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold, Gesture) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold::Gesture' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold, ReturnValue) == 0x000004, "Member 'MagicLeapHandTrackingFunctionLibrary_GetStaticGestureConfidenceThreshold::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.IsHoldingControl
// 0x0002 (0x0002 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_IsHoldingControl final
{
public:
	EControllerHand                               Hand;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_IsHoldingControl) == 0x000001, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_IsHoldingControl");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_IsHoldingControl) == 0x000002, "Wrong size on MagicLeapHandTrackingFunctionLibrary_IsHoldingControl");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_IsHoldingControl, Hand) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_IsHoldingControl::Hand' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_IsHoldingControl, ReturnValue) == 0x000001, "Member 'MagicLeapHandTrackingFunctionLibrary_IsHoldingControl::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.SetConfiguration
// 0x0018 (0x0018 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_SetConfiguration final
{
public:
	TArray<EMagicLeapHandTrackingGesture>         StaticGesturesToActivate;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EMagicLeapHandTrackingKeypointFilterLevel     KeypointsFilterLevel;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapHandTrackingGestureFilterLevel      GestureFilterLevel;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackingEnabled;                                  // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_SetConfiguration) == 0x000008, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_SetConfiguration");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_SetConfiguration) == 0x000018, "Wrong size on MagicLeapHandTrackingFunctionLibrary_SetConfiguration");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_SetConfiguration, StaticGesturesToActivate) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_SetConfiguration::StaticGesturesToActivate' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_SetConfiguration, KeypointsFilterLevel) == 0x000010, "Member 'MagicLeapHandTrackingFunctionLibrary_SetConfiguration::KeypointsFilterLevel' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_SetConfiguration, GestureFilterLevel) == 0x000011, "Member 'MagicLeapHandTrackingFunctionLibrary_SetConfiguration::GestureFilterLevel' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_SetConfiguration, bTrackingEnabled) == 0x000012, "Member 'MagicLeapHandTrackingFunctionLibrary_SetConfiguration::bTrackingEnabled' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_SetConfiguration, ReturnValue) == 0x000013, "Member 'MagicLeapHandTrackingFunctionLibrary_SetConfiguration::ReturnValue' has a wrong offset!");

// Function MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.SetStaticGestureConfidenceThreshold
// 0x0008 (0x0008 - 0x0000)
struct MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold final
{
public:
	EMagicLeapHandTrackingGesture                 Gesture;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Confidence;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold) == 0x000004, "Wrong alignment on MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold");
static_assert(sizeof(MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold) == 0x000008, "Wrong size on MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold, Gesture) == 0x000000, "Member 'MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold::Gesture' has a wrong offset!");
static_assert(offsetof(MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold, Confidence) == 0x000004, "Member 'MagicLeapHandTrackingFunctionLibrary_SetStaticGestureConfidenceThreshold::Confidence' has a wrong offset!");

}

