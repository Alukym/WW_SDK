#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroHotPatch

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KuroHotPatch.DownloaderProxy
// 0x0070 (0x00A0 - 0x0030)
class UDownloaderProxy final : public UObject
{
public:
	uint8                                         Pad_1CF2[0x70];                                    // 0x0030(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cancel();
	int64 GetContentLength();
	int64 GetReceivedSize();
	int64 GetSavedSize();
	float GetTotalDownloadTime();
	bool HasComplete();
	void SetCompleteCallback(TDelegate<void(uint8 DownloadState, int32 HttpState)> InCb);
	void SetProgressCallback(TDelegate<void(int64 ThisTimeReceiveSize, int64 ReceivedSize, int64 SavedSize)> InCb);
	void Start(const class FString& Url, const class FString& SavePath, const class FString& Suffix, const int64 InFileSize, const float InLimitTime, const bool bForceNew, const bool InCache, const class FString& Sha1, const float InTimeout);
	void UnbindCallback();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DownloaderProxy">();
	}
	static class UDownloaderProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDownloaderProxy>();
	}
};
static_assert(alignof(UDownloaderProxy) == 0x000008, "Wrong alignment on UDownloaderProxy");
static_assert(sizeof(UDownloaderProxy) == 0x0000A0, "Wrong size on UDownloaderProxy");

// Class KuroHotPatch.KuroAppSetting
// 0x0058 (0x0088 - 0x0030)
class UKuroAppSetting final : public UObject
{
public:
	class FString                                 AppVersion;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppBuildNum;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppReleaseType;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InternalUse;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParallelApp;                                       // 0x0070(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalPackaging;                                   // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedHotPatch;                                     // 0x0081(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF5[0x6];                                     // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroAppSetting">();
	}
	static class UKuroAppSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroAppSetting>();
	}
};
static_assert(alignof(UKuroAppSetting) == 0x000008, "Wrong alignment on UKuroAppSetting");
static_assert(sizeof(UKuroAppSetting) == 0x000088, "Wrong size on UKuroAppSetting");
static_assert(offsetof(UKuroAppSetting, AppVersion) == 0x000030, "Member 'UKuroAppSetting::AppVersion' has a wrong offset!");
static_assert(offsetof(UKuroAppSetting, AppBuildNum) == 0x000040, "Member 'UKuroAppSetting::AppBuildNum' has a wrong offset!");
static_assert(offsetof(UKuroAppSetting, AppReleaseType) == 0x000050, "Member 'UKuroAppSetting::AppReleaseType' has a wrong offset!");
static_assert(offsetof(UKuroAppSetting, InternalUse) == 0x000060, "Member 'UKuroAppSetting::InternalUse' has a wrong offset!");
static_assert(offsetof(UKuroAppSetting, ParallelApp) == 0x000070, "Member 'UKuroAppSetting::ParallelApp' has a wrong offset!");
static_assert(offsetof(UKuroAppSetting, bLocalPackaging) == 0x000080, "Member 'UKuroAppSetting::bLocalPackaging' has a wrong offset!");
static_assert(offsetof(UKuroAppSetting, bNeedHotPatch) == 0x000081, "Member 'UKuroAppSetting::bNeedHotPatch' has a wrong offset!");

// Class KuroHotPatch.KuroConfigPatcher
// 0x0000 (0x0030 - 0x0030)
class UKuroConfigPatcher final : public UBlueprintFunctionLibrary
{
public:
	static void UpdateConfigs(const class FString& ConfigListPath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroConfigPatcher">();
	}
	static class UKuroConfigPatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroConfigPatcher>();
	}
};
static_assert(alignof(UKuroConfigPatcher) == 0x000008, "Wrong alignment on UKuroConfigPatcher");
static_assert(sizeof(UKuroConfigPatcher) == 0x000030, "Wrong size on UKuroConfigPatcher");

// Class KuroHotPatch.KuroLauncherLibrary
// 0x0050 (0x0080 - 0x0030)
class UKuroLauncherLibrary final : public UBlueprintFunctionLibrary
{
public:
	TSet<class UObject*>                          PreloadBp;                                         // 0x0030(0x0050)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)

public:
	static void AddPatchAssetsContent(const class FString& Content);
	static bool CheckFileSha1(const class FString& FilePath, const class FString& CheckSha1Hash);
	static void CheckRemainedPackagesInMemory();
	static void CloseShaderLibrary();
	static bool Decrypt(const class FString& InCipher, class FString* OutPlain);
	static bool DeleteDirectory(const class FString& DirPath);
	static bool DeleteFile(const class FString& FilePath);
	static bool DoesDiskHaveEnoughSpace(const class FString& CheckPath, const int64 CheckSize);
	static bool Encrypt(const class FString& InPlain, class FString* OutCipher);
	static class FString GetAppChangeList();
	static class FString GetAppInternalUseType();
	static class FString GetAppParallel();
	static class FString GetAppReleaseType();
	static class FString GetAppVersion();
	static bool GetConfig(const class FString& Key, const class FString& DefaultValue, class FString* OutStr);
	static int64 GetFileSize(const class FString& FilePath);
	static bool GetGConfigString(const class FString& Section, const class FString& Key, class FString* OutStr);
	static uint8 GetNetworkConnectionType();
	static class FString GetPlatform();
	static int32 GetRemainPrecompileShaders();
	static int32 GetTotalPrecompileShaders();
	static bool IsFirstIntoLauncher();
	static bool IsLocalPackaging();
	static void LogoutToLauncher();
	static bool MakeDirectory(const class FString& DirPath);
	static bool MoveFile(const class FString& DstPath, const class FString& SrcPath);
	static bool NeedHotPatch();
	static uint8 NeedRestartApp();
	static void PreloadRequiredBp();
	static void ReloadShaderLibrary();
	static void ResetLauncher();
	static void RestartApplication(const class FString& ScriptContent);
	static void ResumeCompileShader();
	static void SetPrecompileShaderBatchMode(int32 Mode);
	static void SetPrintRemainObjectRefChain(bool InValue);
	static void SetRestartApp(uint8 RestartType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroLauncherLibrary">();
	}
	static class UKuroLauncherLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroLauncherLibrary>();
	}
};
static_assert(alignof(UKuroLauncherLibrary) == 0x000008, "Wrong alignment on UKuroLauncherLibrary");
static_assert(sizeof(UKuroLauncherLibrary) == 0x000080, "Wrong size on UKuroLauncherLibrary");
static_assert(offsetof(UKuroLauncherLibrary, PreloadBp) == 0x000030, "Member 'UKuroLauncherLibrary::PreloadBp' has a wrong offset!");

// Class KuroHotPatch.KuroPakMountStatic
// 0x0000 (0x0030 - 0x0030)
class UKuroPakMountStatic final : public UBlueprintFunctionLibrary
{
public:
	static void MountFromManifest(const class FString& Path);
	static void MountGamePaks();
	static void MountMultiLangPaks();
	static void MountPak(const class FString& Path, int32 Order);
	static void MountStartupPaks();
	static void Save(const class FString& Path);
	static void UnmountAllPaks();
	static void UnmountFromManifest(const class FString& Path);
	static void UnmountPak(const class FString& Path);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroPakMountStatic">();
	}
	static class UKuroPakMountStatic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroPakMountStatic>();
	}
};
static_assert(alignof(UKuroPakMountStatic) == 0x000008, "Wrong alignment on UKuroPakMountStatic");
static_assert(sizeof(UKuroPakMountStatic) == 0x000030, "Wrong size on UKuroPakMountStatic");

}

