#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StreamlineBlueprint

#include "Basic.hpp"

#include "StreamlineBlueprint_structs.hpp"


namespace SDK::Params
{

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.GetDefaultDLSSGMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryDLSSG_GetDefaultDLSSGMode final
{
public:
	EUStreamlineDLSSGMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_GetDefaultDLSSGMode) == 0x000001, "Wrong alignment on StreamlineLibraryDLSSG_GetDefaultDLSSGMode");
static_assert(sizeof(StreamlineLibraryDLSSG_GetDefaultDLSSGMode) == 0x000001, "Wrong size on StreamlineLibraryDLSSG_GetDefaultDLSSGMode");
static_assert(offsetof(StreamlineLibraryDLSSG_GetDefaultDLSSGMode, ReturnValue) == 0x000000, "Member 'StreamlineLibraryDLSSG_GetDefaultDLSSGMode::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.GetDLSSGFrames
// 0x0004 (0x0004 - 0x0000)
struct StreamlineLibraryDLSSG_GetDLSSGFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_GetDLSSGFrames) == 0x000004, "Wrong alignment on StreamlineLibraryDLSSG_GetDLSSGFrames");
static_assert(sizeof(StreamlineLibraryDLSSG_GetDLSSGFrames) == 0x000004, "Wrong size on StreamlineLibraryDLSSG_GetDLSSGFrames");
static_assert(offsetof(StreamlineLibraryDLSSG_GetDLSSGFrames, ReturnValue) == 0x000000, "Member 'StreamlineLibraryDLSSG_GetDLSSGFrames::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.GetDLSSGMinimumDriverVersion
// 0x0008 (0x0008 - 0x0000)
struct StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion final
{
public:
	int32                                         MinDriverVersionMajor;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDriverVersionMinor;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion) == 0x000004, "Wrong alignment on StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion");
static_assert(sizeof(StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion) == 0x000008, "Wrong size on StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion");
static_assert(offsetof(StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion, MinDriverVersionMajor) == 0x000000, "Member 'StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion::MinDriverVersionMajor' has a wrong offset!");
static_assert(offsetof(StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion, MinDriverVersionMinor) == 0x000004, "Member 'StreamlineLibraryDLSSG_GetDLSSGMinimumDriverVersion::MinDriverVersionMinor' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.GetDLSSGMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryDLSSG_GetDLSSGMode final
{
public:
	EUStreamlineDLSSGMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_GetDLSSGMode) == 0x000001, "Wrong alignment on StreamlineLibraryDLSSG_GetDLSSGMode");
static_assert(sizeof(StreamlineLibraryDLSSG_GetDLSSGMode) == 0x000001, "Wrong size on StreamlineLibraryDLSSG_GetDLSSGMode");
static_assert(offsetof(StreamlineLibraryDLSSG_GetDLSSGMode, ReturnValue) == 0x000000, "Member 'StreamlineLibraryDLSSG_GetDLSSGMode::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.GetDLSSGSupportedFramesRange
// 0x0008 (0x0008 - 0x0000)
struct StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange final
{
public:
	int32                                         MinFrames;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFrames;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange) == 0x000004, "Wrong alignment on StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange");
static_assert(sizeof(StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange) == 0x000008, "Wrong size on StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange");
static_assert(offsetof(StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange, MinFrames) == 0x000000, "Member 'StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange::MinFrames' has a wrong offset!");
static_assert(offsetof(StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange, MaxFrames) == 0x000004, "Member 'StreamlineLibraryDLSSG_GetDLSSGSupportedFramesRange::MaxFrames' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.GetSupportedDLSSGModes
// 0x0010 (0x0010 - 0x0000)
struct StreamlineLibraryDLSSG_GetSupportedDLSSGModes final
{
public:
	TArray<EUStreamlineDLSSGMode>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_GetSupportedDLSSGModes) == 0x000008, "Wrong alignment on StreamlineLibraryDLSSG_GetSupportedDLSSGModes");
static_assert(sizeof(StreamlineLibraryDLSSG_GetSupportedDLSSGModes) == 0x000010, "Wrong size on StreamlineLibraryDLSSG_GetSupportedDLSSGModes");
static_assert(offsetof(StreamlineLibraryDLSSG_GetSupportedDLSSGModes, ReturnValue) == 0x000000, "Member 'StreamlineLibraryDLSSG_GetSupportedDLSSGModes::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.IsDLSSGModeSupported
// 0x0002 (0x0002 - 0x0000)
struct StreamlineLibraryDLSSG_IsDLSSGModeSupported final
{
public:
	EUStreamlineDLSSGMode                         DLSSGMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_IsDLSSGModeSupported) == 0x000001, "Wrong alignment on StreamlineLibraryDLSSG_IsDLSSGModeSupported");
static_assert(sizeof(StreamlineLibraryDLSSG_IsDLSSGModeSupported) == 0x000002, "Wrong size on StreamlineLibraryDLSSG_IsDLSSGModeSupported");
static_assert(offsetof(StreamlineLibraryDLSSG_IsDLSSGModeSupported, DLSSGMode) == 0x000000, "Member 'StreamlineLibraryDLSSG_IsDLSSGModeSupported::DLSSGMode' has a wrong offset!");
static_assert(offsetof(StreamlineLibraryDLSSG_IsDLSSGModeSupported, ReturnValue) == 0x000001, "Member 'StreamlineLibraryDLSSG_IsDLSSGModeSupported::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.IsDLSSGSupported
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryDLSSG_IsDLSSGSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_IsDLSSGSupported) == 0x000001, "Wrong alignment on StreamlineLibraryDLSSG_IsDLSSGSupported");
static_assert(sizeof(StreamlineLibraryDLSSG_IsDLSSGSupported) == 0x000001, "Wrong size on StreamlineLibraryDLSSG_IsDLSSGSupported");
static_assert(offsetof(StreamlineLibraryDLSSG_IsDLSSGSupported, ReturnValue) == 0x000000, "Member 'StreamlineLibraryDLSSG_IsDLSSGSupported::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.QueryDLSSGSupport
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryDLSSG_QueryDLSSGSupport final
{
public:
	EUStreamlineDLSSGSupport                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_QueryDLSSGSupport) == 0x000001, "Wrong alignment on StreamlineLibraryDLSSG_QueryDLSSGSupport");
static_assert(sizeof(StreamlineLibraryDLSSG_QueryDLSSGSupport) == 0x000001, "Wrong size on StreamlineLibraryDLSSG_QueryDLSSGSupport");
static_assert(offsetof(StreamlineLibraryDLSSG_QueryDLSSGSupport, ReturnValue) == 0x000000, "Member 'StreamlineLibraryDLSSG_QueryDLSSGSupport::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.SetDLSSGFrames
// 0x0004 (0x0004 - 0x0000)
struct StreamlineLibraryDLSSG_SetDLSSGFrames final
{
public:
	int32                                         Frames;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_SetDLSSGFrames) == 0x000004, "Wrong alignment on StreamlineLibraryDLSSG_SetDLSSGFrames");
static_assert(sizeof(StreamlineLibraryDLSSG_SetDLSSGFrames) == 0x000004, "Wrong size on StreamlineLibraryDLSSG_SetDLSSGFrames");
static_assert(offsetof(StreamlineLibraryDLSSG_SetDLSSGFrames, Frames) == 0x000000, "Member 'StreamlineLibraryDLSSG_SetDLSSGFrames::Frames' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryDLSSG.SetDLSSGMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryDLSSG_SetDLSSGMode final
{
public:
	EUStreamlineDLSSGMode                         DLSSGMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryDLSSG_SetDLSSGMode) == 0x000001, "Wrong alignment on StreamlineLibraryDLSSG_SetDLSSGMode");
static_assert(sizeof(StreamlineLibraryDLSSG_SetDLSSGMode) == 0x000001, "Wrong size on StreamlineLibraryDLSSG_SetDLSSGMode");
static_assert(offsetof(StreamlineLibraryDLSSG_SetDLSSGMode, DLSSGMode) == 0x000000, "Member 'StreamlineLibraryDLSSG_SetDLSSGMode::DLSSGMode' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryReflex.GetDefaultReflexMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_GetDefaultReflexMode final
{
public:
	EUStreamlineReflexMode                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetDefaultReflexMode) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_GetDefaultReflexMode");
static_assert(sizeof(StreamlineLibraryReflex_GetDefaultReflexMode) == 0x000001, "Wrong size on StreamlineLibraryReflex_GetDefaultReflexMode");
static_assert(offsetof(StreamlineLibraryReflex_GetDefaultReflexMode, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetDefaultReflexMode::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryReflex.GetGameLatencyInMs
// 0x0004 (0x0004 - 0x0000)
struct StreamlineLibraryReflex_GetGameLatencyInMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetGameLatencyInMs) == 0x000004, "Wrong alignment on StreamlineLibraryReflex_GetGameLatencyInMs");
static_assert(sizeof(StreamlineLibraryReflex_GetGameLatencyInMs) == 0x000004, "Wrong size on StreamlineLibraryReflex_GetGameLatencyInMs");
static_assert(offsetof(StreamlineLibraryReflex_GetGameLatencyInMs, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetGameLatencyInMs::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryReflex.GetGameToRenderLatencyInMs
// 0x0004 (0x0004 - 0x0000)
struct StreamlineLibraryReflex_GetGameToRenderLatencyInMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetGameToRenderLatencyInMs) == 0x000004, "Wrong alignment on StreamlineLibraryReflex_GetGameToRenderLatencyInMs");
static_assert(sizeof(StreamlineLibraryReflex_GetGameToRenderLatencyInMs) == 0x000004, "Wrong size on StreamlineLibraryReflex_GetGameToRenderLatencyInMs");
static_assert(offsetof(StreamlineLibraryReflex_GetGameToRenderLatencyInMs, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetGameToRenderLatencyInMs::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryReflex.GetReflexMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_GetReflexMode final
{
public:
	EUStreamlineReflexMode                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetReflexMode) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_GetReflexMode");
static_assert(sizeof(StreamlineLibraryReflex_GetReflexMode) == 0x000001, "Wrong size on StreamlineLibraryReflex_GetReflexMode");
static_assert(offsetof(StreamlineLibraryReflex_GetReflexMode, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetReflexMode::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryReflex.GetRenderLatencyInMs
// 0x0004 (0x0004 - 0x0000)
struct StreamlineLibraryReflex_GetRenderLatencyInMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetRenderLatencyInMs) == 0x000004, "Wrong alignment on StreamlineLibraryReflex_GetRenderLatencyInMs");
static_assert(sizeof(StreamlineLibraryReflex_GetRenderLatencyInMs) == 0x000004, "Wrong size on StreamlineLibraryReflex_GetRenderLatencyInMs");
static_assert(offsetof(StreamlineLibraryReflex_GetRenderLatencyInMs, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetRenderLatencyInMs::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryReflex.IsReflexSupported
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_IsReflexSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_IsReflexSupported) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_IsReflexSupported");
static_assert(sizeof(StreamlineLibraryReflex_IsReflexSupported) == 0x000001, "Wrong size on StreamlineLibraryReflex_IsReflexSupported");
static_assert(offsetof(StreamlineLibraryReflex_IsReflexSupported, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_IsReflexSupported::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryReflex.QueryReflexSupport
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_QueryReflexSupport final
{
public:
	EUStreamlineReflexSupport                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_QueryReflexSupport) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_QueryReflexSupport");
static_assert(sizeof(StreamlineLibraryReflex_QueryReflexSupport) == 0x000001, "Wrong size on StreamlineLibraryReflex_QueryReflexSupport");
static_assert(offsetof(StreamlineLibraryReflex_QueryReflexSupport, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_QueryReflexSupport::ReturnValue' has a wrong offset!");

// Function StreamlineBlueprint.StreamlineLibraryReflex.SetReflexMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_SetReflexMode final
{
public:
	EUStreamlineReflexMode                        Mode;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_SetReflexMode) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_SetReflexMode");
static_assert(sizeof(StreamlineLibraryReflex_SetReflexMode) == 0x000001, "Wrong size on StreamlineLibraryReflex_SetReflexMode");
static_assert(offsetof(StreamlineLibraryReflex_SetReflexMode, Mode) == 0x000000, "Member 'StreamlineLibraryReflex_SetReflexMode::Mode' has a wrong offset!");

}

