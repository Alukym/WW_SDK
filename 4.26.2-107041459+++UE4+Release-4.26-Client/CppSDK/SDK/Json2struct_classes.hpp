#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Json2struct

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Json2struct_structs.hpp"


namespace SDK
{

// Class json2struct.json2structBPLibrary
// 0x0000 (0x0030 - 0x0030)
class UJson2structBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static EJson2structParseResult Json2structBP(class UStruct** Out, const class FString& Json);
	static EJson2structParseResult WriteStructBP(class UStruct* InStruct, const struct FJson2struct_filter& Filter, class FString* Json);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"json2structBPLibrary">();
	}
	static class UJson2structBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJson2structBPLibrary>();
	}
};
static_assert(alignof(UJson2structBPLibrary) == 0x000008, "Wrong alignment on UJson2structBPLibrary");
static_assert(sizeof(UJson2structBPLibrary) == 0x000030, "Wrong size on UJson2structBPLibrary");

// Class json2struct.JsonAsyncNode
// 0x0020 (0x0058 - 0x0038)
class UJsonAsyncNode final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             Success;                                           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Fail;                                              // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UJsonAsyncNode* Json2structUrl(const class FString& URL, const class FString& RequestJson, const class UObject* WC);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JsonAsyncNode">();
	}
	static class UJsonAsyncNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJsonAsyncNode>();
	}
};
static_assert(alignof(UJsonAsyncNode) == 0x000008, "Wrong alignment on UJsonAsyncNode");
static_assert(sizeof(UJsonAsyncNode) == 0x000058, "Wrong size on UJsonAsyncNode");
static_assert(offsetof(UJsonAsyncNode, Success) == 0x000038, "Member 'UJsonAsyncNode::Success' has a wrong offset!");
static_assert(offsetof(UJsonAsyncNode, Fail) == 0x000048, "Member 'UJsonAsyncNode::Fail' has a wrong offset!");

}

