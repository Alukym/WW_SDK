#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroDynamicAtlas

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct KuroDynamicAtlas.DynamicAtlasSlotManagedHandle
// 0x0040 (0x0040 - 0x0000)
struct FDynamicAtlasSlotManagedHandle final
{
public:
	uint8                                         Pad_1A8A[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             AtlasTexture;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8B[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               UVRect;                                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8C[0x8];                                     // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicAtlasSlotManagedHandle) == 0x000010, "Wrong alignment on FDynamicAtlasSlotManagedHandle");
static_assert(sizeof(FDynamicAtlasSlotManagedHandle) == 0x000040, "Wrong size on FDynamicAtlasSlotManagedHandle");
static_assert(offsetof(FDynamicAtlasSlotManagedHandle, AtlasTexture) == 0x000010, "Member 'FDynamicAtlasSlotManagedHandle::AtlasTexture' has a wrong offset!");
static_assert(offsetof(FDynamicAtlasSlotManagedHandle, UVRect) == 0x000020, "Member 'FDynamicAtlasSlotManagedHandle::UVRect' has a wrong offset!");
static_assert(offsetof(FDynamicAtlasSlotManagedHandle, Width) == 0x000030, "Member 'FDynamicAtlasSlotManagedHandle::Width' has a wrong offset!");
static_assert(offsetof(FDynamicAtlasSlotManagedHandle, Height) == 0x000034, "Member 'FDynamicAtlasSlotManagedHandle::Height' has a wrong offset!");

// ScriptStruct KuroDynamicAtlas.DynamicTextureAtlasSetting
// 0x0028 (0x0028 - 0x0000)
struct FDynamicTextureAtlasSetting final
{
public:
	class FString                                 AtlasTag;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultWidth;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultHeight;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAtlasTextures;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxUpdateSlotCountInOneFrame;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InitWithTransparent;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8D[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicTextureAtlasSetting) == 0x000008, "Wrong alignment on FDynamicTextureAtlasSetting");
static_assert(sizeof(FDynamicTextureAtlasSetting) == 0x000028, "Wrong size on FDynamicTextureAtlasSetting");
static_assert(offsetof(FDynamicTextureAtlasSetting, AtlasTag) == 0x000000, "Member 'FDynamicTextureAtlasSetting::AtlasTag' has a wrong offset!");
static_assert(offsetof(FDynamicTextureAtlasSetting, DefaultWidth) == 0x000010, "Member 'FDynamicTextureAtlasSetting::DefaultWidth' has a wrong offset!");
static_assert(offsetof(FDynamicTextureAtlasSetting, DefaultHeight) == 0x000014, "Member 'FDynamicTextureAtlasSetting::DefaultHeight' has a wrong offset!");
static_assert(offsetof(FDynamicTextureAtlasSetting, MaxAtlasTextures) == 0x000018, "Member 'FDynamicTextureAtlasSetting::MaxAtlasTextures' has a wrong offset!");
static_assert(offsetof(FDynamicTextureAtlasSetting, MaxUpdateSlotCountInOneFrame) == 0x00001C, "Member 'FDynamicTextureAtlasSetting::MaxUpdateSlotCountInOneFrame' has a wrong offset!");
static_assert(offsetof(FDynamicTextureAtlasSetting, InitWithTransparent) == 0x000020, "Member 'FDynamicTextureAtlasSetting::InitWithTransparent' has a wrong offset!");

}

