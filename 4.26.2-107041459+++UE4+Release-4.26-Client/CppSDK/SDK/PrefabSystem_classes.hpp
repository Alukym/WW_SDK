#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrefabSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "PrefabSystem_structs.hpp"


namespace SDK
{

// Class PrefabSystem.ActorComponentPrefabData
// 0x01E8 (0x0218 - 0x0030)
class UActorComponentPrefabData final : public UAssetUserData
{
public:
	struct FGuid                                  PrefabInstanceGuid;                                // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SourcePrefabGuid;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceComponentFileID;                             // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceActorFileID;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OuterPrefabGuid;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OuterPrefabInstanceFileID;                         // 0x0068(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OuterPrefabInstanceGuid;                           // 0x006C(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142E[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGuid, int32>                     WithinOuterPrefabActorFileIDMap;                   // 0x0080(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<struct FGuid, int32>                     WithinOuterPrefabComponentFileIDMap;               // 0x00D0(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             ModifiedPropertyFNames;                            // 0x0120(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<struct FGuid, class FString>             OuterPrefabModifedPropertiesMap;                   // 0x0170(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<TWeakObjectPtr<class UObject>, int32>    DeepCopyObjectsFileIDMap;                          // 0x01C0(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	bool                                          bIsAnyPrefabInstanceRoot;                          // 0x0210(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142F[0x7];                                     // 0x0211(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorComponentPrefabData">();
	}
	static class UActorComponentPrefabData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorComponentPrefabData>();
	}
};
static_assert(alignof(UActorComponentPrefabData) == 0x000008, "Wrong alignment on UActorComponentPrefabData");
static_assert(sizeof(UActorComponentPrefabData) == 0x000218, "Wrong size on UActorComponentPrefabData");
static_assert(offsetof(UActorComponentPrefabData, PrefabInstanceGuid) == 0x000030, "Member 'UActorComponentPrefabData::PrefabInstanceGuid' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, SourcePrefabGuid) == 0x000040, "Member 'UActorComponentPrefabData::SourcePrefabGuid' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, SourceComponentFileID) == 0x000050, "Member 'UActorComponentPrefabData::SourceComponentFileID' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, SourceActorFileID) == 0x000054, "Member 'UActorComponentPrefabData::SourceActorFileID' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, OuterPrefabGuid) == 0x000058, "Member 'UActorComponentPrefabData::OuterPrefabGuid' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, OuterPrefabInstanceFileID) == 0x000068, "Member 'UActorComponentPrefabData::OuterPrefabInstanceFileID' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, OuterPrefabInstanceGuid) == 0x00006C, "Member 'UActorComponentPrefabData::OuterPrefabInstanceGuid' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, WithinOuterPrefabActorFileIDMap) == 0x000080, "Member 'UActorComponentPrefabData::WithinOuterPrefabActorFileIDMap' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, WithinOuterPrefabComponentFileIDMap) == 0x0000D0, "Member 'UActorComponentPrefabData::WithinOuterPrefabComponentFileIDMap' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, ModifiedPropertyFNames) == 0x000120, "Member 'UActorComponentPrefabData::ModifiedPropertyFNames' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, OuterPrefabModifedPropertiesMap) == 0x000170, "Member 'UActorComponentPrefabData::OuterPrefabModifedPropertiesMap' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, DeepCopyObjectsFileIDMap) == 0x0001C0, "Member 'UActorComponentPrefabData::DeepCopyObjectsFileIDMap' has a wrong offset!");
static_assert(offsetof(UActorComponentPrefabData, bIsAnyPrefabInstanceRoot) == 0x000210, "Member 'UActorComponentPrefabData::bIsAnyPrefabInstanceRoot' has a wrong offset!");

// Class PrefabSystem.PrefabAsset
// 0x00B8 (0x00F0 - 0x0038)
class UPrefabAsset final : public UPrimaryDataAsset
{
public:
	int32                                         NextFileID;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Version;                                           // 0x003C(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1430[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReferenceAssets;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReferenceFNames;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         ReferenceClasses;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                SoftReferenceData;                                 // 0x0080(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FActorSerializeData>            ActorsSerializeData;                               // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FComponentSerializeData>        ComponentsSerializeData;                           // 0x00A0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNestedPrefabInstanceData>      NestedPrefabInstancesData;                         // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNestedPrefabInstanceChain>     NestedPrefabInstanceChains;                        // 0x00C0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVirtualObjectSerializeData>    VirtualObjectsSerializeData;                       // 0x00D0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FPropertyModificationData>      PropertyModificationsSerializeData;                // 0x00E0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabAsset">();
	}
	static class UPrefabAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabAsset>();
	}
};
static_assert(alignof(UPrefabAsset) == 0x000008, "Wrong alignment on UPrefabAsset");
static_assert(sizeof(UPrefabAsset) == 0x0000F0, "Wrong size on UPrefabAsset");
static_assert(offsetof(UPrefabAsset, NextFileID) == 0x000038, "Member 'UPrefabAsset::NextFileID' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, Version) == 0x00003C, "Member 'UPrefabAsset::Version' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, Guid) == 0x000040, "Member 'UPrefabAsset::Guid' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, ReferenceAssets) == 0x000050, "Member 'UPrefabAsset::ReferenceAssets' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, ReferenceFNames) == 0x000060, "Member 'UPrefabAsset::ReferenceFNames' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, ReferenceClasses) == 0x000070, "Member 'UPrefabAsset::ReferenceClasses' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, SoftReferenceData) == 0x000080, "Member 'UPrefabAsset::SoftReferenceData' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, ActorsSerializeData) == 0x000090, "Member 'UPrefabAsset::ActorsSerializeData' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, ComponentsSerializeData) == 0x0000A0, "Member 'UPrefabAsset::ComponentsSerializeData' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, NestedPrefabInstancesData) == 0x0000B0, "Member 'UPrefabAsset::NestedPrefabInstancesData' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, NestedPrefabInstanceChains) == 0x0000C0, "Member 'UPrefabAsset::NestedPrefabInstanceChains' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, VirtualObjectsSerializeData) == 0x0000D0, "Member 'UPrefabAsset::VirtualObjectsSerializeData' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, PropertyModificationsSerializeData) == 0x0000E0, "Member 'UPrefabAsset::PropertyModificationsSerializeData' has a wrong offset!");

// Class PrefabSystem.PrefabAssetManager
// 0x00A0 (0x00D0 - 0x0030)
class UPrefabAssetManager final : public UObject
{
public:
	uint8                                         Pad_1431[0xA0];                                    // 0x0030(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabAssetManager">();
	}
	static class UPrefabAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabAssetManager>();
	}
};
static_assert(alignof(UPrefabAssetManager) == 0x000008, "Wrong alignment on UPrefabAssetManager");
static_assert(sizeof(UPrefabAssetManager) == 0x0000D0, "Wrong size on UPrefabAssetManager");

// Class PrefabSystem.PrefabBlueprintFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UPrefabBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyPrefab(class AActor* Actor);
	static class AActor* Instantiate(class UPrefabAsset* PrefabAsset, class USceneComponent* ParentComponent, class ULevel* InLevel, bool bTemporaryEditorActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabBlueprintFunctionLibrary">();
	}
	static class UPrefabBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UPrefabBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UPrefabBlueprintFunctionLibrary");
static_assert(sizeof(UPrefabBlueprintFunctionLibrary) == 0x000030, "Wrong size on UPrefabBlueprintFunctionLibrary");

}

