#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroPointCloud

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct KuroPointCloud.PointData
// 0x0010 (0x0010 - 0x0000)
struct FPointData final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPointData) == 0x000004, "Wrong alignment on FPointData");
static_assert(sizeof(FPointData) == 0x000010, "Wrong size on FPointData");
static_assert(offsetof(FPointData, Index) == 0x000000, "Member 'FPointData::Index' has a wrong offset!");
static_assert(offsetof(FPointData, Position) == 0x000004, "Member 'FPointData::Position' has a wrong offset!");

// ScriptStruct KuroPointCloud.KuroPointSpatialTree
// 0x0038 (0x0038 - 0x0000)
struct FKuroPointSpatialTree
{
public:
	uint8                                         Pad_180C[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPointData>                     PointCloudData;                                    // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   MaxBound;                                          // 0x0018(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_180D[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroPointSpatialTree) == 0x000008, "Wrong alignment on FKuroPointSpatialTree");
static_assert(sizeof(FKuroPointSpatialTree) == 0x000038, "Wrong size on FKuroPointSpatialTree");
static_assert(offsetof(FKuroPointSpatialTree, PointCloudData) == 0x000008, "Member 'FKuroPointSpatialTree::PointCloudData' has a wrong offset!");
static_assert(offsetof(FKuroPointSpatialTree, MaxBound) == 0x000018, "Member 'FKuroPointSpatialTree::MaxBound' has a wrong offset!");

// ScriptStruct KuroPointCloud.KuroPointKdTreeNode
// 0x002C (0x002C - 0x0000)
struct FKuroPointKdTreeNode final
{
public:
	int32                                         LeftNodeIndex;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightNodeIndex;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointArrayBegin;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointArrayEnd;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   BoundingBox;                                       // 0x0010(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroPointKdTreeNode) == 0x000004, "Wrong alignment on FKuroPointKdTreeNode");
static_assert(sizeof(FKuroPointKdTreeNode) == 0x00002C, "Wrong size on FKuroPointKdTreeNode");
static_assert(offsetof(FKuroPointKdTreeNode, LeftNodeIndex) == 0x000000, "Member 'FKuroPointKdTreeNode::LeftNodeIndex' has a wrong offset!");
static_assert(offsetof(FKuroPointKdTreeNode, RightNodeIndex) == 0x000004, "Member 'FKuroPointKdTreeNode::RightNodeIndex' has a wrong offset!");
static_assert(offsetof(FKuroPointKdTreeNode, PointArrayBegin) == 0x000008, "Member 'FKuroPointKdTreeNode::PointArrayBegin' has a wrong offset!");
static_assert(offsetof(FKuroPointKdTreeNode, PointArrayEnd) == 0x00000C, "Member 'FKuroPointKdTreeNode::PointArrayEnd' has a wrong offset!");
static_assert(offsetof(FKuroPointKdTreeNode, BoundingBox) == 0x000010, "Member 'FKuroPointKdTreeNode::BoundingBox' has a wrong offset!");

// ScriptStruct KuroPointCloud.KuroPointKdTree
// 0x0020 (0x0058 - 0x0038)
struct FKuroPointKdTree final : public FKuroPointSpatialTree
{
public:
	int32                                         PointNumToStopDivide;                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoxLengthToStopDivide;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKuroPointKdTreeNode>           TreeNodes;                                         // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         RootNodeId;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180E[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroPointKdTree) == 0x000008, "Wrong alignment on FKuroPointKdTree");
static_assert(sizeof(FKuroPointKdTree) == 0x000058, "Wrong size on FKuroPointKdTree");
static_assert(offsetof(FKuroPointKdTree, PointNumToStopDivide) == 0x000038, "Member 'FKuroPointKdTree::PointNumToStopDivide' has a wrong offset!");
static_assert(offsetof(FKuroPointKdTree, BoxLengthToStopDivide) == 0x00003C, "Member 'FKuroPointKdTree::BoxLengthToStopDivide' has a wrong offset!");
static_assert(offsetof(FKuroPointKdTree, TreeNodes) == 0x000040, "Member 'FKuroPointKdTree::TreeNodes' has a wrong offset!");
static_assert(offsetof(FKuroPointKdTree, RootNodeId) == 0x000050, "Member 'FKuroPointKdTree::RootNodeId' has a wrong offset!");

}

