#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LiveLinkInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LiveLinkInterface.ELiveLinkCameraProjectionMode
// NumValues: 0x0003
enum class ELiveLinkCameraProjectionMode : uint8
{
	Perspective                              = 0,
	Orthographic                             = 1,
	ELiveLinkCameraProjectionMode_MAX        = 2,
};

// Enum LiveLinkInterface.ELiveLinkSourceMode
// NumValues: 0x0004
enum class ELiveLinkSourceMode : uint8
{
	Latest                                   = 0,
	EngineTime                               = 1,
	Timecode                                 = 2,
	ELiveLinkSourceMode_MAX                  = 3,
};

// ScriptStruct LiveLinkInterface.LiveLinkSourceHandle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLiveLinkSourceHandle final
{
public:
	uint8                                         Pad_23EC[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkSourceHandle) == 0x000008, "Wrong alignment on FLiveLinkSourceHandle");
static_assert(sizeof(FLiveLinkSourceHandle) == 0x000018, "Wrong size on FLiveLinkSourceHandle");

// ScriptStruct LiveLinkInterface.LiveLinkBaseBlueprintData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FLiveLinkBaseBlueprintData
{
public:
	uint8                                         Pad_23ED[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkBaseBlueprintData) == 0x000008, "Wrong alignment on FLiveLinkBaseBlueprintData");
static_assert(sizeof(FLiveLinkBaseBlueprintData) == 0x000008, "Wrong size on FLiveLinkBaseBlueprintData");

// ScriptStruct LiveLinkInterface.SubjectFrameHandle
// 0x0010 (0x0018 - 0x0008)
struct FSubjectFrameHandle final : public FLiveLinkBaseBlueprintData
{
public:
	uint8                                         Pad_23EE[0x10];                                    // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubjectFrameHandle) == 0x000008, "Wrong alignment on FSubjectFrameHandle");
static_assert(sizeof(FSubjectFrameHandle) == 0x000018, "Wrong size on FSubjectFrameHandle");

// ScriptStruct LiveLinkInterface.LiveLinkTransform
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FLiveLinkTransform final
{
public:
	uint8                                         Pad_23EF[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkTransform) == 0x000008, "Wrong alignment on FLiveLinkTransform");
static_assert(sizeof(FLiveLinkTransform) == 0x000020, "Wrong size on FLiveLinkTransform");

// ScriptStruct LiveLinkInterface.CachedSubjectFrame
// 0x0160 (0x0160 - 0x0000)
struct alignas(0x08) FCachedSubjectFrame final
{
public:
	uint8                                         Pad_23F0[0x160];                                   // 0x0000(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedSubjectFrame) == 0x000008, "Wrong alignment on FCachedSubjectFrame");
static_assert(sizeof(FCachedSubjectFrame) == 0x000160, "Wrong size on FCachedSubjectFrame");

// ScriptStruct LiveLinkInterface.SubjectMetadata
// 0x0070 (0x0070 - 0x0000)
struct FSubjectMetadata final
{
public:
	TMap<class FName, class FString>              StringMetadata;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTimecode                              SceneTimecode;                                     // 0x0050(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             SceneFramerate;                                    // 0x0064(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F1[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubjectMetadata) == 0x000008, "Wrong alignment on FSubjectMetadata");
static_assert(sizeof(FSubjectMetadata) == 0x000070, "Wrong size on FSubjectMetadata");
static_assert(offsetof(FSubjectMetadata, StringMetadata) == 0x000000, "Member 'FSubjectMetadata::StringMetadata' has a wrong offset!");
static_assert(offsetof(FSubjectMetadata, SceneTimecode) == 0x000050, "Member 'FSubjectMetadata::SceneTimecode' has a wrong offset!");
static_assert(offsetof(FSubjectMetadata, SceneFramerate) == 0x000064, "Member 'FSubjectMetadata::SceneFramerate' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkWorldTime
// 0x0010 (0x0010 - 0x0000)
struct FLiveLinkWorldTime final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                        Offset;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLiveLinkWorldTime) == 0x000008, "Wrong alignment on FLiveLinkWorldTime");
static_assert(sizeof(FLiveLinkWorldTime) == 0x000010, "Wrong size on FLiveLinkWorldTime");
static_assert(offsetof(FLiveLinkWorldTime, Time) == 0x000000, "Member 'FLiveLinkWorldTime::Time' has a wrong offset!");
static_assert(offsetof(FLiveLinkWorldTime, Offset) == 0x000008, "Member 'FLiveLinkWorldTime::Offset' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkMetaData
// 0x0060 (0x0060 - 0x0000)
struct FLiveLinkMetaData final
{
public:
	TMap<class FName, class FString>              StringMetaData;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FQualifiedFrameTime                    SceneTime;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkMetaData) == 0x000008, "Wrong alignment on FLiveLinkMetaData");
static_assert(sizeof(FLiveLinkMetaData) == 0x000060, "Wrong size on FLiveLinkMetaData");
static_assert(offsetof(FLiveLinkMetaData, StringMetaData) == 0x000000, "Member 'FLiveLinkMetaData::StringMetaData' has a wrong offset!");
static_assert(offsetof(FLiveLinkMetaData, SceneTime) == 0x000050, "Member 'FLiveLinkMetaData::SceneTime' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkBaseFrameData
// 0x00A0 (0x00A0 - 0x0000)
struct FLiveLinkBaseFrameData
{
public:
	struct FLiveLinkWorldTime                     WorldTime;                                         // 0x0000(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FLiveLinkMetaData                      MetaData;                                          // 0x0010(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                 PropertyValues;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F2[0x20];                                    // 0x0080(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkBaseFrameData) == 0x000008, "Wrong alignment on FLiveLinkBaseFrameData");
static_assert(sizeof(FLiveLinkBaseFrameData) == 0x0000A0, "Wrong size on FLiveLinkBaseFrameData");
static_assert(offsetof(FLiveLinkBaseFrameData, WorldTime) == 0x000000, "Member 'FLiveLinkBaseFrameData::WorldTime' has a wrong offset!");
static_assert(offsetof(FLiveLinkBaseFrameData, MetaData) == 0x000010, "Member 'FLiveLinkBaseFrameData::MetaData' has a wrong offset!");
static_assert(offsetof(FLiveLinkBaseFrameData, PropertyValues) == 0x000070, "Member 'FLiveLinkBaseFrameData::PropertyValues' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkAnimationFrameData
// 0x0010 (0x00B0 - 0x00A0)
struct FLiveLinkAnimationFrameData final : public FLiveLinkBaseFrameData
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkAnimationFrameData) == 0x000008, "Wrong alignment on FLiveLinkAnimationFrameData");
static_assert(sizeof(FLiveLinkAnimationFrameData) == 0x0000B0, "Wrong size on FLiveLinkAnimationFrameData");
static_assert(offsetof(FLiveLinkAnimationFrameData, Transforms) == 0x0000A0, "Member 'FLiveLinkAnimationFrameData::Transforms' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkBaseStaticData
// 0x0010 (0x0010 - 0x0000)
struct FLiveLinkBaseStaticData
{
public:
	TArray<class FName>                           PropertyNames;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkBaseStaticData) == 0x000008, "Wrong alignment on FLiveLinkBaseStaticData");
static_assert(sizeof(FLiveLinkBaseStaticData) == 0x000010, "Wrong size on FLiveLinkBaseStaticData");
static_assert(offsetof(FLiveLinkBaseStaticData, PropertyNames) == 0x000000, "Member 'FLiveLinkBaseStaticData::PropertyNames' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSkeletonStaticData
// 0x0020 (0x0030 - 0x0010)
struct FLiveLinkSkeletonStaticData final : public FLiveLinkBaseStaticData
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BoneParents;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkSkeletonStaticData) == 0x000008, "Wrong alignment on FLiveLinkSkeletonStaticData");
static_assert(sizeof(FLiveLinkSkeletonStaticData) == 0x000030, "Wrong size on FLiveLinkSkeletonStaticData");
static_assert(offsetof(FLiveLinkSkeletonStaticData, BoneNames) == 0x000010, "Member 'FLiveLinkSkeletonStaticData::BoneNames' has a wrong offset!");
static_assert(offsetof(FLiveLinkSkeletonStaticData, BoneParents) == 0x000020, "Member 'FLiveLinkSkeletonStaticData::BoneParents' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkBasicBlueprintData
// 0x00B0 (0x00B8 - 0x0008)
struct FLiveLinkBasicBlueprintData final : public FLiveLinkBaseBlueprintData
{
public:
	struct FLiveLinkBaseStaticData                StaticData;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLiveLinkBaseFrameData                 FrameData;                                         // 0x0018(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkBasicBlueprintData) == 0x000008, "Wrong alignment on FLiveLinkBasicBlueprintData");
static_assert(sizeof(FLiveLinkBasicBlueprintData) == 0x0000B8, "Wrong size on FLiveLinkBasicBlueprintData");
static_assert(offsetof(FLiveLinkBasicBlueprintData, StaticData) == 0x000008, "Member 'FLiveLinkBasicBlueprintData::StaticData' has a wrong offset!");
static_assert(offsetof(FLiveLinkBasicBlueprintData, FrameData) == 0x000018, "Member 'FLiveLinkBasicBlueprintData::FrameData' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkTransformStaticData
// 0x0000 (0x0010 - 0x0010)
struct FLiveLinkTransformStaticData : public FLiveLinkBaseStaticData
{
};
static_assert(alignof(FLiveLinkTransformStaticData) == 0x000008, "Wrong alignment on FLiveLinkTransformStaticData");
static_assert(sizeof(FLiveLinkTransformStaticData) == 0x000010, "Wrong size on FLiveLinkTransformStaticData");

// ScriptStruct LiveLinkInterface.LiveLinkCameraStaticData
// 0x0010 (0x0020 - 0x0010)
struct FLiveLinkCameraStaticData final : public FLiveLinkTransformStaticData
{
public:
	bool                                          bIsFieldOfViewSupported;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAspectRatioSupported;                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFocalLengthSupported;                           // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProjectionModeSupported;                        // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmBackWidth;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmBackHeight;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsApertureSupported;                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFocusDistanceSupported;                         // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F3[0x2];                                     // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkCameraStaticData) == 0x000008, "Wrong alignment on FLiveLinkCameraStaticData");
static_assert(sizeof(FLiveLinkCameraStaticData) == 0x000020, "Wrong size on FLiveLinkCameraStaticData");
static_assert(offsetof(FLiveLinkCameraStaticData, bIsFieldOfViewSupported) == 0x000010, "Member 'FLiveLinkCameraStaticData::bIsFieldOfViewSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraStaticData, bIsAspectRatioSupported) == 0x000011, "Member 'FLiveLinkCameraStaticData::bIsAspectRatioSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraStaticData, bIsFocalLengthSupported) == 0x000012, "Member 'FLiveLinkCameraStaticData::bIsFocalLengthSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraStaticData, bIsProjectionModeSupported) == 0x000013, "Member 'FLiveLinkCameraStaticData::bIsProjectionModeSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraStaticData, FilmBackWidth) == 0x000014, "Member 'FLiveLinkCameraStaticData::FilmBackWidth' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraStaticData, FilmBackHeight) == 0x000018, "Member 'FLiveLinkCameraStaticData::FilmBackHeight' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraStaticData, bIsApertureSupported) == 0x00001C, "Member 'FLiveLinkCameraStaticData::bIsApertureSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraStaticData, bIsFocusDistanceSupported) == 0x00001D, "Member 'FLiveLinkCameraStaticData::bIsFocusDistanceSupported' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkTransformFrameData
// 0x0030 (0x00D0 - 0x00A0)
struct FLiveLinkTransformFrameData : public FLiveLinkBaseFrameData
{
public:
	struct FTransform                             Transform;                                         // 0x00A0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkTransformFrameData) == 0x000010, "Wrong alignment on FLiveLinkTransformFrameData");
static_assert(sizeof(FLiveLinkTransformFrameData) == 0x0000D0, "Wrong size on FLiveLinkTransformFrameData");
static_assert(offsetof(FLiveLinkTransformFrameData, Transform) == 0x0000A0, "Member 'FLiveLinkTransformFrameData::Transform' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkCameraFrameData
// 0x0020 (0x00F0 - 0x00D0)
struct FLiveLinkCameraFrameData final : public FLiveLinkTransformFrameData
{
public:
	float                                         FieldOfView;                                       // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocalLength;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aperture;                                          // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusDistance;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELiveLinkCameraProjectionMode                 ProjectionMode;                                    // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F4[0xB];                                     // 0x00E5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkCameraFrameData) == 0x000010, "Wrong alignment on FLiveLinkCameraFrameData");
static_assert(sizeof(FLiveLinkCameraFrameData) == 0x0000F0, "Wrong size on FLiveLinkCameraFrameData");
static_assert(offsetof(FLiveLinkCameraFrameData, FieldOfView) == 0x0000D0, "Member 'FLiveLinkCameraFrameData::FieldOfView' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraFrameData, AspectRatio) == 0x0000D4, "Member 'FLiveLinkCameraFrameData::AspectRatio' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraFrameData, FocalLength) == 0x0000D8, "Member 'FLiveLinkCameraFrameData::FocalLength' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraFrameData, Aperture) == 0x0000DC, "Member 'FLiveLinkCameraFrameData::Aperture' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraFrameData, FocusDistance) == 0x0000E0, "Member 'FLiveLinkCameraFrameData::FocusDistance' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraFrameData, ProjectionMode) == 0x0000E4, "Member 'FLiveLinkCameraFrameData::ProjectionMode' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkCameraBlueprintData
// 0x0118 (0x0120 - 0x0008)
struct FLiveLinkCameraBlueprintData final : public FLiveLinkBaseBlueprintData
{
public:
	struct FLiveLinkCameraStaticData              StaticData;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F5[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLiveLinkCameraFrameData               FrameData;                                         // 0x0030(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkCameraBlueprintData) == 0x000010, "Wrong alignment on FLiveLinkCameraBlueprintData");
static_assert(sizeof(FLiveLinkCameraBlueprintData) == 0x000120, "Wrong size on FLiveLinkCameraBlueprintData");
static_assert(offsetof(FLiveLinkCameraBlueprintData, StaticData) == 0x000008, "Member 'FLiveLinkCameraBlueprintData::StaticData' has a wrong offset!");
static_assert(offsetof(FLiveLinkCameraBlueprintData, FrameData) == 0x000030, "Member 'FLiveLinkCameraBlueprintData::FrameData' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkCurveConversionSettings
// 0x0050 (0x0050 - 0x0000)
struct FLiveLinkCurveConversionSettings final
{
public:
	TMap<class FString, struct FSoftObjectPath>   CurveConversionAssetMap;                           // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkCurveConversionSettings) == 0x000008, "Wrong alignment on FLiveLinkCurveConversionSettings");
static_assert(sizeof(FLiveLinkCurveConversionSettings) == 0x000050, "Wrong size on FLiveLinkCurveConversionSettings");
static_assert(offsetof(FLiveLinkCurveConversionSettings, CurveConversionAssetMap) == 0x000000, "Member 'FLiveLinkCurveConversionSettings::CurveConversionAssetMap' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkLightStaticData
// 0x0010 (0x0020 - 0x0010)
struct FLiveLinkLightStaticData final : public FLiveLinkTransformStaticData
{
public:
	bool                                          bIsTemperatureSupported;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIntensitySupported;                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLightColorSupported;                            // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInnerConeAngleSupported;                        // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOuterConeAngleSupported;                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAttenuationRadiusSupported;                     // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSourceLenghtSupported;                          // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSourceRadiusSupported;                          // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSoftSourceRadiusSupported;                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkLightStaticData) == 0x000008, "Wrong alignment on FLiveLinkLightStaticData");
static_assert(sizeof(FLiveLinkLightStaticData) == 0x000020, "Wrong size on FLiveLinkLightStaticData");
static_assert(offsetof(FLiveLinkLightStaticData, bIsTemperatureSupported) == 0x000010, "Member 'FLiveLinkLightStaticData::bIsTemperatureSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightStaticData, bIsIntensitySupported) == 0x000011, "Member 'FLiveLinkLightStaticData::bIsIntensitySupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightStaticData, bIsLightColorSupported) == 0x000012, "Member 'FLiveLinkLightStaticData::bIsLightColorSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightStaticData, bIsInnerConeAngleSupported) == 0x000013, "Member 'FLiveLinkLightStaticData::bIsInnerConeAngleSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightStaticData, bIsOuterConeAngleSupported) == 0x000014, "Member 'FLiveLinkLightStaticData::bIsOuterConeAngleSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightStaticData, bIsAttenuationRadiusSupported) == 0x000015, "Member 'FLiveLinkLightStaticData::bIsAttenuationRadiusSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightStaticData, bIsSourceLenghtSupported) == 0x000016, "Member 'FLiveLinkLightStaticData::bIsSourceLenghtSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightStaticData, bIsSourceRadiusSupported) == 0x000017, "Member 'FLiveLinkLightStaticData::bIsSourceRadiusSupported' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightStaticData, bIsSoftSourceRadiusSupported) == 0x000018, "Member 'FLiveLinkLightStaticData::bIsSoftSourceRadiusSupported' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkLightFrameData
// 0x0030 (0x0100 - 0x00D0)
struct FLiveLinkLightFrameData final : public FLiveLinkTransformFrameData
{
public:
	float                                         Temperature;                                       // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerConeAngle;                                    // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceRadius;                                      // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftSourceRadius;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceLength;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F7[0xC];                                     // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkLightFrameData) == 0x000010, "Wrong alignment on FLiveLinkLightFrameData");
static_assert(sizeof(FLiveLinkLightFrameData) == 0x000100, "Wrong size on FLiveLinkLightFrameData");
static_assert(offsetof(FLiveLinkLightFrameData, Temperature) == 0x0000D0, "Member 'FLiveLinkLightFrameData::Temperature' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightFrameData, Intensity) == 0x0000D4, "Member 'FLiveLinkLightFrameData::Intensity' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightFrameData, LightColor) == 0x0000D8, "Member 'FLiveLinkLightFrameData::LightColor' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightFrameData, InnerConeAngle) == 0x0000DC, "Member 'FLiveLinkLightFrameData::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightFrameData, OuterConeAngle) == 0x0000E0, "Member 'FLiveLinkLightFrameData::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightFrameData, AttenuationRadius) == 0x0000E4, "Member 'FLiveLinkLightFrameData::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightFrameData, SourceRadius) == 0x0000E8, "Member 'FLiveLinkLightFrameData::SourceRadius' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightFrameData, SoftSourceRadius) == 0x0000EC, "Member 'FLiveLinkLightFrameData::SoftSourceRadius' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightFrameData, SourceLength) == 0x0000F0, "Member 'FLiveLinkLightFrameData::SourceLength' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkLightBlueprintData
// 0x0128 (0x0130 - 0x0008)
struct FLiveLinkLightBlueprintData final : public FLiveLinkBaseBlueprintData
{
public:
	struct FLiveLinkLightStaticData               StaticData;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F8[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLiveLinkLightFrameData                FrameData;                                         // 0x0030(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkLightBlueprintData) == 0x000010, "Wrong alignment on FLiveLinkLightBlueprintData");
static_assert(sizeof(FLiveLinkLightBlueprintData) == 0x000130, "Wrong size on FLiveLinkLightBlueprintData");
static_assert(offsetof(FLiveLinkLightBlueprintData, StaticData) == 0x000008, "Member 'FLiveLinkLightBlueprintData::StaticData' has a wrong offset!");
static_assert(offsetof(FLiveLinkLightBlueprintData, FrameData) == 0x000030, "Member 'FLiveLinkLightBlueprintData::FrameData' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSubjectName
// 0x000C (0x000C - 0x0000)
struct FLiveLinkSubjectName final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkSubjectName) == 0x000004, "Wrong alignment on FLiveLinkSubjectName");
static_assert(sizeof(FLiveLinkSubjectName) == 0x00000C, "Wrong size on FLiveLinkSubjectName");
static_assert(offsetof(FLiveLinkSubjectName, Name) == 0x000000, "Member 'FLiveLinkSubjectName::Name' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSubjectKey
// 0x001C (0x001C - 0x0000)
struct FLiveLinkSubjectKey final
{
public:
	struct FGuid                                  Source;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLiveLinkSubjectName                   SubjectName;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkSubjectKey) == 0x000004, "Wrong alignment on FLiveLinkSubjectKey");
static_assert(sizeof(FLiveLinkSubjectKey) == 0x00001C, "Wrong size on FLiveLinkSubjectKey");
static_assert(offsetof(FLiveLinkSubjectKey, Source) == 0x000000, "Member 'FLiveLinkSubjectKey::Source' has a wrong offset!");
static_assert(offsetof(FLiveLinkSubjectKey, SubjectName) == 0x000010, "Member 'FLiveLinkSubjectKey::SubjectName' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSubjectPreset
// 0x0040 (0x0040 - 0x0000)
struct FLiveLinkSubjectPreset final
{
public:
	struct FLiveLinkSubjectKey                    Key;                                               // 0x0000(0x001C)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F9[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULiveLinkRole>              Role;                                              // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULiveLinkSubjectSettings*               Settings;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULiveLinkVirtualSubject*                VirtualSubject;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FA[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkSubjectPreset) == 0x000008, "Wrong alignment on FLiveLinkSubjectPreset");
static_assert(sizeof(FLiveLinkSubjectPreset) == 0x000040, "Wrong size on FLiveLinkSubjectPreset");
static_assert(offsetof(FLiveLinkSubjectPreset, Key) == 0x000000, "Member 'FLiveLinkSubjectPreset::Key' has a wrong offset!");
static_assert(offsetof(FLiveLinkSubjectPreset, Role) == 0x000020, "Member 'FLiveLinkSubjectPreset::Role' has a wrong offset!");
static_assert(offsetof(FLiveLinkSubjectPreset, Settings) == 0x000028, "Member 'FLiveLinkSubjectPreset::Settings' has a wrong offset!");
static_assert(offsetof(FLiveLinkSubjectPreset, VirtualSubject) == 0x000030, "Member 'FLiveLinkSubjectPreset::VirtualSubject' has a wrong offset!");
static_assert(offsetof(FLiveLinkSubjectPreset, bEnabled) == 0x000038, "Member 'FLiveLinkSubjectPreset::bEnabled' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSourcePreset
// 0x0030 (0x0030 - 0x0000)
struct FLiveLinkSourcePreset final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULiveLinkSourceSettings*                Settings;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SourceType;                                        // 0x0018(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkSourcePreset) == 0x000008, "Wrong alignment on FLiveLinkSourcePreset");
static_assert(sizeof(FLiveLinkSourcePreset) == 0x000030, "Wrong size on FLiveLinkSourcePreset");
static_assert(offsetof(FLiveLinkSourcePreset, Guid) == 0x000000, "Member 'FLiveLinkSourcePreset::Guid' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourcePreset, Settings) == 0x000010, "Member 'FLiveLinkSourcePreset::Settings' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourcePreset, SourceType) == 0x000018, "Member 'FLiveLinkSourcePreset::SourceType' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkRefSkeleton
// 0x0020 (0x0020 - 0x0000)
struct FLiveLinkRefSkeleton final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BoneParents;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkRefSkeleton) == 0x000008, "Wrong alignment on FLiveLinkRefSkeleton");
static_assert(sizeof(FLiveLinkRefSkeleton) == 0x000020, "Wrong size on FLiveLinkRefSkeleton");
static_assert(offsetof(FLiveLinkRefSkeleton, BoneNames) == 0x000000, "Member 'FLiveLinkRefSkeleton::BoneNames' has a wrong offset!");
static_assert(offsetof(FLiveLinkRefSkeleton, BoneParents) == 0x000010, "Member 'FLiveLinkRefSkeleton::BoneParents' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSubjectRepresentation
// 0x0018 (0x0018 - 0x0000)
struct FLiveLinkSubjectRepresentation final
{
public:
	struct FLiveLinkSubjectName                   Subject;                                           // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULiveLinkRole>              Role;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkSubjectRepresentation) == 0x000008, "Wrong alignment on FLiveLinkSubjectRepresentation");
static_assert(sizeof(FLiveLinkSubjectRepresentation) == 0x000018, "Wrong size on FLiveLinkSubjectRepresentation");
static_assert(offsetof(FLiveLinkSubjectRepresentation, Subject) == 0x000000, "Member 'FLiveLinkSubjectRepresentation::Subject' has a wrong offset!");
static_assert(offsetof(FLiveLinkSubjectRepresentation, Role) == 0x000010, "Member 'FLiveLinkSubjectRepresentation::Role' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkInterpolationSettings
// 0x0008 (0x0008 - 0x0000)
struct FLiveLinkInterpolationSettings final
{
public:
	bool                                          bUseInterpolation;                                 // 0x0000(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationOffset;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkInterpolationSettings) == 0x000004, "Wrong alignment on FLiveLinkInterpolationSettings");
static_assert(sizeof(FLiveLinkInterpolationSettings) == 0x000008, "Wrong size on FLiveLinkInterpolationSettings");
static_assert(offsetof(FLiveLinkInterpolationSettings, bUseInterpolation) == 0x000000, "Member 'FLiveLinkInterpolationSettings::bUseInterpolation' has a wrong offset!");
static_assert(offsetof(FLiveLinkInterpolationSettings, InterpolationOffset) == 0x000004, "Member 'FLiveLinkInterpolationSettings::InterpolationOffset' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkTimeSynchronizationSettings
// 0x000C (0x000C - 0x0000)
struct FLiveLinkTimeSynchronizationSettings final
{
public:
	struct FFrameRate                             FrameRate;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           FrameOffset;                                       // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkTimeSynchronizationSettings) == 0x000004, "Wrong alignment on FLiveLinkTimeSynchronizationSettings");
static_assert(sizeof(FLiveLinkTimeSynchronizationSettings) == 0x00000C, "Wrong size on FLiveLinkTimeSynchronizationSettings");
static_assert(offsetof(FLiveLinkTimeSynchronizationSettings, FrameRate) == 0x000000, "Member 'FLiveLinkTimeSynchronizationSettings::FrameRate' has a wrong offset!");
static_assert(offsetof(FLiveLinkTimeSynchronizationSettings, FrameOffset) == 0x000008, "Member 'FLiveLinkTimeSynchronizationSettings::FrameOffset' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSourceDebugInfo
// 0x0014 (0x0014 - 0x0000)
struct FLiveLinkSourceDebugInfo final
{
public:
	struct FLiveLinkSubjectName                   SubjectName;                                       // 0x0000(0x000C)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnapshotIndex;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfBufferAtSnapshot;                          // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkSourceDebugInfo) == 0x000004, "Wrong alignment on FLiveLinkSourceDebugInfo");
static_assert(sizeof(FLiveLinkSourceDebugInfo) == 0x000014, "Wrong size on FLiveLinkSourceDebugInfo");
static_assert(offsetof(FLiveLinkSourceDebugInfo, SubjectName) == 0x000000, "Member 'FLiveLinkSourceDebugInfo::SubjectName' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceDebugInfo, SnapshotIndex) == 0x00000C, "Member 'FLiveLinkSourceDebugInfo::SnapshotIndex' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceDebugInfo, NumberOfBufferAtSnapshot) == 0x000010, "Member 'FLiveLinkSourceDebugInfo::NumberOfBufferAtSnapshot' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSourceBufferManagementSettings
// 0x0058 (0x0058 - 0x0000)
struct FLiveLinkSourceBufferManagementSettings final
{
public:
	bool                                          bValidEngineTimeEnabled;                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidEngineTime;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineTimeOffset;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EngineTimeClockOffset;                             // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateSubFrame;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FF[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameRate                             DetectedFrameRate;                                 // 0x001C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTimecodeSmoothLatest;                          // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2400[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameRate                             SourceTimecodeFrameRate;                           // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidTimecodeFrameEnabled;                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2401[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ValidTimecodeFrame;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimecodeFrameOffset;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2402[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimecodeClockOffset;                               // 0x0040(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LatestOffset;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfFrameToBuffered;                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepAtLeastOneFrame;                              // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2403[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkSourceBufferManagementSettings) == 0x000008, "Wrong alignment on FLiveLinkSourceBufferManagementSettings");
static_assert(sizeof(FLiveLinkSourceBufferManagementSettings) == 0x000058, "Wrong size on FLiveLinkSourceBufferManagementSettings");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, bValidEngineTimeEnabled) == 0x000000, "Member 'FLiveLinkSourceBufferManagementSettings::bValidEngineTimeEnabled' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, ValidEngineTime) == 0x000004, "Member 'FLiveLinkSourceBufferManagementSettings::ValidEngineTime' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, EngineTimeOffset) == 0x000008, "Member 'FLiveLinkSourceBufferManagementSettings::EngineTimeOffset' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, EngineTimeClockOffset) == 0x000010, "Member 'FLiveLinkSourceBufferManagementSettings::EngineTimeClockOffset' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, bGenerateSubFrame) == 0x000018, "Member 'FLiveLinkSourceBufferManagementSettings::bGenerateSubFrame' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, DetectedFrameRate) == 0x00001C, "Member 'FLiveLinkSourceBufferManagementSettings::DetectedFrameRate' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, bUseTimecodeSmoothLatest) == 0x000024, "Member 'FLiveLinkSourceBufferManagementSettings::bUseTimecodeSmoothLatest' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, SourceTimecodeFrameRate) == 0x000028, "Member 'FLiveLinkSourceBufferManagementSettings::SourceTimecodeFrameRate' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, bValidTimecodeFrameEnabled) == 0x000030, "Member 'FLiveLinkSourceBufferManagementSettings::bValidTimecodeFrameEnabled' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, ValidTimecodeFrame) == 0x000034, "Member 'FLiveLinkSourceBufferManagementSettings::ValidTimecodeFrame' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, TimecodeFrameOffset) == 0x000038, "Member 'FLiveLinkSourceBufferManagementSettings::TimecodeFrameOffset' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, TimecodeClockOffset) == 0x000040, "Member 'FLiveLinkSourceBufferManagementSettings::TimecodeClockOffset' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, LatestOffset) == 0x000048, "Member 'FLiveLinkSourceBufferManagementSettings::LatestOffset' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, MaxNumberOfFrameToBuffered) == 0x00004C, "Member 'FLiveLinkSourceBufferManagementSettings::MaxNumberOfFrameToBuffered' has a wrong offset!");
static_assert(offsetof(FLiveLinkSourceBufferManagementSettings, bKeepAtLeastOneFrame) == 0x000050, "Member 'FLiveLinkSourceBufferManagementSettings::bKeepAtLeastOneFrame' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkTransformBlueprintData
// 0x00E8 (0x00F0 - 0x0008)
struct FLiveLinkTransformBlueprintData final : public FLiveLinkBaseBlueprintData
{
public:
	struct FLiveLinkTransformStaticData           StaticData;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_2404[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLiveLinkTransformFrameData            FrameData;                                         // 0x0020(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkTransformBlueprintData) == 0x000010, "Wrong alignment on FLiveLinkTransformBlueprintData");
static_assert(sizeof(FLiveLinkTransformBlueprintData) == 0x0000F0, "Wrong size on FLiveLinkTransformBlueprintData");
static_assert(offsetof(FLiveLinkTransformBlueprintData, StaticData) == 0x000008, "Member 'FLiveLinkTransformBlueprintData::StaticData' has a wrong offset!");
static_assert(offsetof(FLiveLinkTransformBlueprintData, FrameData) == 0x000020, "Member 'FLiveLinkTransformBlueprintData::FrameData' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkCurveElement
// 0x0010 (0x0010 - 0x0000)
struct FLiveLinkCurveElement final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveValue;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkCurveElement) == 0x000004, "Wrong alignment on FLiveLinkCurveElement");
static_assert(sizeof(FLiveLinkCurveElement) == 0x000010, "Wrong size on FLiveLinkCurveElement");
static_assert(offsetof(FLiveLinkCurveElement, CurveName) == 0x000000, "Member 'FLiveLinkCurveElement::CurveName' has a wrong offset!");
static_assert(offsetof(FLiveLinkCurveElement, CurveValue) == 0x00000C, "Member 'FLiveLinkCurveElement::CurveValue' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkFrameData
// 0x0090 (0x0090 - 0x0000)
struct FLiveLinkFrameData final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLiveLinkCurveElement>          CurveElements;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLiveLinkWorldTime                     WorldTime;                                         // 0x0020(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FLiveLinkMetaData                      MetaData;                                          // 0x0030(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkFrameData) == 0x000008, "Wrong alignment on FLiveLinkFrameData");
static_assert(sizeof(FLiveLinkFrameData) == 0x000090, "Wrong size on FLiveLinkFrameData");
static_assert(offsetof(FLiveLinkFrameData, Transforms) == 0x000000, "Member 'FLiveLinkFrameData::Transforms' has a wrong offset!");
static_assert(offsetof(FLiveLinkFrameData, CurveElements) == 0x000010, "Member 'FLiveLinkFrameData::CurveElements' has a wrong offset!");
static_assert(offsetof(FLiveLinkFrameData, WorldTime) == 0x000020, "Member 'FLiveLinkFrameData::WorldTime' has a wrong offset!");
static_assert(offsetof(FLiveLinkFrameData, MetaData) == 0x000030, "Member 'FLiveLinkFrameData::MetaData' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkFrameRate
// 0x0000 (0x0008 - 0x0008)
struct FLiveLinkFrameRate final : public FFrameRate
{
};
static_assert(alignof(FLiveLinkFrameRate) == 0x000004, "Wrong alignment on FLiveLinkFrameRate");
static_assert(sizeof(FLiveLinkFrameRate) == 0x000008, "Wrong size on FLiveLinkFrameRate");

// ScriptStruct LiveLinkInterface.LiveLinkTimeCode_Base_DEPRECATED
// 0x0010 (0x0010 - 0x0000)
struct FLiveLinkTimeCode_Base_DEPRECATED
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frames;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLiveLinkFrameRate                     FrameRate;                                         // 0x0008(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkTimeCode_Base_DEPRECATED) == 0x000004, "Wrong alignment on FLiveLinkTimeCode_Base_DEPRECATED");
static_assert(sizeof(FLiveLinkTimeCode_Base_DEPRECATED) == 0x000010, "Wrong size on FLiveLinkTimeCode_Base_DEPRECATED");
static_assert(offsetof(FLiveLinkTimeCode_Base_DEPRECATED, Seconds) == 0x000000, "Member 'FLiveLinkTimeCode_Base_DEPRECATED::Seconds' has a wrong offset!");
static_assert(offsetof(FLiveLinkTimeCode_Base_DEPRECATED, Frames) == 0x000004, "Member 'FLiveLinkTimeCode_Base_DEPRECATED::Frames' has a wrong offset!");
static_assert(offsetof(FLiveLinkTimeCode_Base_DEPRECATED, FrameRate) == 0x000008, "Member 'FLiveLinkTimeCode_Base_DEPRECATED::FrameRate' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkTimeCode
// 0x0000 (0x0010 - 0x0010)
struct FLiveLinkTimeCode final : public FLiveLinkTimeCode_Base_DEPRECATED
{
};
static_assert(alignof(FLiveLinkTimeCode) == 0x000004, "Wrong alignment on FLiveLinkTimeCode");
static_assert(sizeof(FLiveLinkTimeCode) == 0x000010, "Wrong size on FLiveLinkTimeCode");

// ScriptStruct LiveLinkInterface.LiveLinkTime
// 0x0018 (0x0018 - 0x0000)
struct FLiveLinkTime final
{
public:
	double                                        WorldTime;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQualifiedFrameTime                    SceneTime;                                         // 0x0008(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkTime) == 0x000008, "Wrong alignment on FLiveLinkTime");
static_assert(sizeof(FLiveLinkTime) == 0x000018, "Wrong size on FLiveLinkTime");
static_assert(offsetof(FLiveLinkTime, WorldTime) == 0x000000, "Member 'FLiveLinkTime::WorldTime' has a wrong offset!");
static_assert(offsetof(FLiveLinkTime, SceneTime) == 0x000008, "Member 'FLiveLinkTime::SceneTime' has a wrong offset!");

}

