#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroInput

#include "Basic.hpp"

#include "KuroInput_structs.hpp"
#include "Engine_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function KuroInput.BasePlayerController.SetKuroForceFeedbackConfig
// 0x0008 (0x0008 - 0x0000)
struct BasePlayerController_SetKuroForceFeedbackConfig final
{
public:
	EGlobalKuroForceFeedbackType                  FeedbackConfig;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17CE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GlobalFeedbackCoef;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerController_SetKuroForceFeedbackConfig) == 0x000004, "Wrong alignment on BasePlayerController_SetKuroForceFeedbackConfig");
static_assert(sizeof(BasePlayerController_SetKuroForceFeedbackConfig) == 0x000008, "Wrong size on BasePlayerController_SetKuroForceFeedbackConfig");
static_assert(offsetof(BasePlayerController_SetKuroForceFeedbackConfig, FeedbackConfig) == 0x000000, "Member 'BasePlayerController_SetKuroForceFeedbackConfig::FeedbackConfig' has a wrong offset!");
static_assert(offsetof(BasePlayerController_SetKuroForceFeedbackConfig, GlobalFeedbackCoef) == 0x000004, "Member 'BasePlayerController_SetKuroForceFeedbackConfig::GlobalFeedbackCoef' has a wrong offset!");

// Function KuroInput.BasePlayerController.AddActionBinding
// 0x0028 (0x0028 - 0x0000)
struct BasePlayerController_AddActionBinding final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   KeyEvent;                                          // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17CF[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D0[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_AddActionBinding) == 0x000008, "Wrong alignment on BasePlayerController_AddActionBinding");
static_assert(sizeof(BasePlayerController_AddActionBinding) == 0x000028, "Wrong size on BasePlayerController_AddActionBinding");
static_assert(offsetof(BasePlayerController_AddActionBinding, ActionName) == 0x000000, "Member 'BasePlayerController_AddActionBinding::ActionName' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddActionBinding, KeyEvent) == 0x00000C, "Member 'BasePlayerController_AddActionBinding::KeyEvent' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddActionBinding, Object) == 0x000010, "Member 'BasePlayerController_AddActionBinding::Object' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddActionBinding, FuncName) == 0x000018, "Member 'BasePlayerController_AddActionBinding::FuncName' has a wrong offset!");

// Function KuroInput.BasePlayerController.AddAxisBinding
// 0x0028 (0x0028 - 0x0000)
struct BasePlayerController_AddAxisBinding final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D2[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_AddAxisBinding) == 0x000008, "Wrong alignment on BasePlayerController_AddAxisBinding");
static_assert(sizeof(BasePlayerController_AddAxisBinding) == 0x000028, "Wrong size on BasePlayerController_AddAxisBinding");
static_assert(offsetof(BasePlayerController_AddAxisBinding, AxisName) == 0x000000, "Member 'BasePlayerController_AddAxisBinding::AxisName' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddAxisBinding, Object) == 0x000010, "Member 'BasePlayerController_AddAxisBinding::Object' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddAxisBinding, FuncName) == 0x000018, "Member 'BasePlayerController_AddAxisBinding::FuncName' has a wrong offset!");

// Function KuroInput.BasePlayerController.AddKeyBinding
// 0x0048 (0x0048 - 0x0000)
struct BasePlayerController_AddKeyBinding final
{
public:
	struct FInputChord                            Chord;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   KeyEvent;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D3[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0038(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D4[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_AddKeyBinding) == 0x000008, "Wrong alignment on BasePlayerController_AddKeyBinding");
static_assert(sizeof(BasePlayerController_AddKeyBinding) == 0x000048, "Wrong size on BasePlayerController_AddKeyBinding");
static_assert(offsetof(BasePlayerController_AddKeyBinding, Chord) == 0x000000, "Member 'BasePlayerController_AddKeyBinding::Chord' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddKeyBinding, KeyEvent) == 0x000028, "Member 'BasePlayerController_AddKeyBinding::KeyEvent' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddKeyBinding, Object) == 0x000030, "Member 'BasePlayerController_AddKeyBinding::Object' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddKeyBinding, FuncName) == 0x000038, "Member 'BasePlayerController_AddKeyBinding::FuncName' has a wrong offset!");

// Function KuroInput.BasePlayerController.AddTouchBinding
// 0x0020 (0x0020 - 0x0000)
struct BasePlayerController_AddTouchBinding final
{
public:
	EInputEvent                                   KeyEvent;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D6[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_AddTouchBinding) == 0x000008, "Wrong alignment on BasePlayerController_AddTouchBinding");
static_assert(sizeof(BasePlayerController_AddTouchBinding) == 0x000020, "Wrong size on BasePlayerController_AddTouchBinding");
static_assert(offsetof(BasePlayerController_AddTouchBinding, KeyEvent) == 0x000000, "Member 'BasePlayerController_AddTouchBinding::KeyEvent' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddTouchBinding, Object) == 0x000008, "Member 'BasePlayerController_AddTouchBinding::Object' has a wrong offset!");
static_assert(offsetof(BasePlayerController_AddTouchBinding, FuncName) == 0x000010, "Member 'BasePlayerController_AddTouchBinding::FuncName' has a wrong offset!");

// Function KuroInput.BasePlayerController.PlayKuroForceFeedback
// 0x0018 (0x0018 - 0x0000)
struct BasePlayerController_PlayKuroForceFeedback final
{
public:
	class UKuroForceFeedbackEffect*               ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimeDilation;                               // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayWhilePaused;                                  // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D7[0x1];                                     // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_PlayKuroForceFeedback) == 0x000008, "Wrong alignment on BasePlayerController_PlayKuroForceFeedback");
static_assert(sizeof(BasePlayerController_PlayKuroForceFeedback) == 0x000018, "Wrong size on BasePlayerController_PlayKuroForceFeedback");
static_assert(offsetof(BasePlayerController_PlayKuroForceFeedback, ForceFeedbackEffect) == 0x000000, "Member 'BasePlayerController_PlayKuroForceFeedback::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(BasePlayerController_PlayKuroForceFeedback, Tag) == 0x000008, "Member 'BasePlayerController_PlayKuroForceFeedback::Tag' has a wrong offset!");
static_assert(offsetof(BasePlayerController_PlayKuroForceFeedback, bLooping) == 0x000014, "Member 'BasePlayerController_PlayKuroForceFeedback::bLooping' has a wrong offset!");
static_assert(offsetof(BasePlayerController_PlayKuroForceFeedback, bIgnoreTimeDilation) == 0x000015, "Member 'BasePlayerController_PlayKuroForceFeedback::bIgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(BasePlayerController_PlayKuroForceFeedback, bPlayWhilePaused) == 0x000016, "Member 'BasePlayerController_PlayKuroForceFeedback::bPlayWhilePaused' has a wrong offset!");

// Function KuroInput.BasePlayerController.ReceivePostProcessInput
// 0x0008 (0x0008 - 0x0000)
struct BasePlayerController_ReceivePostProcessInput final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamePaused;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D8[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_ReceivePostProcessInput) == 0x000004, "Wrong alignment on BasePlayerController_ReceivePostProcessInput");
static_assert(sizeof(BasePlayerController_ReceivePostProcessInput) == 0x000008, "Wrong size on BasePlayerController_ReceivePostProcessInput");
static_assert(offsetof(BasePlayerController_ReceivePostProcessInput, DeltaTime) == 0x000000, "Member 'BasePlayerController_ReceivePostProcessInput::DeltaTime' has a wrong offset!");
static_assert(offsetof(BasePlayerController_ReceivePostProcessInput, bGamePaused) == 0x000004, "Member 'BasePlayerController_ReceivePostProcessInput::bGamePaused' has a wrong offset!");

// Function KuroInput.BasePlayerController.ReceivePreProcessInput
// 0x0008 (0x0008 - 0x0000)
struct BasePlayerController_ReceivePreProcessInput final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamePaused;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D9[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_ReceivePreProcessInput) == 0x000004, "Wrong alignment on BasePlayerController_ReceivePreProcessInput");
static_assert(sizeof(BasePlayerController_ReceivePreProcessInput) == 0x000008, "Wrong size on BasePlayerController_ReceivePreProcessInput");
static_assert(offsetof(BasePlayerController_ReceivePreProcessInput, DeltaTime) == 0x000000, "Member 'BasePlayerController_ReceivePreProcessInput::DeltaTime' has a wrong offset!");
static_assert(offsetof(BasePlayerController_ReceivePreProcessInput, bGamePaused) == 0x000004, "Member 'BasePlayerController_ReceivePreProcessInput::bGamePaused' has a wrong offset!");

// Function KuroInput.BasePlayerController.StopKuroForceFeedback
// 0x0018 (0x0018 - 0x0000)
struct BasePlayerController_StopKuroForceFeedback final
{
public:
	class UKuroForceFeedbackEffect*               ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DA[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePlayerController_StopKuroForceFeedback) == 0x000008, "Wrong alignment on BasePlayerController_StopKuroForceFeedback");
static_assert(sizeof(BasePlayerController_StopKuroForceFeedback) == 0x000018, "Wrong size on BasePlayerController_StopKuroForceFeedback");
static_assert(offsetof(BasePlayerController_StopKuroForceFeedback, ForceFeedbackEffect) == 0x000000, "Member 'BasePlayerController_StopKuroForceFeedback::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(BasePlayerController_StopKuroForceFeedback, Tag) == 0x000008, "Member 'BasePlayerController_StopKuroForceFeedback::Tag' has a wrong offset!");

}

