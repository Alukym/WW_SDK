#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BuildPatchServices

#include "Basic.hpp"

#include "BuildPatchServices_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class BuildPatchServices.BuildPatchManifest
// 0x00F8 (0x0128 - 0x0030)
class UBuildPatchManifest final : public UObject
{
public:
	uint8                                         ManifestFileVersion;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFileData;                                       // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A9[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        AppID;                                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppName;                                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildVersion;                                      // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LaunchExe;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LaunchCommand;                                     // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           PrereqIds;                                         // 0x0078(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 PrereqName;                                        // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrereqPath;                                        // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrereqArgs;                                        // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFileManifestData>              FileManifestList;                                  // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FChunkInfoData>                 ChunkList;                                         // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomFieldData>               CustomFields;                                      // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildPatchManifest">();
	}
	static class UBuildPatchManifest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuildPatchManifest>();
	}
};
static_assert(alignof(UBuildPatchManifest) == 0x000008, "Wrong alignment on UBuildPatchManifest");
static_assert(sizeof(UBuildPatchManifest) == 0x000128, "Wrong size on UBuildPatchManifest");
static_assert(offsetof(UBuildPatchManifest, ManifestFileVersion) == 0x000030, "Member 'UBuildPatchManifest::ManifestFileVersion' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, bIsFileData) == 0x000031, "Member 'UBuildPatchManifest::bIsFileData' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, AppID) == 0x000034, "Member 'UBuildPatchManifest::AppID' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, AppName) == 0x000038, "Member 'UBuildPatchManifest::AppName' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, BuildVersion) == 0x000048, "Member 'UBuildPatchManifest::BuildVersion' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, LaunchExe) == 0x000058, "Member 'UBuildPatchManifest::LaunchExe' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, LaunchCommand) == 0x000068, "Member 'UBuildPatchManifest::LaunchCommand' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, PrereqIds) == 0x000078, "Member 'UBuildPatchManifest::PrereqIds' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, PrereqName) == 0x0000C8, "Member 'UBuildPatchManifest::PrereqName' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, PrereqPath) == 0x0000D8, "Member 'UBuildPatchManifest::PrereqPath' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, PrereqArgs) == 0x0000E8, "Member 'UBuildPatchManifest::PrereqArgs' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, FileManifestList) == 0x0000F8, "Member 'UBuildPatchManifest::FileManifestList' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, ChunkList) == 0x000108, "Member 'UBuildPatchManifest::ChunkList' has a wrong offset!");
static_assert(offsetof(UBuildPatchManifest, CustomFields) == 0x000118, "Member 'UBuildPatchManifest::CustomFields' has a wrong offset!");

}

