#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapSecureStorage

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class MagicLeapSecureStorage.MagicLeapSecureStorage
// 0x0000 (0x0030 - 0x0030)
class UMagicLeapSecureStorage final : public UBlueprintFunctionLibrary
{
public:
	static bool DeleteSecureData(const class FString& Key);
	static bool GetSecureArray(const class FString& Key, TArray<int32>* DataToRetrieve);
	static bool GetSecureBool(const class FString& Key, bool* DataToRetrieve);
	static bool GetSecureByte(const class FString& Key, uint8* DataToRetrieve);
	static bool GetSecureFloat(const class FString& Key, float* DataToRetrieve);
	static bool GetSecureInt(const class FString& Key, int32* DataToRetrieve);
	static bool GetSecureInt64(const class FString& Key, int64* DataToRetrieve);
	static bool GetSecureRotator(const class FString& Key, struct FRotator* DataToRetrieve);
	static bool GetSecureSaveGame(const class FString& Key, class USaveGame** ObjectToRetrieve);
	static bool GetSecureString(const class FString& Key, class FString* DataToRetrieve);
	static bool GetSecureTransform(const class FString& Key, struct FTransform* DataToRetrieve);
	static bool GetSecureVector(const class FString& Key, struct FVector* DataToRetrieve);
	static bool PutSecureArray(const class FString& Key, const TArray<int32>& DataToStore);
	static bool PutSecureBool(const class FString& Key, bool DataToStore);
	static bool PutSecureByte(const class FString& Key, uint8 DataToStore);
	static bool PutSecureFloat(const class FString& Key, float DataToStore);
	static bool PutSecureInt(const class FString& Key, int32 DataToStore);
	static bool PutSecureInt64(const class FString& Key, int64 DataToStore);
	static bool PutSecureRotator(const class FString& Key, const struct FRotator& DataToStore);
	static bool PutSecureSaveGame(const class FString& Key, class USaveGame* ObjectToStore);
	static bool PutSecureString(const class FString& Key, const class FString& DataToStore);
	static bool PutSecureTransform(const class FString& Key, const struct FTransform& DataToStore);
	static bool PutSecureVector(const class FString& Key, const struct FVector& DataToStore);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MagicLeapSecureStorage">();
	}
	static class UMagicLeapSecureStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMagicLeapSecureStorage>();
	}
};
static_assert(alignof(UMagicLeapSecureStorage) == 0x000008, "Wrong alignment on UMagicLeapSecureStorage");
static_assert(sizeof(UMagicLeapSecureStorage) == 0x000030, "Wrong size on UMagicLeapSecureStorage");

}

